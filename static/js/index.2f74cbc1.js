(() => {
  var e = {
      674: function () {},
      13282: function (e, t, n) {
        var i = {
          "./zh-mo": "99807",
          "./br": "1278",
          "./is": "90135",
          "./lt": "57010",
          "./ur.js": "13795",
          "./tlh": "89444",
          "./eu.js": "77763",
          "./uk.js": "67691",
          "./jv.js": "24286",
          "./ku.js": "1408",
          "./ne": "16744",
          "./nl": "93901",
          "./ug-cn": "9288",
          "./fil.js": "42549",
          "./hr": "30316",
          "./sv.js": "98760",
          "./hy-am.js": "11423",
          "./fr-ch": "52330",
          "./en-nz": "76319",
          "./bn-bd.js": "76225",
          "./it-ch": "10150",
          "./es-do": "55251",
          "./ms-my": "41237",
          "./en-ie.js": "46436",
          "./ss.js": "95606",
          "./mk": "95966",
          "./mr": "10370",
          "./pl": "64495",
          "./te": "23110",
          "./ms.js": "9847",
          "./ar-kw": "96135",
          "./zh-cn": "83839",
          "./es-do.js": "55251",
          "./bs.js": "80622",
          "./mt.js": "72126",
          "./hi": "30094",
          "./uz": "6791",
          "./fr-ch.js": "52330",
          "./ar-ma": "47702",
          "./en-in": "44175",
          "./en-gb": "22243",
          "./me.js": "39861",
          "./tzl": "28254",
          "./x-pseudo.js": "14378",
          "./fil": "42549",
          "./zh-hk.js": "55726",
          "./el.js": "50837",
          "./fa": "76959",
          "./de-at.js": "60217",
          "./fo": "94694",
          "./ja": "39183",
          "./mi": "35493",
          "./gom-deva": "27884",
          "./sr": "49131",
          "./my.js": "56165",
          "./cv": "50877",
          "./ga": "29295",
          "./af.js": "42786",
          "./ar-ma.js": "47702",
          "./nb": "64924",
          "./sr-cyrl": "79915",
          "./tg.js": "27321",
          "./tk": "19005",
          "./tr": "72397",
          "./en-il": "47207",
          "./en-sg.js": "31662",
          "./en-in.js": "44175",
          "./en-gb.js": "22243",
          "./bm": "67438",
          "./eu": "77763",
          "./lo": "55466",
          "./gom-latn.js": "23168",
          "./tk.js": "19005",
          "./zh-tw": "74152",
          "./fr-ca.js": "63049",
          "./cv.js": "50877",
          "./hi.js": "30094",
          "./lb.js": "36841",
          "./pa-in": "15858",
          "./sk.js": "64249",
          "./nl-be.js": "59814",
          "./az": "31083",
          "./el": "50837",
          "./es": "55655",
          "./ku": "1408",
          "./ro": "96459",
          "./de-ch.js": "60894",
          "./sl.js": "14985",
          "./bs": "80622",
          "./it": "90626",
          "./sv": "98760",
          "./be.js": "9808",
          "./nn.js": "83877",
          "./cy": "47373",
          "./bg.js": "68338",
          "./gd": "2101",
          "./mt": "72126",
          "./tg": "27321",
          "./zh-tw.js": "74152",
          "./nb.js": "64924",
          "./gl": "38794",
          "./oc-lnc": "92135",
          "./ar-ly": "56440",
          "./de-at": "60217",
          "./en-il.js": "47207",
          "./fi.js": "11897",
          "./mi.js": "35493",
          "./km.js": "18758",
          "./ne.js": "16744",
          "./mk.js": "95966",
          "./de-ch": "60894",
          "./ar-tn.js": "37100",
          "./id": "29218",
          "./is.js": "90135",
          "./da.js": "24780",
          "./pt-br": "57971",
          "./sw.js": "91172",
          "./tzl.js": "28254",
          "./uz.js": "6791",
          "./kn.js": "79282",
          "./ar-ly.js": "56440",
          "./nl.js": "93901",
          "./br.js": "1278",
          "./si.js": "90124",
          "./uz-latn.js": "60588",
          "./sr-cyrl.js": "79915",
          "./en-au.js": "78348",
          "./bo": "11560",
          "./sd": "40950",
          "./en-sg": "31662",
          "./sk": "64249",
          "./ca": "2468",
          "./fi": "11897",
          "./cs.js": "5822",
          "./gl.js": "38794",
          "./es-mx": "96112",
          "./ky.js": "33291",
          "./eo.js": "92915",
          "./dv": "5300",
          "./uk": "67691",
          "./ur": "13795",
          "./fo.js": "94694",
          "./lo.js": "55466",
          "./en-ca.js": "77925",
          "./gd.js": "2101",
          "./tzm-latn": "30699",
          "./kk.js": "47772",
          "./sq": "51104",
          "./mr.js": "10370",
          "./gom-deva.js": "27884",
          "./gom-latn": "23168",
          "./dv.js": "5300",
          "./tl-ph.js": "75768",
          "./ar-sa": "16040",
          "./gu": "95349",
          "./fy.js": "5044",
          "./bm.js": "67438",
          "./kn": "79282",
          "./tl-ph": "75768",
          "./be": "9808",
          "./et": "5603",
          "./hu": "22138",
          "./te.js": "23110",
          "./tzm": "51106",
          "./vi": "65666",
          "./ml.js": "87341",
          "./nl-be": "59814",
          "./zh-mo.js": "99807",
          "./cs": "5822",
          "./mn": "5115",
          "./ta": "27333",
          "./tet.js": "52095",
          "./th": "9041",
          "./vi.js": "65666",
          "./zh-hk": "55726",
          "./ga.js": "29295",
          "./it.js": "90626",
          "./ar-ps.js": "20315",
          "./et.js": "5603",
          "./hu.js": "22138",
          "./ar": "30867",
          "./he": "24206",
          "./hr.js": "30316",
          "./ru": "21793",
          "./yo": "75805",
          "./bn-bd": "76225",
          "./pa-in.js": "15858",
          "./ar-kw.js": "96135",
          "./ta.js": "27333",
          "./tr.js": "72397",
          "./fr": "94470",
          "./fy": "5044",
          "./me": "39861",
          "./ml": "87341",
          "./ms": "9847",
          "./ku-kmr.js": "90563",
          "./ms-my.js": "41237",
          "./pt": "89520",
          "./ar-ps": "20315",
          "./ar.js": "30867",
          "./kk": "47772",
          "./ky": "33291",
          "./oc-lnc.js": "92135",
          "./ko.js": "33730",
          "./id.js": "29218",
          "./pl.js": "64495",
          "./se": "10490",
          "./sl": "14985",
          "./ss": "95606",
          "./ro.js": "96459",
          "./he.js": "24206",
          "./sd.js": "40950",
          "./en-au": "78348",
          "./ka.js": "12105",
          "./da": "24780",
          "./my": "56165",
          "./bn.js": "8905",
          "./az.js": "31083",
          "./en-ie": "46436",
          "./se.js": "10490",
          "./pt.js": "89520",
          "./bo.js": "11560",
          "./zh-cn.js": "83839",
          "./lt.js": "57010",
          "./ar-dz.js": "14130",
          "./tet": "52095",
          "./es-us.js": "71146",
          "./bg": "68338",
          "./bn": "8905",
          "./en-ca": "77925",
          "./eo": "92915",
          "./fr.js": "94470",
          "./hy-am": "11423",
          "./lb": "36841",
          "./lv.js": "37595",
          "./es-us": "71146",
          "./x-pseudo": "14378",
          "./ca.js": "2468",
          "./it-ch.js": "10150",
          "./ja.js": "39183",
          "./th.js": "9041",
          "./jv": "24286",
          "./gu.js": "95349",
          "./ku-kmr": "90563",
          "./ar-sa.js": "16040",
          "./af": "42786",
          "./de.js": "59740",
          "./fa.js": "76959",
          "./ka": "12105",
          "./ko": "33730",
          "./sq.js": "51104",
          "./tlh.js": "89444",
          "./yo.js": "75805",
          "./sr.js": "49131",
          "./ar-tn": "37100",
          "./ar-dz": "14130",
          "./uz-latn": "60588",
          "./lv": "37595",
          "./ru.js": "21793",
          "./si": "90124",
          "./sw": "91172",
          "./tzm.js": "51106",
          "./en-nz.js": "76319",
          "./es.js": "55655",
          "./pt-br.js": "57971",
          "./cy.js": "47373",
          "./mn.js": "5115",
          "./de": "59740",
          "./fr-ca": "63049",
          "./km": "18758",
          "./nn": "83877",
          "./ug-cn.js": "9288",
          "./es-mx.js": "96112",
          "./tzm-latn.js": "30699",
        };
        function a(e) {
          return Promise.resolve().then(function () {
            if (!n.o(i, e)) {
              var t = Error("Cannot find module '" + e + "'");
              throw ((t.code = "MODULE_NOT_FOUND"), t);
            }
            var a = i[e];
            return n.t(a, 23);
          });
        }
        (a.keys = () => Object.keys(i)), (a.id = "13282"), (e.exports = a);
      },
      26058: function (e, t, n) {
        var i = {
          "./af": "42786",
          "./af.js": "42786",
          "./ar": "30867",
          "./ar-dz": "14130",
          "./ar-dz.js": "14130",
          "./ar-kw": "96135",
          "./ar-kw.js": "96135",
          "./ar-ly": "56440",
          "./ar-ly.js": "56440",
          "./ar-ma": "47702",
          "./ar-ma.js": "47702",
          "./ar-ps": "20315",
          "./ar-ps.js": "20315",
          "./ar-sa": "16040",
          "./ar-sa.js": "16040",
          "./ar-tn": "37100",
          "./ar-tn.js": "37100",
          "./ar.js": "30867",
          "./az": "31083",
          "./az.js": "31083",
          "./be": "9808",
          "./be.js": "9808",
          "./bg": "68338",
          "./bg.js": "68338",
          "./bm": "67438",
          "./bm.js": "67438",
          "./bn": "8905",
          "./bn-bd": "76225",
          "./bn-bd.js": "76225",
          "./bn.js": "8905",
          "./bo": "11560",
          "./bo.js": "11560",
          "./br": "1278",
          "./br.js": "1278",
          "./bs": "80622",
          "./bs.js": "80622",
          "./ca": "2468",
          "./ca.js": "2468",
          "./cs": "5822",
          "./cs.js": "5822",
          "./cv": "50877",
          "./cv.js": "50877",
          "./cy": "47373",
          "./cy.js": "47373",
          "./da": "24780",
          "./da.js": "24780",
          "./de": "59740",
          "./de-at": "60217",
          "./de-at.js": "60217",
          "./de-ch": "60894",
          "./de-ch.js": "60894",
          "./de.js": "59740",
          "./dv": "5300",
          "./dv.js": "5300",
          "./el": "50837",
          "./el.js": "50837",
          "./en-au": "78348",
          "./en-au.js": "78348",
          "./en-ca": "77925",
          "./en-ca.js": "77925",
          "./en-gb": "22243",
          "./en-gb.js": "22243",
          "./en-ie": "46436",
          "./en-ie.js": "46436",
          "./en-il": "47207",
          "./en-il.js": "47207",
          "./en-in": "44175",
          "./en-in.js": "44175",
          "./en-nz": "76319",
          "./en-nz.js": "76319",
          "./en-sg": "31662",
          "./en-sg.js": "31662",
          "./eo": "92915",
          "./eo.js": "92915",
          "./es": "55655",
          "./es-do": "55251",
          "./es-do.js": "55251",
          "./es-mx": "96112",
          "./es-mx.js": "96112",
          "./es-us": "71146",
          "./es-us.js": "71146",
          "./es.js": "55655",
          "./et": "5603",
          "./et.js": "5603",
          "./eu": "77763",
          "./eu.js": "77763",
          "./fa": "76959",
          "./fa.js": "76959",
          "./fi": "11897",
          "./fi.js": "11897",
          "./fil": "42549",
          "./fil.js": "42549",
          "./fo": "94694",
          "./fo.js": "94694",
          "./fr": "94470",
          "./fr-ca": "63049",
          "./fr-ca.js": "63049",
          "./fr-ch": "52330",
          "./fr-ch.js": "52330",
          "./fr.js": "94470",
          "./fy": "5044",
          "./fy.js": "5044",
          "./ga": "29295",
          "./ga.js": "29295",
          "./gd": "2101",
          "./gd.js": "2101",
          "./gl": "38794",
          "./gl.js": "38794",
          "./gom-deva": "27884",
          "./gom-deva.js": "27884",
          "./gom-latn": "23168",
          "./gom-latn.js": "23168",
          "./gu": "95349",
          "./gu.js": "95349",
          "./he": "24206",
          "./he.js": "24206",
          "./hi": "30094",
          "./hi.js": "30094",
          "./hr": "30316",
          "./hr.js": "30316",
          "./hu": "22138",
          "./hu.js": "22138",
          "./hy-am": "11423",
          "./hy-am.js": "11423",
          "./id": "29218",
          "./id.js": "29218",
          "./is": "90135",
          "./is.js": "90135",
          "./it": "90626",
          "./it-ch": "10150",
          "./it-ch.js": "10150",
          "./it.js": "90626",
          "./ja": "39183",
          "./ja.js": "39183",
          "./jv": "24286",
          "./jv.js": "24286",
          "./ka": "12105",
          "./ka.js": "12105",
          "./kk": "47772",
          "./kk.js": "47772",
          "./km": "18758",
          "./km.js": "18758",
          "./kn": "79282",
          "./kn.js": "79282",
          "./ko": "33730",
          "./ko.js": "33730",
          "./ku": "1408",
          "./ku-kmr": "90563",
          "./ku-kmr.js": "90563",
          "./ku.js": "1408",
          "./ky": "33291",
          "./ky.js": "33291",
          "./lb": "36841",
          "./lb.js": "36841",
          "./lo": "55466",
          "./lo.js": "55466",
          "./lt": "57010",
          "./lt.js": "57010",
          "./lv": "37595",
          "./lv.js": "37595",
          "./me": "39861",
          "./me.js": "39861",
          "./mi": "35493",
          "./mi.js": "35493",
          "./mk": "95966",
          "./mk.js": "95966",
          "./ml": "87341",
          "./ml.js": "87341",
          "./mn": "5115",
          "./mn.js": "5115",
          "./mr": "10370",
          "./mr.js": "10370",
          "./ms": "9847",
          "./ms-my": "41237",
          "./ms-my.js": "41237",
          "./ms.js": "9847",
          "./mt": "72126",
          "./mt.js": "72126",
          "./my": "56165",
          "./my.js": "56165",
          "./nb": "64924",
          "./nb.js": "64924",
          "./ne": "16744",
          "./ne.js": "16744",
          "./nl": "93901",
          "./nl-be": "59814",
          "./nl-be.js": "59814",
          "./nl.js": "93901",
          "./nn": "83877",
          "./nn.js": "83877",
          "./oc-lnc": "92135",
          "./oc-lnc.js": "92135",
          "./pa-in": "15858",
          "./pa-in.js": "15858",
          "./pl": "64495",
          "./pl.js": "64495",
          "./pt": "89520",
          "./pt-br": "57971",
          "./pt-br.js": "57971",
          "./pt.js": "89520",
          "./ro": "96459",
          "./ro.js": "96459",
          "./ru": "21793",
          "./ru.js": "21793",
          "./sd": "40950",
          "./sd.js": "40950",
          "./se": "10490",
          "./se.js": "10490",
          "./si": "90124",
          "./si.js": "90124",
          "./sk": "64249",
          "./sk.js": "64249",
          "./sl": "14985",
          "./sl.js": "14985",
          "./sq": "51104",
          "./sq.js": "51104",
          "./sr": "49131",
          "./sr-cyrl": "79915",
          "./sr-cyrl.js": "79915",
          "./sr.js": "49131",
          "./ss": "95606",
          "./ss.js": "95606",
          "./sv": "98760",
          "./sv.js": "98760",
          "./sw": "91172",
          "./sw.js": "91172",
          "./ta": "27333",
          "./ta.js": "27333",
          "./te": "23110",
          "./te.js": "23110",
          "./tet": "52095",
          "./tet.js": "52095",
          "./tg": "27321",
          "./tg.js": "27321",
          "./th": "9041",
          "./th.js": "9041",
          "./tk": "19005",
          "./tk.js": "19005",
          "./tl-ph": "75768",
          "./tl-ph.js": "75768",
          "./tlh": "89444",
          "./tlh.js": "89444",
          "./tr": "72397",
          "./tr.js": "72397",
          "./tzl": "28254",
          "./tzl.js": "28254",
          "./tzm": "51106",
          "./tzm-latn": "30699",
          "./tzm-latn.js": "30699",
          "./tzm.js": "51106",
          "./ug-cn": "9288",
          "./ug-cn.js": "9288",
          "./uk": "67691",
          "./uk.js": "67691",
          "./ur": "13795",
          "./ur.js": "13795",
          "./uz": "6791",
          "./uz-latn": "60588",
          "./uz-latn.js": "60588",
          "./uz.js": "6791",
          "./vi": "65666",
          "./vi.js": "65666",
          "./x-pseudo": "14378",
          "./x-pseudo.js": "14378",
          "./yo": "75805",
          "./yo.js": "75805",
          "./zh-cn": "83839",
          "./zh-cn.js": "83839",
          "./zh-hk": "55726",
          "./zh-hk.js": "55726",
          "./zh-mo": "99807",
          "./zh-mo.js": "99807",
          "./zh-tw": "74152",
          "./zh-tw.js": "74152",
        };
        function a(e) {
          return n(o(e));
        }
        function o(e) {
          if (!n.o(i, e)) {
            var t = Error("Cannot find module '" + e + "'");
            throw ((t.code = "MODULE_NOT_FOUND"), t);
          }
          return i[e];
        }
        (a.keys = function () {
          return Object.keys(i);
        }),
          (a.resolve = o),
          (e.exports = a),
          (a.id = "26058");
      },
      56505: function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            default: function () {
              return i;
            },
          });
        let i =
          '<xml xmlns="http://www.w3.org/1999/xhtml" collection="false" is_dbot="true">\n  <variables></variables>\n  <block type="trade_definition" x="0" y="0">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" deletable="false" movable="false">\n        <field name="MARKET_LIST"></field>\n        <field name="SUBMARKET_LIST"></field>\n        <field name="SYMBOL_LIST"></field>\n        <next>\n          <block type="trade_definition_tradetype" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST"></field>\n            <field name="TRADETYPE_LIST"></field>\n            <next>\n              <block type="trade_definition_contracttype" deletable="false" movable="false">\n                <field name="TYPE_LIST"></field>\n                <next>\n                  <block type="trade_definition_candleinterval" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="false"></mutation>\n        <field name="DURATIONTYPE_LIST"></field>\n        <field name="CURRENCY_LIST">USD</field>\n        <value name="DURATION">\n          <shadow type="math_number_positive">\n            <field name="NUM">5</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number_positive">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <field name="AMOUNT_LIMITS"></field>\n      </block>\n    </statement>\n  </block>\n  <block type="during_purchase" x="720" y="0">\n    <statement name="DURING_PURCHASE_STACK">\n      <block type="controls_if">\n        <value name="IF0">\n          <block type="check_sell"></block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" x="720" y="248">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="trade_again"></block>\n    </statement>\n  </block>\n  <block type="before_purchase" x="0" y="576">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="purchase">\n        <field name="PURCHASE_LIST"></field>\n      </block>\n    </statement>\n  </block>\n</xml>';
      },
      5765: function (e, t, n) {
        var i = {
          "./reverse_martingale.xml": ["19538", "822"],
          "./accumulators_martingale_on_stat_reset.xml": ["70542", "329"],
          "./accumulators_reverse_martingale.xml": ["16319", "777"],
          "./accumulators_reverse_martingale_on_stat_reset.xml": [
            "29916",
            "881",
          ],
          "./dalembert.xml": ["99483", "451"],
          "./dalembert_max-stake.xml": ["7798", "600"],
          "./martingale_max-stake.xml": ["90579", "723"],
          "./accumulators_dalembert.xml": ["50790", "980"],
          "./1_3_2_6.xml": ["32079", "281"],
          "./accumulators_martingale.xml": ["44763", "917"],
          "./martingale.xml": ["42625", "59"],
          "./accumulators_dalembert_on_stat_reset.xml": ["1307", "110"],
          "./oscars_grind.xml": ["85326", "642"],
          "./reverse_dalembert.xml": ["4042", "809"],
          "./accumulators_reverse_dalembert.xml": ["17017", "730"],
          "./accumulators_reverse_dalembert_on_stat_reset.xml": [
            "50278",
            "535",
          ],
          "./oscars_grind_max-stake.xml": ["97290", "369"],
        };
        function a(e) {
          if (!n.o(i, e))
            return Promise.resolve().then(function () {
              var t = Error("Cannot find module '" + e + "'");
              throw ((t.code = "MODULE_NOT_FOUND"), t);
            });
          var t = i[e],
            a = t[0];
          return n.e(t[1]).then(function () {
            return n(a);
          });
        }
        (a.keys = () => Object.keys(i)), (a.id = "5765"), (e.exports = a);
      },
      13617: function (e, t, n) {
        "use strict";
        n.d(t, {
          oH: function () {
            return i;
          },
          om: function () {
            return s;
          },
          xt: function () {
            return a;
          },
        });
        let i = "ce_bot_form",
          a = "No results found";
        var o,
          s =
            (((o = {}).OPEN = "open"),
            (o.CLOSE = "close"),
            (o.RUN_BOT = "run_bot"),
            (o.RUN_QUICK_STRATEGY = "run_quick_strategy"),
            (o.EDIT_QUICK_STRATEGY = "edit_quick_strategy"),
            (o.SELECT_QUICK_STRATEGY_GUIDE = "select_quick_strategy_guide"),
            (o.SWITCH_QUICK_STRATEGY_TAB = "switch_quick_strategy_tab"),
            (o.DASHBOARD_CLICK = "dashboard_click"),
            (o.UPLOAD_STRATEGY_START = "upload_strategy_start"),
            (o.UPLOAD_STRATEGY_COMPLETED = "upload_strategy_completed"),
            (o.UPLOAD_STRATEGY_FAILED = "upload_strategy_failed"),
            (o.GOOGLE_DRIVE_CONNECT = "google_drive_connect"),
            (o.GOOGLE_DRIVE_DISCONNECT = "google_drive_disconnect"),
            (o.SWITCH_LOAD_STRATEGY_TAB = "switch_load_strategy_tab"),
            (o.ANNOUNCEMENT_CLICK = "announcement_click"),
            (o.ANNOUNCEMENT_ACTION = "announcement_action"),
            o);
      },
      89057: function (e, t, n) {
        "use strict";
        n.d(t, {
          GE: function () {
            return l;
          },
          Oi: function () {
            return d;
          },
          WN: function () {
            return c;
          },
          _W: function () {
            return r;
          },
          df: function () {
            return h;
          },
          m5: function () {
            return s;
          },
          mu: function () {
            return u;
          },
          z9: function () {
            return p;
          },
        });
        var i = n(83571),
          a = n(13617),
          o = n(66062);
        let s = (e) => {
            let {
              subpage_name: t,
              subform_source: n,
              subform_name: o,
              load_strategy_tab: s,
            } = e;
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.OPEN,
              form_name: a.oH,
              subpage_name: t,
              subform_name: o,
              subform_source: n,
              load_strategy_tab: s,
            });
          },
          r = (e) => {
            let {
              subform_name: t,
              quick_strategy_tab: n,
              selected_strategy: s,
              load_strategy_tab: r,
              announcement_name: l,
            } = e;
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.CLOSE,
              form_name: a.oH,
              subform_name: t,
              quick_strategy_tab: n,
              strategy_name: (0, o.gc)(s),
              load_strategy_tab: r,
              announcement_name: l,
            });
          },
          l = (e) => {
            let { subpage_name: t } = e;
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.RUN_BOT,
              form_name: a.oH,
              subpage_name: t,
            });
          },
          d = (e) => {
            let { upload_provider: t, upload_id: n } = e;
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.UPLOAD_STRATEGY_START,
              form_name: a.oH,
              subform_name: "load_strategy",
              subpage_name: "bot_builder",
              upload_provider: t,
              upload_id: n,
            });
          },
          c = (e) => {
            let { upload_provider: t, upload_id: n, upload_type: o } = e;
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.UPLOAD_STRATEGY_COMPLETED,
              form_name: a.oH,
              subform_name: "load_strategy",
              subpage_name: "bot_builder",
              upload_provider: t,
              upload_id: n,
              upload_type: o,
            });
          },
          u = (e) => {
            let {
              upload_provider: t,
              upload_id: n,
              upload_type: o,
              error_message: s,
              error_code: r,
            } = e;
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.UPLOAD_STRATEGY_FAILED,
              form_name: a.oH,
              subform_name: "load_strategy",
              subpage_name: "bot_builder",
              upload_provider: t,
              upload_id: n,
              upload_type: o,
              error_message: s,
              error_code: r,
            });
          },
          h = () => {
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.GOOGLE_DRIVE_CONNECT,
              form_name: a.oH,
              subpage_name: "bot_builder",
            });
          },
          p = () => {
            i.Analytics.trackEvent("ce_bot_form", {
              action: a.om.GOOGLE_DRIVE_DISCONNECT,
              form_name: a.oH,
              subpage_name: "bot_builder",
            });
          };
      },
      66062: function (e, t, n) {
        "use strict";
        n.d(t, {
          dC: function () {
            return h;
          },
          gc: function () {
            return l;
          },
          qc: function () {
            return u;
          },
          yO: function () {
            return c;
          },
        });
        var i,
          a = n(85414),
          o = n(13617);
        let s = () => {
            try {
              var e;
              return JSON.parse(
                (null === (e = localStorage) || void 0 === e
                  ? void 0
                  : e.getItem("qs-analytics")) ?? "{}"
              );
            } catch (e) {
              return (
                console.error("Rudderstack: unable to get dropdown text"), {}
              );
            }
          },
          r = (e) => e && e !== o.xt,
          l = (e) => {
            var t;
            return null === (t = (0, a.j)()[e]) || void 0 === t
              ? void 0
              : t.rs_strategy_name;
          };
        var d =
          (((i = d || {}).recent = "recent"),
          (i.local = "local"),
          (i.google_drive = "google drive"),
          i);
        let c = Object.values(d),
          u = (e) => {
            let { form_values: t } = e;
            if (!t) return;
            let { symbol: n, tradetype: i, type: a, stake: o } = t,
              l = s();
            return {
              asset_type: r(null == l ? void 0 : l.symbol) ? l.symbol : n,
              trade_type: r(null == l ? void 0 : l.tradetype)
                ? null == l
                  ? void 0
                  : l.tradetype
                : i,
              purchase_condition: r(null == l ? void 0 : l.type)
                ? null == l
                  ? void 0
                  : l.type
                : a,
              initial_stake: r(null == l ? void 0 : l.stake)
                ? null == l
                  ? void 0
                  : l.stake
                : o,
            };
          },
          h = (e) => {
            try {
              let t = new DOMParser().parseFromString(
                e.toString(),
                "application/xml"
              );
              if (t.getElementsByTagName("xml").length) {
                let e = t.documentElement.getAttribute("is_dbot");
                return "true" === e ? "new" : "old";
              }
              return "old";
            } catch (e) {
              return "old";
            }
          };
      },
      59462: function (e, t, n) {
        "use strict";
        n.d(t, {
          Bn: function () {
            return d;
          },
          tx: function () {
            return r;
          },
          xG: function () {
            return l;
          },
        });
        var i,
          a = n(6753),
          o = n(26855),
          s = n(48059);
        var r =
          (((i = {}).BOT_IMPORT = "BOT_IMPORT"),
          (i.BOT_DELETE = "BOT_DELETE"),
          i);
        let l = () => ({
            bot_stop: (0, s.NC)(
              "You’ve just stopped the bot. Any open contracts can be viewed on the Reports page."
            ),
            workspace_change: (0, s.NC)(
              "Changes you make will not affect your running bot."
            ),
            block_delete: (0, s.NC)("You’ve just deleted a block."),
            invalid_xml: (0, s.NC)(
              "Your import failed due to an invalid file. Upload a complete file in XML format."
            ),
            BOT_IMPORT: (0, s.NC)("You’ve successfully imported a bot."),
            BOT_DELETE: (0, s.NC)("You’ve successfully deleted a bot."),
            strategy_conversion: (0, s.NC)(
              "Save this strategy as an XML file from Oruchotrader Bot for faster re-imports."
            ),
            google_drive_error: (0, s.NC)(
              "Your session has expired. Please sign in again."
            ),
          }),
          d = {
            type: a.Am.TYPE.DEFAULT,
            position: (0, o.rK)()
              ? a.Am.POSITION.BOTTOM_RIGHT
              : a.Am.POSITION.BOTTOM_LEFT,
            autoClose: 6e3,
            hideProgressBar: !0,
            closeOnClick: !1,
            pauseOnHover: !0,
            pauseOnFocusLoss: !1,
          };
      },
      64736: function (e, t, n) {
        "use strict";
        n.d(t, {
          J: function () {
            return l;
          },
        });
        var i = n(85893),
          a = n(67294),
          o = n(6753),
          s = n(59462);
        let r = (e) => {
            let { message: t, primary_action: n, closeToast: s } = e;
            return (
              a.useEffect(() => {
                let e = () => {
                  "hidden" === document.visibilityState && o.Am.dismiss();
                };
                return (
                  document.addEventListener("visibilitychange", e),
                  () => {
                    document.removeEventListener("visibilitychange", e);
                  }
                );
              }, []),
              (0, i.jsxs)("div", {
                className: "notification-content",
                "data-testid": "dt_bot_notification",
                children: [
                  (0, i.jsx)("div", { children: t }),
                  n &&
                    (0, i.jsx)("button", {
                      onClick: () => n.onClick(s),
                      children: n.label,
                    }),
                ],
              })
            );
          },
          l = (e, t, n) =>
            (0, o.Am)(
              (n) => {
                let { closeToast: a } = n;
                return (0, i.jsx)(r, {
                  message: e,
                  primary_action: t,
                  closeToast: a,
                });
              },
              {
                type: (null == n ? void 0 : n.type) ?? s.Bn.type,
                position: (null == n ? void 0 : n.position) ?? s.Bn.position,
                autoClose: (null == n ? void 0 : n.autoClose) ?? s.Bn.autoClose,
                hideProgressBar:
                  (null == n ? void 0 : n.hideProgressBar) ??
                  s.Bn.hideProgressBar,
                closeOnClick:
                  (null == n ? void 0 : n.closeOnClick) ?? s.Bn.closeOnClick,
                pauseOnHover:
                  (null == n ? void 0 : n.pauseOnHover) ?? s.Bn.pauseOnHover,
                pauseOnFocusLoss:
                  (null == n ? void 0 : n.pauseOnFocusLoss) ??
                  s.Bn.pauseOnFocusLoss,
                closeButton: (null == n ? void 0 : n.closeButton) ?? !0,
              }
            );
      },
      17481: function (e, t, n) {
        "use strict";
        n.d(t, {
          Gz: function () {
            return a;
          },
          Lq: function () {
            return i;
          },
        }),
          n(88199);
        let i = () => ({
            au: "Australian",
            sg: "Singaporean",
            it: "Italian",
            de: "German",
            fr: "French",
            lu: "Luxembourgish",
            gr: "Greek",
            mf: "Saint Martiner",
            es: "Spanish",
            sk: "Slovak",
            lt: "Lithuanian",
            nl: "Dutch",
            at: "Austrian",
            bg: "Bulgarian",
            si: "Slovenian",
            cy: "Cypriot",
            be: "Belgian",
            ro: "Romanian",
            hr: "Croatian",
            pt: "Portuguese",
            pl: "Polish",
            lv: "Latvian",
            ee: "Estonian",
            cz: "Czech",
            fi: "Finnish",
            hu: "Hungarian",
            dk: "Danish",
            se: "Swedish",
            ie: "Irish",
            im: "Manx",
            gb: "British",
            mt: "Malta",
          }),
          a = () => ["za", "ec", "bw"];
      },
      97613: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return o;
          },
        });
        var i = n(85893),
          a = n(33281);
        function o(e) {
          let { message: t } = e;
          return (0, i.jsxs)("div", {
            className: "app-root",
            children: [
              (0, i.jsx)(a.a, {}),
              (0, i.jsx)("div", { className: "load-message", children: t }),
            ],
          });
        }
      },
      29656: function (e, t, n) {
        "use strict";
        n.d(t, {
          Yb: function () {
            return l;
          },
          uw: function () {
            return s;
          },
          x3: function () {
            return a;
          },
        });
        let i = [
            "it",
            "de",
            "fr",
            "lu",
            "gr",
            "mf",
            "es",
            "sk",
            "lt",
            "nl",
            "at",
            "bg",
            "si",
            "cy",
            "be",
            "ro",
            "hr",
            "pt",
            "pl",
            "lv",
            "ee",
            "cz",
            "fi",
            "hu",
            "dk",
            "se",
            "ie",
            "im",
            "gb",
            "mt",
          ],
          a = (e) => i.includes(e),
          o = ["de", "es", "it", "lu", "gr", "au", "fr"],
          s = (e) => o.includes(e),
          r = ["au", "fr"],
          l = (e) => r.includes(e);
      },
      66175: function (e, t, n) {
        "use strict";
        let i;
        n.d(t, {
          hWv: () => _,
          s0r: () => P.s0,
          JIr: () => c.JI,
          CY$: () => P.CY,
          vxy: () => c.vx,
          gNN: () => c.gN,
          lby: () => u.lb,
          mrB: () => h.mr,
          O2o: () => l.O2,
          cX8: () => K,
          oC5: () => u.oC,
          K9$: () => c.K9,
          kIu: () => B.kI,
          FTx: () => c.FT,
          DQA: () => d.DQ,
          j73: () => S,
          fcq: () => h.fc,
          LI1: () => B.LI,
          p6d: () => h.p6,
          LUK: () => h.LU,
          rhL: () => l.rh,
          CeH: () => c.Ce,
          gk9: () => d.gk,
          W9k: () => c.W9,
          O$T: () => u.O$,
          v3q: () => c.v3,
          i4S: () => u.i4,
          e_e: () => l.e_,
          QRc: () => h.QR,
          efd: () => c.ef,
          drH: () => u.dr,
          dR9: () => c.dR,
          tmR: () => M,
          hwq: () => j,
          Kq_: () => c.Kq,
          Lp7: () => c.Lp,
          $Xq: () => s,
          bfN: () => u.bf,
          wmM: () => l.wm,
          tqC: () => G.tq,
          L8o: () => c.L8,
          FJ7: () => c.FJ,
          yvY: () => l.yv,
          G6W: () => r,
          xGd: () => c.xG,
          MOe: () => c.MO,
          Dlf: () => c.Dl,
          dq6: () => c.dq,
          vMw: () => c.vM,
          MT8: () => O.MT,
          _mr: () => c._m,
          XtD: () => c.Xt,
          oS6: () => u.oS,
          xb4: () => B.xb,
          nIE: () => G.nI,
          Qr$: () => B.Qr,
          UTW: () => c.UT,
          uvr: () => B.uv,
          iBr: () => c.iB,
          Yeo: () => c.Ye,
          _Xx: () => F,
          eiS: () => B.ei,
          vPG: () => B.vP,
          xVn: () => m,
          xOw: () => V.x,
          gbT: () => h.gb,
        }),
          n("83571");
        var a = JSON.parse(
          '{"Zk":{"trader":{"name":"Deriv Trader","icon":"IcRebrandingDerivTrader"},"dbot":{"name":"Oruchotrader","icon":"IcRebrandingDerivBot"},"mt5":{"name":"Deriv MT5","icon":"IcRebrandingDmt5"},"ctrader":{"name":"Deriv cTrader","icon":"IcRebrandingCtrader"},"dxtrade":{"name":"Deriv X","icon":"IcRebrandingDxtrade"},"smarttrader":{"name":"SmartTrader","icon":"IcRebrandingSmarttrader"},"bbot":{"name":"Binary Bot","icon":"IcRebrandingBinaryBot"},"go":{"name":"Deriv GO","icon":"IcRebrandingDerivGo"}}}'
        );
        let o = (e) =>
            /^(((.*)\.)?(localhost:8444|pages.dev|binary\.(sx|com)|deriv.(com|me|be|dev)))$/.test(
              e
            ),
          s = (e) => {
            let t = a.Zk[e];
            return !o(window.location.host) && (t.icon = ""), t;
          },
          r = () =>
            /constructor/i.test(window.HTMLElement) ||
            "[object SafariRemoteNotification]" ===
              (
                !window.safari ||
                (void 0 !== window.safari && window.safari.pushNotification)
              ).toString();
        var l = n("18470"),
          d = n("63069"),
          c = n("91761"),
          u = n("52717"),
          h = n("72755"),
          p = n("29656");
        let m = function (e, t, n, i) {
            let a =
                !(arguments.length > 4) ||
                void 0 === arguments[4] ||
                arguments[4],
              { title: o, text: s, link: r } = t;
            e({
              message: s,
              header: o,
              redirect_label: r,
              redirectOnClick: n,
              should_show_refresh: !1,
              redirect_to: "/appstore/traders-hub",
              should_clear_error_on_click: a,
              should_redirect: i,
            });
          },
          _ = (e) =>
            (null == e ? void 0 : e.length) === 1 &&
            e.every(
              (e) =>
                (0, p.x3)(e.residence ?? "") &&
                "virtual" === e.landing_company_shortcode
            );
        n("23554"),
          Object.freeze({
            amlglobalcheck: "amlglobalcheck",
            bankstatement: "bankstatement",
            docverification: "docverification",
            driverslicense: "driverslicense",
            driving_licence: "driving_licence",
            national_identity_card: "national_identity_card",
            other: "other",
            passport: "passport",
            power_of_attorney: "power_of_attorney",
            proof_of_ownership: "proof_of_ownership",
            proofaddress: "proofaddress",
            proofid: "proofid",
            utility_bill: "utility_bill",
          }),
          Object.freeze({ back: "back", front: "front", photo: "photo" });
        var f = n("68949"),
          b = n("48059"),
          y = n("33304"),
          v = n("92198"),
          g = n("45543"),
          k = n("24797");
        let w = function (e) {
            return JSON.parse(this.getItem(e) || "{}");
          },
          T = function (e, t) {
            if (t && t instanceof Object)
              try {
                this.setItem(e, JSON.stringify(t));
              } catch (e) {}
          };
        "undefined" != typeof Storage &&
          ((Storage.prototype.getObject = w),
          (Storage.prototype.setObject = T));
        let C = (e) => {
            if (void 0 === e) return !1;
            let t = "test";
            try {
              return e.setItem(t, "1"), e.removeItem(t), !0;
            } catch (e) {
              return !1;
            }
          },
          E = function (e) {
            (this.storage = e),
              (this.storage.getObject = w),
              (this.storage.setObject = T);
          };
        E.prototype = {
          get(e) {
            return this.storage.getItem(e) || void 0;
          },
          set(e, t) {
            void 0 !== t && this.storage.setItem(e, t);
          },
          getObject(e) {
            return "function" == typeof this.storage.getObject
              ? this.storage.getObject(e)
              : JSON.parse(this.storage.getItem(e) || "{}");
          },
          setObject(e, t) {
            "function" == typeof this.storage.setObject
              ? this.storage.setObject(e, t)
              : this.storage.setItem(e, JSON.stringify(t));
          },
          remove(e) {
            this.storage.removeItem(e);
          },
          clear() {
            this.storage.clear();
          },
        };
        let N = function (e) {
          this.store = void 0 !== e ? e : {};
        };
        N.prototype = {
          get(e) {
            return (0, g.SX)(this.store, e);
          },
          set(e, t) {
            let n =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : this.store,
              i = e;
            !Array.isArray(i) && (i = [i]),
              i.length > 1
                ? ((!(i[0] in n) || (0, g.Qr)(n[i[0]])) && (n[i[0]] = {}),
                  this.set(i.slice(1), t, n[i[0]]))
                : (n[i[0]] = t);
          },
          getObject(e) {
            return JSON.parse(this.get(e) || "{}");
          },
          setObject(e, t) {
            this.set(e, JSON.stringify(t));
          },
          remove() {
            for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
              t[n] = arguments[n];
            t.forEach((e) => {
              delete this.store[e];
            });
          },
          clear() {
            this.store = {};
          },
          has(e) {
            return void 0 !== this.get(e);
          },
          keys() {
            return Object.keys(this.store);
          },
          call(e) {
            "function" == typeof this.get(e) && this.get(e)();
          },
        };
        let x = new N();
        (x.prototype = N.prototype),
          (x.prototype.getResponse = function (e) {
            let t = e;
            if ("string" == typeof t) {
              let e = t.split(".");
              t = ["response", e[0]].concat(e);
            }
            return this.get(t);
          }),
          (x.prototype.getByMsgType = x.getResponse),
          x.set("response", {});
        let A = function (e, t) {
          let n = window.location.hostname;
          (this.initialized = !1),
            (this.cookie_name = e),
            (this.domain =
              t ||
              (n.includes("binary.sx") ? "binary.sx" : k.L.DERIV_HOST_NAME)),
            (this.path = "/"),
            (this.expires = new Date("Thu, 1 Jan 2037 12:00:00 GMT")),
            (this.value = {});
        };
        A.prototype = {
          read() {
            let e = v.Z.get(this.cookie_name);
            try {
              this.value = e ? JSON.parse(e) : {};
            } catch (e) {
              this.value = {};
            }
            this.initialized = !0;
          },
          write(e, t, n) {
            !this.initialized && this.read(),
              (this.value = e),
              t && (this.expires = t),
              v.Z.set(this.cookie_name, this.value, {
                expires: this.expires,
                path: this.path,
                domain: this.domain,
                secure: !!n,
              });
          },
          get(e) {
            return !this.initialized && this.read(), this.value[e];
          },
          set(e, t) {
            !this.initialized && this.read(),
              (this.value[e] = t),
              v.Z.set(this.cookie_name, this.value, {
                expires: new Date(this.expires),
                path: this.path,
                domain: this.domain,
              });
          },
          remove() {
            v.Z.remove(this.cookie_name, {
              path: this.path,
              domain: this.domain,
            });
          },
        };
        let S = C(window.localStorage) ? new E(window.localStorage) : new N();
        C(window.sessionStorage) ? new E(window.sessionStorage) : new N();
        var O = n("339");
        let         useEffect(() => {
          if (!n && _) {
            // subscribe to balance updates
            let t = api_base.api.onMessage().subscribe(C);
            m.current = { unsubscribe: t.unsubscribe };
          }
          return () => { ... };
        }, [o, C, n, i, _]);I = function (e, t) {
            let n =
                !(arguments.length > 2) ||
                void 0 === arguments[2] ||
                arguments[2],
              i =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : 0;
            if (!e && C(sessionStorage)) {
              let e = window.location,
                a = n
                  ? window.location.href
                  : `${e.protocol}//${e.host}${e.pathname}`;
              sessionStorage.setItem("redirect_url", a),
                setTimeout(() => {
                  let e = D({ language: t });
                  window.location.href = e;
                }, i);
            }
          },
          D = (e) => {
            let { language: t } = e,
              n = S.get("config.server_url"),
              i = new A("signup_device").get("signup_device"),
              a = new A("date_first_contact").get("date_first_contact"),
              o = `${i ? `&signup_device=${i}` : ""}${
                a ? `&date_first_contact=${a}` : ""
              }`,
              s = () =>
                `https://oauth.${
                  k.L.DERIV_HOST_NAME
                }/oauth2/authorize?app_id=${(0,
                l.rh)()}&l=${t}${o}&brand=${y.F0.toLowerCase()}`;
            return n && /qa/.test(n)
              ? `https://${n}/oauth2/authorize?app_id=${(0,
                l.rh)()}&l=${t}${o}&brand=${y.F0.toLowerCase()}`
              : (0, l.rh)() === l.VC[window.location.hostname]
              ? s()
              : (0, O.y_)(s());
          };
        (0, f.ls)(function* (e, t) {
          let n = yield i.wait("website_status"),
            a = yield i.residenceList(),
            o = n.website_status.clients_country,
            s = (a.residence_list.find((e) => e.value === o) || {}).text,
            r = s
              ? (0, b.NC)(
                  "Sorry, this app is unavailable in {{clients_country}}.",
                  { clients_country: s }
                )
              : (0, b.NC)(
                  "Sorry, this app is unavailable in your current location."
                );
          e({
            message: (0, b.NC)("If you have an account, log in to continue."),
            header: r,
            redirect_label: (0, b.NC)("Log in"),
            redirectOnClick: () => I(t, (0, b.Jb)()),
            should_show_refresh: !1,
          });
        });
        let R = (e) => (null == e ? void 0 : e.exchange_is_open) === 1,
          L = async (e) => {
            var t;
            return !["InvalidSymbol", "InputValidationFailed"].includes(
              null === (t = (await WS.storage.contractsFor(e)).error) ||
                void 0 === t
                ? void 0
                : t.code
            );
          };
        n("85893"), b.Xx, b.Xx, n("30381");
        var P = n("29398");
        n("6967");
        var B = n("11016");
        n("87537");
        var U = n("67294");
        let M = () => {
            let e = U.useRef(!1);
            return (
              U.useEffect(
                () => (
                  (e.current = !0),
                  () => {
                    e.current = !1;
                  }
                ),
                []
              ),
              () => e.current
            );
          },
          j = (e) => {
            let [t, n] = U.useState(!e);
            return (
              U.useEffect(() => {
                e && n(!0);
              }, [e]),
              { in_prop: t }
            );
          };
        n("68356"), n("42238");
        let F = () => {
          let e = navigator.userAgent || navigator.vendor || window.opera || "";
          if (/windows phone/i.test(e)) return "Windows Phone";
          if (/android/i.test(e))
            return /\bK\b|ALP-|AMN-|ANA-|ANE-|ANG-|AQM-|ARS-|ART-|ATU-|BAC-|BLA-|BRQ-|CAG-|CAM-|CAN-|CAZ-|CDL-|CDY-|CLT-|CRO-|CUN-|DIG-|DRA-|DUA-|DUB-|DVC-|ELE-|ELS-|EML-|EVA-|EVR-|FIG-|FLA-|FRL-|GLK-|HMA-|HW-|HWI-|INE-|JAT-|JEF-|JER-|JKM-|JNY-|JSC-|LDN-|LIO-|LON-|LUA-|LYA-|LYO-|MAR-|MED-|MHA-|MLA-|MRD-|MYA-|NCE-|NEO-|NOH-|NOP-|OCE-|PAR-|PIC-|POT-|PPA-|PRA-|RNE-|SEA-|SLA-|SNE-|SPN-|STK-|TAH-|TAS-|TET-|TRT-|VCE-|VIE-|VKY-|VNS-|VOG-|VTR-|WAS-|WKG-|WLZ-|JAD-|WKG-|MLD-|RTE-|NAM-|NEN-|BAL-|JAD-|JLN-|YAL/i.test(
              e
            ) || /huawei/i.test(e)
              ? "huawei"
              : "Android";
          return /iPad|iPhone|iPod/.test(e) && !window.MSStream
            ? "iOS"
            : "unknown";
        };
        var V = n("42231"),
          G = n("77149");
        n("419");
        var Y = n("27412"),
          X = n("40968");
        let W = class e {
            add(e, t) {
              !this.has(e) && (this.errors[e] = []),
                -1 === this.errors[e].indexOf(t) && this.errors[e].push(t);
            }
            all() {
              return this.errors;
            }
            first(e) {
              return this.has(e) ? this.errors[e][0] : null;
            }
            get(e) {
              return this.has(e) ? this.errors[e] : [];
            }
            has(e) {
              return Object.prototype.hasOwnProperty.call(this.errors, e);
            }
            constructor() {
              (0, Y._)(this, "errors", void 0), (this.errors = {});
            }
          },
          H = (e, t) => {
            let n = t;
            return (
              t && !Array.isArray(t) && (n = [t]),
              e.replace(/\[_(\d+)]/g, (e, t) => n[+t - 1])
            );
          };
        class $ {
          addFailure(e, t, n) {
            var i, a;
            let o = n || t.options.message || (0, X.Cc)()[t.name].message();
            "length" === t.name
              ? (o = H(o, [
                  t.options.min === t.options.max
                    ? (null === (i = t.options.min) || void 0 === i
                        ? void 0
                        : i.toString()) ?? ""
                    : `${t.options.min}-${t.options.max}`,
                ]))
              : "min" === t.name
              ? (o = H(o, [
                  (null === (a = t.options.min) || void 0 === a
                    ? void 0
                    : a.toString()) ?? "",
                ]))
              : "not_equal" === t.name &&
                (o = H(o, [t.options.name1 ?? "", t.options.name2 ?? ""])),
              this.errors.add(e, o),
              this.error_count++;
          }
          check() {
            return (
              Object.keys(this.input).forEach((e) => {
                if (!!Object.prototype.hasOwnProperty.call(this.rules, e))
                  this.rules[e].forEach((t) => {
                    let n = $.getRuleObject(t);
                    if (
                      (!n.validator && "function" != typeof n.validator) ||
                      (n.options.condition &&
                        !n.options.condition(this.store)) ||
                      ("" === this.input[e] && "req" !== n.name)
                    )
                      return;
                    let i = n.validator(
                      this.input[e],
                      n.options,
                      this.store,
                      this.input
                    );
                    if ("boolean" != typeof i || i) {
                      if ("object" == typeof i) {
                        let { is_ok: t, message: a } = i;
                        !t && this.addFailure(e, n, a);
                      }
                    } else this.addFailure(e, n);
                  });
              }),
              !this.error_count
            );
          }
          isPassed() {
            return this.check();
          }
          static getRuleObject(e) {
            let t = "string" == typeof e,
              n = t ? e : e[0],
              i = t ? {} : e[1] || {};
            return {
              name: n,
              options: i,
              validator: "custom" === n ? i.func : (0, X.Cc)()[n].func,
            };
          }
          constructor(e, t, n) {
            (0, Y._)(this, "input", void 0),
              (0, Y._)(this, "rules", void 0),
              (0, Y._)(this, "store", void 0),
              (0, Y._)(this, "errors", void 0),
              (0, Y._)(this, "error_count", void 0),
              (this.input = e),
              (this.rules = t),
              (this.store = n),
              (this.errors = new W()),
              (this.error_count = 0);
          }
        }
        let K = $;
      },
      18470: function (e, t, n) {
        "use strict";
        n.d(t, {
          zY: () => l,
          e_: () => p,
          wm: () => _,
          yv: () => d,
          VC: () => r,
          O2: () => f,
          rh: () => m,
        });
        var i = n("12838");
        let a = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : window.location.hostname,
              t = {
                is_staging_deriv_app: /^staging-app\.deriv\.(com|me|be)$/i.test(
                  e
                ),
                is_deriv_app: /^app\.deriv\.(com|me|be)$/i.test(e),
                is_test_link: /^(.*)\.binary\.sx$/i.test(e),
                is_test_deriv_app: /^test-app\.deriv\.com$/i.test(e),
              };
            return {
              ...t,
              is_staging: t.is_staging_deriv_app,
              is_test_link: t.is_test_link,
            };
          },
          o = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : window.location.hostname,
              { is_staging_deriv_app: t } = a(e);
            return t;
          },
          s = {
            LOCALHOST: 36300,
            TMP_STAGING: 64584,
            STAGING: 29934,
            STAGING_BE: 29934,
            STAGING_ME: 29934,
            PRODUCTION: 65555,
            PRODUCTION_BE: 65556,
            PRODUCTION_ME: 65557,
          },
          r = {
            "master.bot-standalone.pages.dev": s.TMP_STAGING,
            "staging-dbot.deriv.com": s.STAGING,
            "staging-dbot.deriv.be": s.STAGING_BE,
            "staging-dbot.deriv.me": s.STAGING_ME,
            "dbot.deriv.com": s.PRODUCTION,
            "dbot.deriv.be": s.PRODUCTION_BE,
            "dbot.deriv.me": s.PRODUCTION_ME,
          },
          l = () =>
            !/^staging\./.test(window.location.hostname) &&
            Object.keys(r).find((e) => window.location.hostname === e),
          d = () => {
            let e = Object.keys(r).map(
              (e) => `(www\\.)?${e.replace(".", "\\.")}`
            );
            return RegExp(`^(${e.join("|")})$`, "i").test(
              window.location.hostname
            );
          },
          c = () => {
            var e, t;
            return (
              (null === (e = window.location.origin) || void 0 === e
                ? void 0
                : e.includes(".binary.sx")) ||
              (null === (t = window.location.origin) || void 0 === t
                ? void 0
                : t.includes("bot-65f.pages.dev")) ||
              u()
            );
          },
          u = () => /localhost(:\d+)?$/i.test(window.location.hostname),
          h = () => "ws.derivws.com",
          p = () => {
            let e = h();
            return c()
              ? { app_id: s.LOCALHOST, server_url: e }
              : { app_id: r[l() ?? ""] ?? s.PRODUCTION, server_url: e };
          },
          m = () => {
            let e = null;
            window.localStorage.setItem("config.app_id", "72389");
            let t = window.localStorage.getItem("config.app_id"),
              n = l() ?? "";
            return (e = t
              ? t
              : o()
              ? s.STAGING
              : c()
              ? s.LOCALHOST
              : r[n] ?? s.PRODUCTION);
          },
          _ = () => {
            let e = window.localStorage.getItem("config.server_url");
            return e ? e : h();
          },
          f = () => {
            let { getOauthURL: e } = i.fr,
              t = e(),
              n = new URL(t),
              a =
                i.fV.getValue(i.sE.configServerURL) ||
                localStorage.getItem("config.server_url") ||
                n.hostname,
              o = ["green.derivws.com", "red.derivws.com", "blue.derivws.com"];
            return (
              ("string" == typeof a
                ? !o.includes(a)
                : !o.includes(JSON.stringify(a))) && (n.hostname = a),
              n.toString() || t
            );
          };
      },
      6967: function (e, t, n) {
        "use strict";
        n.d(t, {
          gk: function () {
            return a;
          },
        }),
          n(67294);
        var i = n(48059);
        n(91761);
        let a = () => ({
          APPLY: (0, i.NC)("Apply"),
          BARRIER: (0, i.NC)("Barrier:"),
          BUY_PRICE: (0, i.NC)("Buy price:"),
          CANCEL: (0, i.NC)("Cancel"),
          CLOSE: (0, i.NC)("Close"),
          CLOSED: (0, i.NC)("Closed"),
          CONTRACT_COST: (0, i.NC)("Contract cost:"),
          CONTRACT_VALUE: (0, i.NC)("Contract value:"),
          CURRENT_STAKE: (0, i.NC)("Current stake:"),
          DAY: (0, i.NC)("day"),
          DAYS: (0, i.NC)("days"),
          DEAL_CANCEL_FEE: (0, i.NC)("Deal cancel. fee:"),
          DECREMENT_VALUE: (0, i.NC)("Decrement value"),
          DONT_SHOW_THIS_AGAIN: (0, i.NC)("Don't show this again"),
          ENTRY_SPOT: (0, i.NC)("Entry spot:"),
          INCREMENT_VALUE: (0, i.NC)("Increment value"),
          INDICATIVE_PRICE: (0, i.NC)("Indicative price:"),
          INITIAL_STAKE: (0, i.NC)("Initial stake:"),
          LOST: (0, i.NC)("Lost"),
          MULTIPLIER: (0, i.NC)("Multiplier:"),
          NOT_AVAILABLE: (0, i.NC)("N/A"),
          PAYOUT: (0, i.NC)("Sell price:"),
          POTENTIAL_PAYOUT: (0, i.NC)("Potential payout:"),
          POTENTIAL_PROFIT_LOSS: (0, i.NC)("Potential profit/loss:"),
          PROFIT_LOSS: (0, i.NC)("Profit/Loss:"),
          PURCHASE_PRICE: (0, i.NC)("Buy price:"),
          RESALE_NOT_OFFERED: (0, i.NC)("Resale not offered"),
          SELL: (0, i.NC)("Sell"),
          STAKE: (0, i.NC)("Stake:"),
          STOP_LOSS: (0, i.NC)("Stop loss:"),
          STRIKE: (0, i.NC)("Strike:"),
          TAKE_PROFIT: (0, i.NC)("Take profit:"),
          TICK: (0, i.NC)("Tick "),
          TICKS: (0, i.NC)("Ticks"),
          TOTAL_PROFIT_LOSS: (0, i.NC)("Total profit/loss:"),
          TAKE_PROFIT_LOSS_NOT_AVAILABLE: (0, i.NC)(
            "Take profit and/or stop loss are not available while deal cancellation is active."
          ),
          WON: (0, i.NC)("Won"),
        });
      },
      63069: function (e, t, n) {
        "use strict";
        n.d(t, { Re: () => s, DQ: () => i, gk: () => a.gk, sJ: () => r });
        let i = Object.freeze({
          LOW_RISK_CR_EU: "low_risk_cr_eu",
          LOW_RISK_CR_NON_EU: "low_risk_cr_non_eu",
          HIGH_RISK_CR: "high_risk_cr",
          CR_DEMO: "cr_demo",
          EU_DEMO: "eu_demo",
          EU_REAL: "eu_real",
        });
        var a = n("6967"),
          o = n("48059");
        let s = () => (0, o.NC)("No results found"),
          r = () => ({
            header: (0, o.NC)("Sorry for the interruption"),
            description: (0, o.NC)(
              "Our servers hit a bump. Let’s refresh to move on."
            ),
            cta_label: (0, o.NC)("Refresh"),
          });
        Object.freeze({
          NONE: "none",
          PENDING: "pending",
          REJECTED: "rejected",
          VERIFIED: "verified",
          EXPIRED: "expired",
          SUSPECTED: "suspected",
        }),
          Object.freeze({
            SVG: "svg",
            BVI: "bvi",
            VANUATU: "vanuatu",
            LABUAN: "labuan",
            MALTA_INVEST: "maltainvest",
          }),
          Object.freeze({ DXTRADE: "dxtrade", MT5: "mt5" }),
          Object.freeze({
            FAILED: "failed",
            MIGRATED_WITH_POSITION: "migrated_with_position",
            MIGRATED_WITHOUT_POSITION: "migrated_without_position",
            NEEDS_VERIFICATION: "needs_verification",
            PENDING: "pending",
            POA_PENDING: "poa_pending",
            POA_VERIFIED: "poa_verified",
          });
        var l = n("85893");
        n("67294"),
          Object.freeze({
            DobMismatch: {
              code: "DobMismatch",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The <0>date of birth</0> on your identity document doesn't match your profile.",
                components: [(0, l.jsx)("strong", {}, 0)],
              }),
            },
            DocumentRejected: {
              code: "DocumentRejected",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We were unable to verify the identity document with the details provided.",
              }),
            },
            EmptyStatus: {
              code: "EmptyStatus",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The verification status was empty, rejected for lack of information.",
              }),
            },
            Expired: {
              code: "Expired",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your identity document has expired.",
              }),
            },
            InformationLack: {
              code: "InformationLack",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The verification is passed but the personal info is not available to compare.",
              }),
            },
            MalformedJson: {
              code: "MalformedJson",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The verification status is not available, provider says: Malformed JSON.",
              }),
            },
            NameMismatch: {
              code: "NameMismatch",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The <0>name</0> on your identity document doesn't match your profile.",
                components: [(0, l.jsx)("strong", {}, 0)],
              }),
            },
            RejectedByProvider: {
              code: "RejectedByProvider",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "The document was rejected by the Provider.",
              }),
            },
            Underage: {
              code: "Underage",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "You’re under legal age.",
              }),
            },
            Deceased: {
              code: "Deceased",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "The document’s owner is deceased.",
              }),
            },
            Failed: {
              code: "Failed",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We were unable to verify the identity document with the details provided.",
              }),
            },
            NameDobMismatch: {
              code: "NameDobMismatch",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The <0>name</0> and <0>date of birth</0> on your identity document don't match your profile.",
                components: [(0, l.jsx)("strong", {}, 0)],
              }),
            },
            NeedsTechnicalInvestigation: {
              code: "NeedsTechnicalInvestigation",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The verification status is not available, provider says: Needs Technical Investigation.",
              }),
            },
            HighRisk: {
              code: "HighRisk",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "For enhanced security, we need to reverify your identity. Kindly resubmit your proof of identity to unlock your account.",
              }),
            },
            ReportNotAvailable: {
              code: "ReportNotAvailable",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We were unable to verify the identity document with the details provided.",
              }),
            },
          }),
          Object.freeze({
            AgeValidationMinimumAcceptedAge: {
              code: "AgeValidationMinimumAcceptedAge",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your age in the document you provided appears to be below 18 years. We’re only allowed to offer our services to clients above 18 years old, so we’ll need to close your account. If you have a balance in your account, contact us via live chat and we’ll help to withdraw your funds before your account is closed.",
              }),
            },
            CompromisedDocument: {
              code: "CompromisedDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document failed our verification checks.",
              }),
            },
            DataComparisonDateOfBirth: {
              code: "DataComparisonDateOfBirth",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The date of birth on your document doesn’t match your profile.",
              }),
            },
            DataComparisonDateOfExpiry: {
              code: "DataComparisonDateOfExpiry",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document has expired.",
              }),
            },
            DataComparisonDocumentNumbers: {
              code: "DataComparisonDocumentNumbers",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            DataComparisonDocumentType: {
              code: "DataComparisonDocumentType",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            DataComparisonIssuingCountry: {
              code: "DataComparisonIssuingCountry",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            DataComparisonName: {
              code: "DataComparisonName",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The name on your document doesn’t match your profile.",
              }),
            },
            DataValidationDateOfBirth: {
              code: "DataValidationDateOfBirth",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details on your document appear to be invalid, missing, or unclear.",
              }),
            },
            DataValidationDocumentExpiration: {
              code: "DataValidationDocumentExpiration",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document has expired.",
              }),
            },
            DataValidationDocumentNumbers: {
              code: "DataValidationDocumentNumbers",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details in your document appear to be invalid, missing, or unclear.",
              }),
            },
            DataValidationExpiryDate: {
              code: "DataValidationExpiryDate",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details on your document appear to be invalid, missing, or unclear.",
              }),
            },
            DataValidationMrz: {
              code: "DataValidationMrz",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details on your document appear to be invalid, missing, or unclear.",
              }),
            },
            DataValidationNoDocumentNumbers: {
              code: "DataValidationNoDocumentNumbers",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The serial number of your document couldn’t be verified.",
              }),
            },
            DuplicatedDocument: {
              code: "DuplicatedDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your verification documents were already used for another account.",
              }),
            },
            Expired: {
              code: "Expired",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document has expired.",
              }),
            },
            ImageIntegrityColourPicture: {
              code: "ImageIntegrityColourPicture",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be in black and white. Please upload a colour photo of your document.",
              }),
            },
            ImageIntegrityConclusiveDocumentQuality: {
              code: "ImageIntegrityConclusiveDocumentQuality",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityAbnormalDocumentFeatures: {
              code: "ImageIntegrityConclusiveDocumentQualityAbnormalDocumentFeatures",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details on your document appear to be invalid, missing, or unclear.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityCornerRemoved: {
              code: "ImageIntegrityConclusiveDocumentQualityCornerRemoved",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be damaged or cropped.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityDigitalDocument: {
              code: "ImageIntegrityConclusiveDocumentQualityDigitalDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be a digital document.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityMissingBack: {
              code: "ImageIntegrityConclusiveDocumentQualityMissingBack",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The back of your document appears to be missing. Please include both sides of your identity document.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityObscuredDataPoints: {
              code: "ImageIntegrityConclusiveDocumentQualityObscuredDataPoints",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details on your document appear to be invalid, missing, or unclear.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityObscuredSecurityFeatures: {
              code: "ImageIntegrityConclusiveDocumentQualityObscuredSecurityFeatures",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Some details on your document appear to be invalid, missing, or unclear.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityPuncturedDocument: {
              code: "ImageIntegrityConclusiveDocumentQualityPuncturedDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be damaged or cropped.",
              }),
            },
            ImageIntegrityConclusiveDocumentQualityWatermarksDigitalTextOverlay:
              {
                code: "ImageIntegrityConclusiveDocumentQualityWatermarksDigitalTextOverlay",
                message: (0, l.jsx)(o.Xx, {
                  i18n_default_text:
                    "Your document contains markings or text that should not be on your document.",
                }),
              },
            ImageIntegrityImageQuality: {
              code: "ImageIntegrityImageQuality",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The image quality of your document is too low. Please provide a hi-res photo of your identity document.",
              }),
            },
            ImageIntegrityImageQualityBlurredPhoto: {
              code: "ImageIntegrityImageQualityBlurredPhoto",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We were unable to verify your selfie because it’s not clear. Please take a clearer photo and try again. Ensure that there's enough light where you are and that your entire face is in the frame.",
              }),
            },
            ImageIntegrityImageQualityCoveredPhoto: {
              code: "ImageIntegrityImageQualityCoveredPhoto",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We’re unable to verify the document you provided because some details appear to be missing. Please try again or provide another document.",
              }),
            },
            ImageIntegrityImageQualityCutOffDocument: {
              code: "ImageIntegrityImageQualityCutOffDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We’re unable to verify the document you provided because it appears to be damaged. Please try again or upload another document.",
              }),
            },
            ImageIntegrityImageQualityDamagedDocument: {
              code: "ImageIntegrityImageQualityDamagedDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We’re unable to verify the document you provided because it appears to be damaged. Please try again or upload another document.",
              }),
            },
            ImageIntegrityImageQualityDarkPhoto: {
              code: "ImageIntegrityImageQualityDarkPhoto",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We were unable to verify your selfie because it’s not clear. Please take a clearer photo and try again. Ensure that there’s enough light where you are and that your entire face is in the frame.",
              }),
            },
            ImageIntegrityImageQualityGlareOnPhoto: {
              code: "ImageIntegrityImageQualityGlareOnPhoto",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We were unable to verify your selfie because it’s not clear. Please take a clearer photo and try again. Ensure that there’s enough light where you are and that your entire face is in the frame.",
              }),
            },
            ImageIntegrityImageQualityIncorrectSide: {
              code: "ImageIntegrityImageQualityIncorrectSide",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The front of your document appears to be missing. Please provide both sides of your identity document.",
              }),
            },
            ImageIntegrityImageQualityNoDocumentInImage: {
              code: "ImageIntegrityImageQualityNoDocumentInImage",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We’re unable to verify the document you provided because it appears to be a blank image. Please try again or upload another document.",
              }),
            },
            ImageIntegrityImageQualityOtherPhotoIssue: {
              code: "ImageIntegrityImageQualityOtherPhotoIssue",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We’re unable to verify the document you provided because some details appear to be missing. Please try again or provide another document.",
              }),
            },
            ImageIntegrityImageQualityTwoDocumentsUploaded: {
              code: "ImageIntegrityImageQualityTwoDocumentsUploaded",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The document you provided appears to be two different types. Please try again or provide another document.",
              }),
            },
            ImageIntegritySupportedDocument: {
              code: "ImageIntegritySupportedDocument",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "The document you provided is not supported for your country. Please provide a supported document for your country.",
              }),
            },
            SelfieRejected: {
              code: "SelfieRejected",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your selfie does not match your document.",
              }),
            },
            VisualAuthenticityDigitalTampering: {
              code: "VisualAuthenticityDigitalTampering",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            VisualAuthenticityFaceDetection: {
              code: "VisualAuthenticityFaceDetection",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            VisualAuthenticityFonts: {
              code: "VisualAuthenticityFonts",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            VisualAuthenticityOriginalDocumentPresent: {
              code: "VisualAuthenticityOriginalDocumentPresent",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be a scanned copy that contains markings or text that shouldn’t be on your document.",
              }),
            },
            VisualAuthenticityOriginalDocumentPresentDocumentOnPrintedPaper: {
              code: "VisualAuthenticityOriginalDocumentPresentDocumentOnPrintedPaper",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be a printed copy.",
              }),
            },
            VisualAuthenticityOriginalDocumentPresentPhotoOfScreen: {
              code: "VisualAuthenticityOriginalDocumentPresentPhotoOfScreen",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "Your document appears to be a photo of a device screen.",
              }),
            },
            VisualAuthenticityOriginalDocumentPresentScan: {
              code: "VisualAuthenticityOriginalDocumentPresentScan",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text:
                  "We’re unable to verify the document you provided because it contains markings or text that should not be on your document. Please provide a clear photo or a scan of your original identity document.",
              }),
            },
            VisualAuthenticityOriginalDocumentPresentScreenshot: {
              code: "VisualAuthenticityOriginalDocumentPresentScreenshot",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be a screenshot.",
              }),
            },
            VisualAuthenticityPictureFaceIntegrity: {
              code: "VisualAuthenticityPictureFaceIntegrity",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            VisualAuthenticitySecurityFeatures: {
              code: "VisualAuthenticitySecurityFeatures",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
            VisualAuthenticityTemplate: {
              code: "VisualAuthenticityTemplate",
              message: (0, l.jsx)(o.Xx, {
                i18n_default_text: "Your document appears to be invalid.",
              }),
            },
          }),
          Object.freeze({
            EMPLOYED: "Employed",
            UNEMPLOYED: "Unemployed",
            SELF_EMPLOYED: "Self-Employed",
          });
      },
      91761: function (e, t, n) {
        "use strict";
        n.d(t, {
          gN: () => I,
          Lp: () => U,
          dq: () => D,
          UT: () => _,
          JI: () => j,
          vx: () => x,
          L8: () => w,
          FJ: () => f,
          xG: () => E,
          MO: () => T,
          Dl: () => y,
          iB: () => v,
          Ye: () => C,
          vM: () => O,
          _m: () => g,
          Xt: () => k,
          W9: () => P,
          v3: () => A,
          ef: () => L,
          dR: () => R,
          FT: () => c,
          K9: () => M,
          Ce: () => m,
          Kq: () => p,
        });
        var i = n("85893");
        n("67294");
        var a = n("30381"),
          o = n.n(a),
          s = n("48059"),
          r = n("11016"),
          l = n("29398"),
          d = n("46677");
        let c = {
          ACCUMULATOR: "ACCU",
          ASIAN: { UP: "ASIANU", DOWN: "ASIAND" },
          CALL: "CALL",
          CALLE: "CALLE",
          CALL_BARRIER: "CALL_BARRIER",
          CALL_PUT_SPREAD: { CALL: "CALLSPREAD", PUT: "PUTSPREAD" },
          END: { IN: "EXPIRYRANGE", OUT: "EXPIRYMISS" },
          EVEN_ODD: { ODD: "DIGITODD", EVEN: "DIGITEVEN" },
          EXPIRYRANGEE: "EXPIRYRANGEE",
          FALL: "FALL",
          HIGHER: "HIGHER",
          LB_HIGH_LOW: "LBHIGHLOW",
          LB_CALL: "LBFLOATCALL",
          LB_PUT: "LBFLOATPUT",
          LOWER: "LOWER",
          MATCH_DIFF: { MATCH: "DIGITMATCH", DIFF: "DIGITDIFF" },
          MULTIPLIER: { UP: "MULTUP", DOWN: "MULTDOWN" },
          OVER_UNDER: { OVER: "DIGITOVER", UNDER: "DIGITUNDER" },
          PUT: "PUT",
          PUTE: "PUTE",
          PUT_BARRIER: "PUT_BARRIER",
          RESET: { CALL: "RESETCALL", PUT: "RESETPUT" },
          RISE: "RISE",
          RUN_HIGH_LOW: { HIGH: "RUNHIGH", LOW: "RUNLOW" },
          STAY: { IN: "RANGE", OUT: "UPORDOWN" },
          TICK_HIGH_LOW: { HIGH: "TICKHIGH", LOW: "TICKLOW" },
          TOUCH: { ONE_TOUCH: "ONETOUCH", NO_TOUCH: "NOTOUCH" },
          TURBOS: { LONG: "TURBOSLONG", SHORT: "TURBOSSHORT" },
          VANILLA: { CALL: "VANILLALONGCALL", PUT: "VANILLALONGPUT" },
        };
        c.TURBOS.LONG.toLowerCase(),
          c.TURBOS.SHORT.toLowerCase(),
          c.VANILLA.CALL.toLowerCase(),
          c.VANILLA.PUT.toLowerCase();
        let u = (e) => {
            let {
              contract_type: t,
              exit_tick_time: n,
              profit: i,
              status: a,
            } = e;
            return k(t)
              ? ("open" === a && !n && "open") ||
                  (i && i < 0 && n ? "lost" : "won")
              : a;
          },
          h = (e) => e.sell_price || e.bid_price,
          p = (e) => (h(e) && _(e) ? h(e) : Number(e.bid_price)),
          m = (e) => {
            let { cancellation: { ask_price: t = 0 } = {} } = e;
            return t;
          },
          _ = (e) =>
            !!(
              (e.status && "open" !== e.status) ||
              e.is_expired ||
              e.is_settleable
            ),
          f = (e) => "open" === u(e),
          b = (e) => "sold" === e.status,
          y = (e) => !!e.is_valid_to_cancel,
          v = (e) => !_(e) && !b(e) && !!e.is_valid_to_sell,
          g = (e) => !!e.entry_spot,
          k = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /ACCU/i.test(e);
          },
          w = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /MULT/i.test(e);
          },
          T = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /TURBOS/i.test(e);
          },
          C = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /VANILLA/i.test(e);
          },
          E = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /RUN|EXPIRY|RANGE|UPORDOWN|ASIAN|RESET|TICK|LB/i.test(e);
          },
          N = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /ASIAN/i.test(e);
          },
          x = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /LB/i.test(e);
          },
          A = (e) => {
            let t = (0, r.Tw)(e.tick_stream || [], "epoch"),
              n =
                S(e.contract_type) || N(e.contract_type)
                  ? t.length
                  : t.length - 1;
            return !n || n < 0 ? 0 : n;
          },
          S = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /digit/i.test(e);
          },
          O = (e) => Number(e.bid_price) - Number(e.buy_price),
          I = (e) => {
            if (!e) return { stop_loss: null, take_profit: null };
            let {
              stop_loss: { order_amount: t } = {},
              take_profit: { order_amount: n } = {},
            } = e;
            return { stop_loss: t, take_profit: n };
          },
          D = (e, t, n) => {
            let i = o().duration(o().unix(n).diff(o().unix(t))),
              a =
                (o().duration(o().unix(n).diff(e)).asMilliseconds() /
                  i.asMilliseconds()) *
                100;
            return a < 0.5 ? (a = 0) : a > 100 && (a = 100), Math.round(a);
          },
          R = (e) => 100 * e,
          L = (e) => {
            let t = "purchased";
            return _(e) && (t = O(e) >= 0 ? "won" : "lost"), t;
          },
          P = (e) => {
            let { contract_update: t, limit_order: n } = e,
              { stop_loss: i, take_profit: a } = I(n || t);
            return {
              contract_update_stop_loss: i ? Math.abs(i).toString() : "",
              contract_update_take_profit: a ? a.toString() : "",
              has_contract_update_stop_loss: !!i,
              has_contract_update_take_profit: !!a,
            };
          },
          B = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return /(VANILLALONG|TURBOS)/i.test(e)
              ? (0, d.fm)(e.replace(/(VANILLALONG|TURBOS)/i, "").toLowerCase())
              : "";
          },
          U = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return T(e)
              ? "Long" === B(e)
                ? (0, i.jsx)(s.Xx, { i18n_default_text: "Up" })
                : (0, i.jsx)(s.Xx, { i18n_default_text: "Down" })
              : "";
          },
          M = (e, t) => {
            t
              ? (t.preventDefault(),
                ("keydown" !== t.type ||
                  ("keydown" === t.type && "Enter" === t.key)) &&
                  (null == e || e()))
              : null == e || e();
          },
          j = (e, t, n) => "buy" === e && !!(0, l.s0)(t, n);
        n("42231");
      },
      52717: function (e, t, n) {
        "use strict";
        n.d(t, {
          i4: () => u,
          dr: () => s,
          bf: () => o,
          oS: () => h,
          oC: () => d,
          lb: () => r,
          O$: () => m,
        });
        var i = n("11016");
        let a = {},
          o = (e, t) => Number(Number(e).toFixed(u(t))),
          s = (e, t) => `${d(e, u(t), h(t))} ${t}`,
          r = function (e, t, n) {
            let i =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : 0,
              a =
                arguments.length > 4 && void 0 !== arguments[4]
                  ? arguments[4]
                  : 0,
              o = t;
            o && (o = String(o).replace(/,/g, ""));
            let s = o && 0 > Number(o) ? "-" : "",
              r = i || u(e);
            return (
              (o = isNaN(+o) ? 0 : Math.abs(+o)),
              "undefined" != typeof Intl
                ? (o = new Intl.NumberFormat("en", {
                    minimumFractionDigits: a || r,
                    maximumFractionDigits: r,
                  }).format(o))
                : (o = d(o, r)),
              s + (n ? "" : l(e)) + o
            );
          },
          l = (e) => `<span class="symbols ${(e || "").toLowerCase()}"></span>`,
          d = (e, t, n) => {
            let i = String(e || 0).replace(/,/g, "");
            return (
              void 0 !== t && (i = (+i).toFixed(t)),
              n && (i = parseFloat(String(i))),
              i
                .toString()
                .replace(
                  /(^|[^\w.])(\d{4,})/g,
                  (e, t, n) => t + n.replace(/\d(?=(?:\d\d\d)+(?!\d))/g, "$&,")
                )
            );
          },
          c = (e) => (h(e) ? (0, i.SX)(p.get(), [e, "fractional_digits"]) : 2),
          u = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return a[e] ? (0, i.SX)(a, [e, "fractional_digits"]) : c(e);
          },
          h = (e) => /crypto/i.test((0, i.SX)(a, [e, "type"])) || e in p.get(),
          p = (() => {
            let e;
            let t = () =>
              (0, i._A)({
                BTC: {
                  display_code: "BTC",
                  name: "Bitcoin",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 8,
                },
                BUSD: {
                  display_code: "BUSD",
                  name: "Binance USD",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                DAI: {
                  display_code: "DAI",
                  name: "Multi-Collateral DAI",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                EURS: {
                  display_code: "EURS",
                  name: "STATIS Euro",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                IDK: {
                  display_code: "IDK",
                  name: "IDK",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 0,
                },
                PAX: {
                  display_code: "PAX",
                  name: "Paxos Standard",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                TUSD: {
                  display_code: "TUSD",
                  name: "True USD",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                USDC: {
                  display_code: "USDC",
                  name: "USD Coin",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                USDK: {
                  display_code: "USDK",
                  name: "USDK",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                eUSDT: {
                  display_code: "eUSDT",
                  name: "Tether ERC20",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                tUSDT: {
                  display_code: "tUSDT",
                  name: "Tether TRC20",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 2,
                },
                BCH: {
                  display_code: "BCH",
                  name: "Bitcoin Cash",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 8,
                },
                ETH: {
                  display_code: "ETH",
                  name: "Ether",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 8,
                },
                ETC: {
                  display_code: "ETC",
                  name: "Ether Classic",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 8,
                },
                LTC: {
                  display_code: "LTC",
                  name: "Litecoin",
                  min_withdrawal: 0.002,
                  pa_max_withdrawal: 5,
                  pa_min_withdrawal: 0.002,
                  fractional_digits: 8,
                },
                UST: {
                  display_code: "USDT",
                  name: "Tether Omni",
                  min_withdrawal: 0.02,
                  pa_max_withdrawal: 2e3,
                  pa_min_withdrawal: 10,
                  fractional_digits: 2,
                },
              });
            return { get: () => (!e && (e = t()), e) };
          })(),
          m = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return (
              "eUSDT" !== e && "tUSDT" !== e && (e = e.toUpperCase()),
              (0, i.SX)(p.get(), [e, "display_code"]) || e
            );
          };
      },
      72755: function (e, t, n) {
        "use strict";
        n.d(t, {
          LU: function () {
            return c;
          },
          QR: function () {
            return d;
          },
          fc: function () {
            return u;
          },
          gb: function () {
            return s;
          },
          mr: function () {
            return l;
          },
          p6: function () {
            return r;
          },
          vk: function () {
            return o;
          },
        });
        var i = n(30381),
          a = n.n(i);
        n(48059),
          (a().createFromInputFallback = function (e) {
            e._d = new Date(NaN);
          });
        let o = (e) => a().unix(e).utc(),
          s = (e) => {
            if (!e) return a()().utc();
            if (e instanceof a() && e.isValid() && e.isUTC()) return e;
            if ("number" == typeof e) return o(e);
            if (/invalid/i.test(a()(e).toString())) {
              let t = a()(),
                n = t.utc().daysInMonth();
              return a().utc(e, "DD MMM YYYY").valueOf() / 864e5 > n
                ? a().utc(t.add(e, "d"), "DD MMM YYYY")
                : a().utc(e, "DD MMM YYYY");
            }
            return a().utc(e);
          },
          r = function (e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : "YYYY-MM-DD",
              n =
                !(arguments.length > 2) ||
                void 0 === arguments[2] ||
                arguments[2];
            return n || null !== e ? s(e).format(t) : void 0;
          },
          l = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "HH:mm:ss [GMT]";
            return s(e).format(t);
          },
          d = (e, t) => a().duration(a().unix(t).diff(a().unix(e))),
          c = (e, t) => {
            let n = Math.floor(e.asDays()),
              i = e.hours(),
              o = e.minutes(),
              s = e.seconds();
            return {
              days: n,
              timestamp: a()(0)
                .hour(i)
                .minute(o)
                .seconds(s)
                .format(t || "HH:mm:ss"),
            };
          },
          u = (e, t, n) => a()(e, t).format(n);
      },
      78485: function (e, t, n) {
        "use strict";
        e = n.hmd(e);
        let i = (function () {
          let e, t, n;
          function i(e, t) {
            return null != t && e instanceof t;
          }
          try {
            e = Map;
          } catch (t) {
            e = function () {};
          }
          try {
            t = Set;
          } catch (e) {
            t = function () {};
          }
          try {
            n = Promise;
          } catch (e) {
            n = function () {};
          }
          function a(o, r, l, d, c) {
            "object" == typeof r &&
              ((l = r.depth),
              (d = r.prototype),
              (c = r.includeNonEnumerable),
              (r = r.circular));
            let u = [],
              h = [],
              p = "undefined" != typeof Buffer;
            return (
              void 0 === r && (r = !0),
              void 0 === l && (l = 1 / 0),
              (function o(l, m) {
                let _, f;
                if (null === l) return null;
                if (0 === m || "object" != typeof l) return l;
                if (i(l, e)) _ = new e();
                else if (i(l, t)) _ = new t();
                else if (i(l, n))
                  _ = new n(function (e, t) {
                    l.then(
                      function (t) {
                        e(o(t, m - 1));
                      },
                      function (e) {
                        t(o(e, m - 1));
                      }
                    );
                  });
                else if (a.__isArray(l)) _ = [];
                else if (a.__isRegExp(l))
                  (_ = new RegExp(l.source, s(l))),
                    l.lastIndex && (_.lastIndex = l.lastIndex);
                else if (a.__isDate(l)) _ = new Date(l.getTime());
                else {
                  if (p && Buffer.isBuffer(l))
                    return (
                      Buffer.from
                        ? (_ = Buffer.from(l))
                        : ((_ = new Buffer(l.length)), l.copy(_)),
                      _
                    );
                  i(l, Error)
                    ? (_ = Object.create(l))
                    : void 0 === d
                    ? (_ = Object.create((f = Object.getPrototypeOf(l))))
                    : ((_ = Object.create(d)), (f = d));
                }
                if (r) {
                  let e = u.indexOf(l);
                  if (-1 != e) return h[e];
                  u.push(l), h.push(_);
                }
                for (var b in (i(l, e) &&
                  l.forEach(function (e, t) {
                    let n = o(t, m - 1),
                      i = o(e, m - 1);
                    _.set(n, i);
                  }),
                i(l, t) &&
                  l.forEach(function (e) {
                    let t = o(e, m - 1);
                    _.add(t);
                  }),
                l)) {
                  if (Object.getOwnPropertyDescriptor(l, b)) {
                    if (0 > Object.keys(l).indexOf(b)) continue;
                    _[b] = o(l[b], m - 1);
                  }
                  try {
                    let e = Object.getOwnPropertyDescriptor(l, b);
                    if ("undefined" === e.set) continue;
                    _[b] = o(l[b], m - 1);
                  } catch (e) {
                    if (e instanceof TypeError) continue;
                    if (e instanceof ReferenceError) continue;
                  }
                }
                if (Object.getOwnPropertySymbols) {
                  let e = Object.getOwnPropertySymbols(l);
                  for (var b = 0; b < e.length; b++) {
                    let t = e[b];
                    var y = Object.getOwnPropertyDescriptor(l, t);
                    if (!y || !!y.enumerable || !!c)
                      (_[t] = o(l[t], m - 1)), Object.defineProperty(_, t, y);
                  }
                }
                if (c) {
                  let e = Object.getOwnPropertyNames(l);
                  for (var b = 0; b < e.length; b++) {
                    let t = e[b];
                    var y = Object.getOwnPropertyDescriptor(l, t);
                    if (!y || !y.enumerable)
                      (_[t] = o(l[t], m - 1)), Object.defineProperty(_, t, y);
                  }
                }
                return _;
              })(o, l)
            );
          }
          function o(e) {
            return Object.prototype.toString.call(e);
          }
          (a.clonePrototype = function (e) {
            if (null === e) return null;
            let t = function () {};
            return (t.prototype = e), new t();
          }),
            (a.__objToStr = o);
          a.__isDate = function (e) {
            return "object" == typeof e && "[object Date]" === o(e);
          };
          a.__isArray = function (e) {
            return "object" == typeof e && "[object Array]" === o(e);
          };
          function s(e) {
            let t = "";
            return (
              e.global && (t += "g"),
              e.ignoreCase && (t += "i"),
              e.multiline && (t += "m"),
              t
            );
          }
          return (
            (a.__isRegExp = function (e) {
              return "object" == typeof e && "[object RegExp]" === o(e);
            }),
            (a.__getRegExpFlags = s),
            a
          );
        })();
        e.exports && (e.exports = i);
      },
      11016: function (e, t, n) {
        "use strict";
        n.d(t, {
          LI: function () {
            return i.LI;
          },
          Qr: function () {
            return i.Qr;
          },
          SX: function () {
            return i.SX;
          },
          Tw: function () {
            return i.Tw;
          },
          _A: function () {
            return i._A;
          },
          ei: function () {
            return i.ei;
          },
          kI: function () {
            return i.kI;
          },
          uv: function () {
            return i.uv;
          },
          vP: function () {
            return i.vP;
          },
          xb: function () {
            return i.xb;
          },
        }),
          n(78485);
        var i = n(45543);
      },
      45543: function (e, t, n) {
        "use strict";
        n.d(t, {
          LI: function () {
            return h;
          },
          Qr: function () {
            return i;
          },
          SX: function () {
            return d;
          },
          Tw: function () {
            return l;
          },
          _A: function () {
            return p;
          },
          ei: function () {
            return u;
          },
          kI: function () {
            return a;
          },
          uv: function () {
            return r;
          },
          vP: function () {
            return c;
          },
          xb: function () {
            return o;
          },
        });
        let i = (e) => {
            let t = !0;
            return (
              e &&
                e instanceof Object &&
                Object.keys(e).forEach((n) => {
                  Object.prototype.hasOwnProperty.call(e, n) && (t = !1);
                }),
              t
            );
          },
          a = (e) => {
            if (i(e)) return e;
            let t = Array.isArray(e) ? [] : {};
            for (let n in e)
              Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
            return t;
          },
          o = (e, t) => {
            if (typeof e != typeof t) return !1;
            if (Array.isArray(e)) return s(e, t);
            if (e && t && "object" == typeof e) return r(e, t);
            else if (
              "number" == typeof e &&
              "number" == typeof t &&
              isNaN(e) &&
              isNaN(t)
            )
              return !0;
            return e === t;
          },
          s = (e, t) =>
            e === t || (e.length === t.length && e.every((e, n) => o(e, t[n]))),
          r = (e, t) =>
            e === t ||
            (Object.keys(e).length === Object.keys(t).length &&
              Object.keys(e).every((n) => o(e[n], t[n]))),
          l = (e, t) =>
            e.filter(
              (n, i) =>
                e.findIndex((e, a) => (e[t] ? e[t] === n[t] : a === i)) === i
            ),
          d = (e, t) => {
            let n = t;
            return (!Array.isArray(n) && (n = [n]),
            !i(e) && n[0] in e && n && n.length > 1)
              ? d(e[n[0]], n.slice(1))
              : e
              ? a(e[n[0]])
              : void 0;
          },
          c = (e) => Array.from(Array(e).keys()),
          u = (e, t) =>
            t.reduce(
              (t, n) => (
                Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]), t
              ),
              {}
            ),
          h = (e, t) => {
            let n;
            return (
              Object.keys(e).some((i) => {
                let a = e[i];
                if (i === t) return (n = e[t]), !0;
                if ("object" == typeof a) {
                  let e = h(a, t);
                  if (e) return (n = e), !0;
                }
                return !1;
              }),
              n
            );
          },
          p = (e) => (
            Object.getOwnPropertyNames(e).forEach((t) => {
              let n = e[t];
              n && "object" == typeof n && !Object.isFrozen(n) && p(n);
            }),
            Object.freeze(e)
          );
      },
      42231: function (e, t, n) {
        "use strict";
        n.d(t, { x: () => o });
        let i = {
            derivCom: {
              staging: "https://staging.deriv.com",
              production: {
                me: "https://deriv.me",
                be: "https://deriv.be",
                com: "https://deriv.com",
              },
            },
            derivApp: {
              staging: "https://staging-app.deriv.com",
              production: {
                me: "https://app.deriv.me",
                be: "https://app.deriv.be",
                com: "https://app.deriv.com",
              },
            },
            smartTrader: {
              staging: {
                me: "https://staging-smarttrader.deriv.me",
                be: "https://staging-smarttrader.deriv.be",
                com: "https://staging-smarttrader.deriv.com",
              },
              production: {
                me: "https://smarttrader.deriv.me",
                be: "https://smarttrader.deriv.be",
                com: "https://smarttrader.deriv.com",
              },
            },
          },
          a = (e) => {
            let t = window.location.hostname,
              n = t.includes("staging"),
              a = t.endsWith(".me") ? "me" : t.endsWith(".be") ? "be" : "com",
              o = i[e];
            return n
              ? "string" == typeof o.staging
                ? o.staging
                : o.staging[a]
              : o.production[a];
          },
          o = {
            bot: `${window.location.origin}`,
            cashier: `${a("derivApp")}/cashier/`,
            cashier_deposit: `${a("derivApp")}/cashier/deposit`,
            cashier_p2p: `${a("derivApp")}/cashier/p2p`,
            contract: `${a("derivApp")}/contract/:contract_id`,
            personal_details: `${a("derivApp")}/account/personal-details`,
            positions: `${a("derivApp")}/reports/positions`,
            profit: `${a("derivApp")}/reports/profit`,
            reports: `${a("derivApp")}/reports`,
            root: a("derivApp"),
            smarttrader: a("smartTrader"),
            statement: `${a("derivApp")}/reports/statement`,
            trade: `${a("derivApp")}/dtrader`,
            traders_hub: a("derivApp"),
            wallets_transfer: `${a("derivApp")}/wallet/account-transfer`,
            signup:
              "https://track.deriv.me/_SBDSiGetH55qC5mQXGs4IWNd7ZgqdRLk/1/",
            deriv_com: "https://app.dollarprinterfx.com/dtrader",
            deriv_app: a("derivApp"),
            endpoint: `${window.location.origin}/endpoint`,
            account_limits: `${a("derivApp")}/account/account-limits`,
            help_center: `${a("derivCom")}/help-centre/`,
            responsible: `${a("derivCom")}/responsible/`,
          };
      },
      77149: function (e, t, n) {
        "use strict";
        n.d(t, {
          b1: function () {
            return i;
          },
          nI: function () {
            return o;
          },
          tq: function () {
            return a;
          },
        });
        let i = () =>
            "ontouchstart" in window ||
            "ontouchstart" in document.documentElement ||
            (window.DocumentTouch &&
              document instanceof window.DocumentTouch) ||
            navigator.maxTouchPoints > 0 ||
            window.navigator.msMaxTouchPoints > 0,
          a = () => window.innerWidth <= 600,
          o = () => s() || window.innerWidth > 1279,
          s = () => 600 < window.innerWidth && window.innerWidth <= 1279;
      },
      29398: function (e, t, n) {
        "use strict";
        n.d(t, { s0: () => c, CY: () => l });
        let i =
            "^([A-Z]+)_((?:1HZ[0-9-V]+)|(?:(?:CRASH|BOOM)[0-9\\d]+[A-Z]?)|(?:cry_[A-Z]+)|(?:JD[0-9]+)|(?:OTC_[A-Z0-9]+)|R_[\\d]{2,3}|[A-Z]+)_([\\d.]+)",
          a = RegExp(`${i}_(\\d+)_(\\d*\\.?\\d*)_(\\d+)_(\\d*\\.?\\d*)_(\\d+)`),
          o = RegExp(`${i}_(\\d+)_(\\d+)`),
          s = RegExp(`${i}_([A-Z\\d]+)_([A-Z\\d]+)_?([A-Z\\d]+)?`),
          r = (e) => {
            let t;
            let n = {
                category: "",
                underlying: "",
                barrier_1: "",
                multiplier: "",
                start_time: "",
                payout_tick: "",
                growth_rate: "",
                growth_frequency: "",
              },
              i = /^ACCU/i.test(e),
              r = /^MULT/i.test(e),
              l = (t = r ? o : i ? a : s).exec(e);
            return (
              null !== l &&
                ((n.category =
                  l[1].charAt(0).toUpperCase() + l[1].slice(1).toLowerCase()),
                (n.underlying = l[2]),
                r
                  ? ((n.multiplier = l[4]), (n.start_time = l[5]))
                  : i
                  ? ((n.payout_tick = l[4]),
                    (n.growth_rate = l[5]),
                    (n.growth_frequency = l[6]),
                    (n.start_time = l[8]))
                  : (n.start_time = l[4]),
                /^(CALL|PUT)$/i.test(n.category) && (n.barrier_1 = l[6])),
              n
            );
          },
          l = (e) => {
            let { shortcode: t = "", shortcode_info: n } = e,
              i = t ? r(t) : n;
            return !!i && !!i.barrier_1 && !/^S0P$/.test(i.barrier_1);
          },
          d = (e) => {
            let t = r(e);
            return (
              (null == t ? !void 0 : !t.multiplier) &&
              ((null == t ? void 0 : t.start_time) || "")
            );
          },
          c = (e, t) => {
            let n = d(e);
            return n && t && /f$/gi.test(n);
          };
      },
      46677: function (e, t, n) {
        "use strict";
        n.d(t, {
          _v: function () {
            return l;
          },
          fm: function () {
            return r;
          },
          pp: function () {
            return o;
          },
          qB: function () {
            return a;
          },
        });
        let i = (e, t, n) => {
            let i = String(e || "");
            return i.length >= t ? i : `${Array(t - i.length + 1).join(n)}${i}`;
          },
          a = (e, t) => {
            let n = s(e),
              a = s(t);
            if (!n || !a) return "";
            let o = Math.max(n.length, a.length);
            (n = i(n, o, "0")), (a = i(a, o, "0"));
            let r = 0;
            return n !== a && (r = n > a ? 1 : -1), r;
          },
          o = (e, t) =>
            !!((null == t ? void 0 : t.length) < 1) ||
            RegExp(
              t.split("").reduce((e, t) => `${e}[^${t}]*${t}`, ""),
              "i"
            ).test(e),
          s = (e) => ("number" == typeof e ? String(e) : e),
          r = (e) => e && e[0].toUpperCase() + e.slice(1),
          l = (e) =>
            e
              .normalize("NFD")
              .split("")
              .filter((e) => /^[a-z ]*$/i.test(e))
              .join("");
      },
      24797: function (e, t, n) {
        "use strict";
        n.d(t, {
          L: function () {
            return r;
          },
        });
        let i = "deriv.com",
          a = [i, "deriv.me", "deriv.be"],
          o =
            ("undefined" != typeof window &&
              window.location.hostname.split("app.")[1]) ||
            "",
          s = a.includes(o) ? o : i,
          r = Object.freeze({
            DERIV_HOST_NAME: s,
            DERIV_COM_PRODUCTION: `https://${s}`,
            DERIV_COM_PRODUCTION_EU: `https://eu.${s}`,
            DERIV_COM_STAGING: `https://staging.${s}`,
            DERIV_APP_PRODUCTION: `https://app.${s}`,
            DERIV_APP_STAGING: `https://staging-app.${s}`,
            SMARTTRADER_PRODUCTION: `https://smarttrader.${s}`,
            SMARTTRADER_STAGING: `https://staging-smarttrader.${s}`,
            BINARYBOT_PRODUCTION: `https://bot.${s}`,
            BINARYBOT_STAGING: `https://staging-bot.${s}`,
          });
      },
      339: function (e, t, n) {
        "use strict";
        let i;
        n.d(t, { y_: () => d, RK: () => h, MT: () => c, SM: () => u });
        var a = n("24797"),
          o = n("18470");
        n("42231");
        let s = "binary.com",
          r = {
            "bot.binary.com": "www.binary.bot",
            "developers.binary.com": "developers.binary.com",
            "academy.binary.com": "academy.binary.com",
            "blog.binary.com": "blog.binary.com",
          },
          l = (e) => (e ? e.replace(/(^\/|\/$|[^a-zA-Z0-9-_./()#])/g, "") : ""),
          d = (e) => {
            let t = (0, o.zY)();
            if (!t) return e;
            let n = new URL(e);
            if (Object.keys(r).includes(n.hostname)) n.hostname = r[n.hostname];
            else {
              if (!n.hostname.match(s)) return e;
              n.hostname = n.hostname.replace(RegExp(`\\.${s}`, "i"), `.${t}`);
            }
            return n.href;
          },
          c = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : "",
              t = window.location;
            return /^\/(br_)/.test(t.pathname)
              ? `/${t.pathname.split("/")[1]}${/^\//.test(e) ? e : `/${e}`}`
              : e;
          },
          u = (e) => {
            i = e;
          },
          h = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : "",
              t =
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
              n =
                arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
              o = n ? a.L.DERIV_COM_PRODUCTION_EU : a.L.DERIV_COM_PRODUCTION,
              s = null == i ? void 0 : i.toLowerCase();
            return ((s = s && "en" !== s ? `/${s}` : ""), t)
              ? `${o}/${l(e)}`
              : (o === a.L.DERIV_COM_PRODUCTION &&
                  s.includes("_") &&
                  (s = s.replace("_", "-")),
                `${o}${s}/${l(e)}`);
          };
      },
      40968: function (e, t, n) {
        "use strict";
        let i, a;
        n.d(t, {
          Cc: function () {
            return A;
          },
          JL: function () {
            return d;
          },
          bf: function () {
            return x;
          },
        });
        var o = n(52717),
          s = n(11016),
          r = n(46677);
        let l = (e) => null != e && e.toString().replace(/\s/g, "").length > 0,
          d = ". , ' : ; ( ) \xb0 @ # / -",
          c = (e, t) => {
            if (
              (null == t ? void 0 : t.is_required) &&
              (!e || e.match(/^\s*$/))
            )
              return {
                is_ok: !1,
                message: null == a ? void 0 : a.empty_address(),
              };
            if (!_(e, { min: 0, max: 70 }))
              return {
                is_ok: !1,
                message: null == a ? void 0 : a.maxNumber(70),
              };
            if (!/^[\p{L}\p{Nd}\s'.,:;()\u00b0@#/-]{0,70}$/u.test(e))
              return { is_ok: !1, message: null == a ? void 0 : a.address() };
            return { is_ok: !0 };
          },
          u = (e) => "" === e || /^[A-Za-z0-9][A-Za-z0-9\s-]*$/.test(e),
          h = (e) => /(?!^$|\s+)[A-Za-z0-9./\s-]$/.test(e),
          p = (e) => /^\+?([0-9-]+\s)*[0-9-]+$/.test(e),
          m = (e) => /^(?!.*\s{2,})[\p{L}\s'.-]{2,50}$/u.test(e),
          _ = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : "",
              t = arguments.length > 1 ? arguments[1] : void 0;
            return (
              (!t.min || e.length >= Number(t.min)) &&
              (!t.max || e.length <= Number(t.max))
            );
          },
          f = (e) => /^(?=.*[a-z])(?=.*\d)(?=.*[A-Z])[!-~]{8,25}$/.test(e),
          b = (e) =>
            /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}$/.test(e),
          y = (e) => /^[+-]?\d+\.?\d*$/.test(e),
          v = (e) => !/[`~!@#$%^&*)(_=+[}{\]\\/";:?><|]+/.test(e),
          g = (e, t) => {
            var n;
            return null === (n = t.regex) || void 0 === n ? void 0 : n.test(e);
          },
          k = (e) => !!e,
          w = (e) => !/p[.\s]+o[.\s]+box/i.test(e),
          T = (e) => 8 === e.trim().length,
          C = (e, t) =>
            "float" === t.type ? +e > Number(t.max) : 1 === (0, r.qB)(e, t.max),
          E = (e, t) => {
            let n = (0, s.kI)(t),
              i = null;
            if (n.allow_empty && 0 === e.length) return { is_ok: !0 };
            let r = !0;
            if (
              ("min" in n && "function" == typeof n.min && (n.min = n.min()),
              "max" in n && "function" == typeof n.max && (n.max = n.max()),
              !("float" === n.type ? /^\d*(\.\d+)?$/ : /^\d+$/).test(e) ||
                isNaN(+e))
            )
              (r = !1), (i = a.number());
            else if (
              "min" in n &&
              "max" in n &&
              +n.min == +n.max &&
              +e != +n.min
            )
              (r = !1), (i = a.value((0, o.oC)(n.min, n.decimals)));
            else if (
              "min" in n &&
              "max" in n &&
              n.min > 0 &&
              (+e < +n.min || C(+e, n))
            ) {
              r = !1;
              let e = (0, o.oC)(n.min, n.decimals),
                t = (0, o.oC)(n.max, n.decimals);
              i = a.betweenMinMax(e, t);
            } else if (
              "float" === n.type &&
              n.decimals &&
              !RegExp(`^\\d+(\\.\\d{0,${n.decimals}})?$`).test(e)
            )
              (r = !1), (i = a.decimalPlaces(n.decimals));
            else if ("min" in n && +e < +n.min) {
              r = !1;
              let e = (0, o.oC)(n.min, n.decimals);
              i = a.minNumber(e);
            } else if ("max" in n && C(+e, n)) {
              r = !1;
              let e = (0, o.oC)(n.max, n.decimals);
              i = a.maxNumber(e);
            }
            return { is_ok: r, message: i };
          },
          N = () => ({
            address: { func: c, message: a.address },
            barrier: { func: y, message: a.barrier },
            email: { func: b, message: a.email },
            general: { func: v, message: a.general },
            length: { func: _, message: "" },
            name: { func: m, message: a.name },
            number: {
              func: function () {
                for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
                  t[n] = arguments[n];
                let [i, a] = t;
                return E(i, a);
              },
              message: a.number,
            },
            password: { func: f, message: a.password },
            phone: { func: p, message: a.phone },
            po_box: { func: w, message: a.po_box },
            postcode: { func: u, message: a.postcode },
            regular: { func: g, message: "" },
            req: { func: l, message: "" },
            confirm: { func: k, message: "" },
            signup_token: { func: T, message: a.signup_token },
            tax_id: { func: h, message: a.validTaxID },
          }),
          x = (e) => {
            !i && ((a = e), (i = N()));
          },
          A = () => i;
      },
      419: function (e, t, n) {
        "use strict";
        n.d(t, { JL: () => i.JL });
        var i = n("40968");
        n("32750"), n("63069");
      },
      45221: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => h });
        var i = n("85893");
        n("67294");
        var a = n("63387"),
          o = n.n(a),
          s = n("89606"),
          r = n("45452"),
          l = n("29490");
        let d = (e) => {
            let {
                className: t,
                id: n,
                is_fullscreen: a = !0,
                is_slow_loading: s,
                status: r,
                theme: d,
              } = e,
              c = d ? `barspinner-${d}` : "barspinner-light";
            return (0, i.jsxs)("div", {
              "data-testid": "dt_initial_loader",
              className: o()(
                "initial-loader",
                { "initial-loader--fullscreen": a },
                t
              ),
              children: [
                (0, i.jsx)("div", {
                  id: n,
                  className: o()("initial-loader__barspinner", "barspinner", c),
                  children: Array.from([, , , , ,]).map((e, t) =>
                    (0, i.jsx)(
                      "div",
                      {
                        className: `initial-loader__barspinner--rect barspinner__rect barspinner__rect--${
                          t + 1
                        } rect${t + 1}`,
                      },
                      t
                    )
                  ),
                }),
                s &&
                  (null == r
                    ? void 0
                    : r.map((e, t) =>
                        (0, i.jsx)(
                          l.Z,
                          {
                            as: "h3",
                            color: "prominent",
                            size: "xs",
                            align: "center",
                            children: e,
                          },
                          t
                        )
                      )),
              ],
            });
          },
          c = (e) =>
            (0, i.jsx)(d, {
              ...e,
              is_fullscreen: !1,
              className: "initial-loader--btn",
            }),
          u = (e) => {
            let {
                black: t,
                blue: n,
                children: a,
                className: l = "",
                classNameSpan: d,
                green: u,
                has_effect: h,
                icon: p,
                id: m,
                is_disabled: _,
                is_loading: f,
                is_submit_success: b,
                is_button_toggle: y,
                is_circle: v,
                is_circular: g,
                is_plus: k,
                large: w,
                medium: T,
                onClick: C,
                rounded: E,
                tabIndex: N = 0,
                text: x,
                wrapperClassName: A,
                type: S,
                primary: O,
                primary_light: I,
                secondary: D,
                alternate: R,
                transparent: L,
                small: P,
                tertiary: B,
                renderText: U,
                ...M
              } = e,
              j = o()(
                "dc-btn",
                {
                  "dc-btn__effect": h,
                  "dc-btn--primary": O,
                  "dc-btn--black": t,
                  "dc-btn--blue": n,
                  "dc-btn--secondary": D,
                  "dc-btn--tertiary": B,
                  "dc-btn--primary__light": I,
                  "dc-btn--primary__blue": n && O,
                  "dc-btn--tertiary__blue": n && B,
                  "dc-btn--alternate": R,
                  "dc-btn--green": u,
                  "dc-btn__rounded": E,
                  "dc-btn__large": w,
                  "dc-btn__medium": T,
                  "dc-btn__small": P,
                  "dc-btn__toggle": y,
                  "dc-btn--plus": k,
                  "dc-btn--circle": v,
                  "dc-btn--circular": g,
                  "dc-btn--transparent": L,
                },
                l
              ),
              F = (0, i.jsxs)("button", {
                id: m,
                className: j,
                onClick: C,
                disabled: _,
                tabIndex: N,
                type: b ? "button" : S || "submit",
                ...M,
                children: [
                  p &&
                    (0, i.jsx)("div", {
                      className: o()("dc-btn__icon", {
                        "dc-btn__icon--circle": v,
                      }),
                      children: p,
                    }),
                  x &&
                    !(f || b) &&
                    (("function" == typeof U &&
                      U(x[0].toUpperCase() + x.substr(1))) ||
                      (0, i.jsx)(r.Z, {
                        size: "xs",
                        weight: "bold",
                        align: "center",
                        className: o()("dc-btn__text", d),
                        children: x[0].toUpperCase() + x.substr(1),
                      })),
                  f && (0, i.jsx)(c, {}),
                  b &&
                    (0, i.jsx)(s.J, {
                      icon: "IcCheckmark",
                      color: "active",
                      size: 24,
                    }),
                  k &&
                    (0, i.jsx)(s.J, {
                      icon: "IcAddBold",
                      color: "black",
                      size: 18,
                    }),
                  !x &&
                    !f &&
                    a &&
                    (0, i.jsx)(r.Z, {
                      size: "xs",
                      weight: "bold",
                      align: "center",
                      className: o()("dc-btn__text", d),
                      children: a,
                    }),
                ],
              }),
              V = (0, i.jsx)("div", { className: A, children: F });
            return A ? V : F;
          };
        u.Group = (e) => {
          let { children: t, className: n } = e;
          return (0, i.jsx)("div", {
            className: o()("dc-btn__group", n),
            children: t,
          });
        };
        let h = u;
      },
      10434: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => p });
        var i = n("85893"),
          a = n("67294"),
          o = n("63387"),
          s = n.n(o),
          r = n("73935"),
          l = n("81262"),
          d = n("1051"),
          c = n("76298"),
          u = n("45221"),
          h = n("45452");
        let p = (e) => {
          var t;
          let {
              disableApp: n,
              dismissable: o,
              enableApp: p,
              is_closed_on_cancel: m = !0,
              is_closed_on_confirm: _ = !0,
              is_visible: f,
              onCancel: b,
              onClose: y,
              onConfirm: v,
              onEscapeButtonCancel: g,
              ...k
            } = e,
            {
              cancel_button_text: w,
              className: T,
              children: C,
              confirm_button_text: E,
              is_loading: N,
              is_mobile_full_width: x = !0,
              is_content_centered: A,
              portal_element_id: S,
              title: O,
              has_close_icon: I,
            } = k,
            D = a.useRef();
          a.useEffect(() => {
            f && n && n();
          }, [f, n]),
            a.useEffect(() => {
              let e = (e) => {
                "Escape" === e.key && (null == g || g());
              };
              return (
                window.addEventListener("keydown", e),
                () => window.removeEventListener("keydown", e)
              );
            }, []);
          let R = () => {
              m && p && p(), null == b || b();
            },
            L = () => {
              _ && p && p(), v();
            },
            P = () => {
              y ? y() : b ? R() : L();
            };
          (0, d.t)(D, P, () => !!o || !!(I && f && m));
          let B = s()("dc-dialog__content", {
              "dc-dialog__content--centered": A,
            }),
            U =
              "string" == typeof C ||
              (a.isValidElement(C) &&
                "string" ==
                  typeof (null == C
                    ? void 0
                    : null === (t = C.props) || void 0 === t
                    ? void 0
                    : t.i18n_default_text)),
            M = (0, i.jsx)(l.Z, {
              appear: !0,
              in: f && !N,
              timeout: 50,
              classNames: {
                appear: "dc-dialog__wrapper--enter",
                enter: "dc-dialog__wrapper--enter",
                enterDone: "dc-dialog__wrapper--enter-done",
                exit: "dc-dialog__wrapper--exit",
              },
              unmountOnExit: !0,
              children: (0, i.jsx)("div", {
                className: s()("dc-dialog__wrapper", T, {
                  "dc-dialog__wrapper--has-portal": !!S,
                }),
                children: (0, i.jsxs)("div", {
                  className: s()("dc-dialog__dialog", {
                    "dc-dialog__dialog--has-margin": !x,
                  }),
                  role: "dialog",
                  ref: D,
                  children: [
                    (O || I) &&
                      (0, i.jsxs)("div", {
                        className: s()("dc-dialog__header-wrapper", {
                          "dc-dialog__header-wrapper--end": !O,
                        }),
                        children: [
                          !!O &&
                            (0, i.jsx)(h.Z, {
                              as: "h1",
                              color: "prominent",
                              weight: "bold",
                              className: "dc-dialog__header--title",
                              children: O,
                            }),
                          I &&
                            (0, i.jsx)("div", {
                              onClick: P,
                              className: "dc-dialog__header--close",
                              children: (0, i.jsx)(c.Z, {
                                height: "20px",
                                width: "20px",
                                fill: "var(--text-general)",
                                className: "icon-general-fill-path",
                              }),
                            }),
                        ],
                      }),
                    U
                      ? (0, i.jsx)(h.Z, {
                          as: "p",
                          size: "xs",
                          styles: { lineHeight: "1.43" },
                          className: B,
                          children: C,
                        })
                      : (0, i.jsx)("div", { className: B, children: C }),
                    (0, i.jsxs)("div", {
                      className: "dc-dialog__footer",
                      children: [
                        !!b &&
                          (0, i.jsx)(u.Z, {
                            className: "dc-dialog__button",
                            has_effect: !0,
                            text: w,
                            onClick: R,
                            secondary: !0,
                            large: !0,
                          }),
                        !!E &&
                          (0, i.jsx)(u.Z, {
                            className: "dc-dialog__button",
                            has_effect: !0,
                            text: E,
                            onClick: L,
                            primary: !0,
                            large: !0,
                          }),
                      ],
                    }),
                  ],
                }),
              }),
            });
          if (S) {
            let e = document.getElementById(S);
            if (e) return r.createPortal(M, e);
          }
          return M;
        };
      },
      87537: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => s });
        var i = n("85893"),
          a = n("67294"),
          o = n("66175");
        let s = a.memo((e) => {
          let {
              amount: t = 0,
              className: n,
              currency: s = "USD",
              has_sign: r,
              should_format: l = !0,
              show_currency: d = !1,
            } = e,
            c = "";
          Number(t) && (0 > Number(t) || r) && (c = Number(t) > 0 ? "+" : "-");
          let u = r || l ? Math.abs(Number(t)) : t,
            h = l ? (0, o.lby)(s, u, !0, 0, 0) : u;
          return (0, i.jsxs)(a.Fragment, {
            children: [
              (0, i.jsx)("span", { children: r && c }),
              (0, i.jsxs)("span", {
                "data-testid": "dt_span",
                className: n,
                children: [h, " ", d && (0, o.O$T)(s)],
              }),
            ],
          });
        });
      },
      31865: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => s });
        var i = n("85893");
        n("67294");
        var a = n("339"),
          o = n("48059");
        let s = (e) => {
          let {
            href: t,
            is_document: n,
            is_eu_url: s = !1,
            children: r = null,
            ...l
          } = e;
          return (0, i.jsx)("a", {
            href: ((0, a.SM)((0, o.Jb)()), (0, a.RK)(t, n, s)),
            rel: "noopener noreferrer",
            target: "_blank",
            ...l,
            children: r,
          });
        };
      },
      45452: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => i });
        let i = n("29490").Z;
      },
      29490: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return r;
          },
        });
        var i = n(67294),
          a = n(63387),
          o = n.n(a),
          s = n(66175);
        let r = (e) => {
          let {
              children: t,
              size: n = "s",
              color: a = "general",
              align: r = "left",
              weight: l = "normal",
              lineHeight: d = "m",
              as: c,
              className: u,
              styles: h,
              ...p
            } = e,
            m = {
              "--text-size": `var(--text-size-${n})`,
              "--text-color": `var(--text-${a})`,
              "--text-lh": `var(--text-lh-${d})`,
              "--text-weight": `var(--text-weight-${l})`,
              "--text-align": `var(--text-align-${r})`,
            },
            [_, f] = i.useState(m);
          i.useEffect(() => {
            (0, s.Qr$)(h) ? f(m) : f({ ...m, ...h });
          }, [n, a, d, l, r]);
          let b = o()("dc-text", u);
          return i.createElement(
            c || "span",
            { className: b, style: _, ...p },
            t
          );
        };
      },
      24335: function (e, t, n) {
        "use strict";
        n.d(t, {
          FK: function () {
            return s;
          },
          R5: function () {
            return r;
          },
          ve: function () {
            return a;
          },
          xc: function () {
            return o;
          },
          yj: function () {
            return i;
          },
        });
        let i = Object.freeze({ WORKSPACE: "Workspace", CHART: "Chart" }),
          a = Object.freeze({
            DASHBOARD: 0,
            BOT_BUILDER: 1,
            ANALYSIS_TOOL: 2,
            DOLLAR_BOTS: 3,
            COPY_TRADER: 4,
            CHART: 5,
            STRATEGIES: 6,
            RISK: 7,
          }),
          o = 10,
          s = [
            "id-dbot-dashboard",
            "id-bot-builder",
            "id-dollar_bots",
            "id-charts",
            "id-tutorials",
          ],
          r = 500;
      },
      80177: function (e, t, n) {
        "use strict";
        n.d(t, {
          K: function () {
            return i;
          },
        });
        let i = Object.freeze({
          NOT_RUNNING: 0,
          STARTING: 1,
          RUNNING: 2,
          PURCHASE_SENT: 3,
          PURCHASE_RECEIVED: 4,
          IS_STOPPING: 5,
          CONTRACT_CLOSED: 6,
        });
      },
      88817: function (e, t, n) {
        "use strict";
        n.d(t, {
          h8: function () {
            return r;
          },
          sl: function () {
            return l;
          },
        });
        var i = n(66175),
          a = n(48059);
        let o = (e) => ({
            ACCU: { name: (0, a.NC)("Accumulators"), position: "top" },
            ASIANU: { name: (0, a.NC)("Asian Up"), position: "top" },
            ASIAND: { name: (0, a.NC)("Asian Down"), position: "bottom" },
            CALL: {
              name: e ? (0, a.NC)("Higher") : (0, a.NC)("Rise"),
              position: "top",
            },
            PUT: {
              name: e ? (0, a.NC)("Lower") : (0, a.NC)("Fall"),
              position: "bottom",
            },
            CALLE: { name: (0, a.NC)("Rise"), position: "top" },
            PUTE: { name: (0, a.NC)("Fall"), position: "bottom" },
            CALLSPREAD: { name: (0, a.NC)("Spread Up"), position: "top" },
            PUTSPREAD: { name: (0, a.NC)("Spread Down"), position: "bottom" },
            DIGITMATCH: { name: (0, a.NC)("Matches"), position: "top" },
            DIGITDIFF: { name: (0, a.NC)("Differs"), position: "bottom" },
            DIGITEVEN: { name: (0, a.NC)("Even"), position: "top" },
            DIGITODD: { name: (0, a.NC)("Odd"), position: "bottom" },
            DIGITOVER: { name: (0, a.NC)("Over"), position: "top" },
            DIGITUNDER: { name: (0, a.NC)("Under"), position: "bottom" },
            EXPIRYMISS: { name: (0, a.NC)("Ends Outside"), position: "top" },
            EXPIRYRANGE: {
              name: (0, a.NC)("Ends Between"),
              position: "bottom",
            },
            LBFLOATCALL: { name: (0, a.NC)("Close-to-Low"), position: "top" },
            LBFLOATPUT: { name: (0, a.NC)("High-to-Close"), position: "top" },
            LBHIGHLOW: { name: (0, a.NC)("High-to-Low"), position: "top" },
            MULTUP: { name: (0, a.NC)("Up"), position: "top" },
            MULTDOWN: { name: (0, a.NC)("Down"), position: "bottom" },
            ONETOUCH: { name: (0, a.NC)("Touch"), position: "top" },
            NOTOUCH: { name: (0, a.NC)("No Touch"), position: "bottom" },
            RANGE: { name: (0, a.NC)("Stays Between"), position: "top" },
            UPORDOWN: { name: (0, a.NC)("Goes Outside"), position: "bottom" },
            RESETCALL: { name: (0, a.NC)("Reset Call"), position: "top" },
            RESETPUT: { name: (0, a.NC)("Reset Put"), position: "bottom" },
            RUNHIGH: { name: (0, a.NC)("Only Ups"), position: "top" },
            RUNLOW: { name: (0, a.NC)("Only Downs"), position: "bottom" },
            TICKHIGH: { name: (0, a.NC)("High Tick"), position: "top" },
            TICKLOW: { name: (0, a.NC)("Low Tick"), position: "bottom" },
          }),
          s = (e) => ({ ...o(e) }),
          r = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return s(t)[e] ? s(t)[e.toUpperCase()].name : "";
          },
          l = () => ({
            has_contract_update_stop_loss: {
              trigger: "contract_update_stop_loss",
            },
            has_contract_update_take_profit: {
              trigger: "contract_update_take_profit",
            },
            contract_update_stop_loss: {
              rules: [
                [
                  "req",
                  {
                    condition: (e) => !e.contract_update_stop_loss,
                    message: (0, a.NC)("Please enter a stop loss amount."),
                  },
                ],
                [
                  "custom",
                  {
                    func: (e, t, n) => {
                      let a = (0, i.vMw)(n.contract_info);
                      return !(a < 0 && -e > a);
                    },
                    message: (0, a.NC)(
                      "Please enter a stop loss amount that's higher than the current potential loss."
                    ),
                  },
                ],
                [
                  "custom",
                  {
                    func: (e, t, n) => {
                      var i;
                      return (
                        e <
                        ((null == n
                          ? void 0
                          : null === (i = n.contract_info) || void 0 === i
                          ? void 0
                          : i.buy_price) || 0) +
                          1
                      );
                    },
                    message: (0, a.NC)(
                      "Invalid stop loss. Stop loss cannot be more than stake."
                    ),
                  },
                ],
              ],
            },
            contract_update_take_profit: {
              rules: [
                [
                  "req",
                  {
                    condition: (e) => !e.contract_update_take_profit,
                    message: (0, a.NC)("Please enter a take profit amount."),
                  },
                ],
                [
                  "custom",
                  {
                    func: (e, t, n) => {
                      let a = (0, i.vMw)(n.contract_info);
                      return !(a > 0 && +e < a);
                    },
                    message: (0, a.NC)(
                      "Please enter a take profit amount that's higher than the current potential profit."
                    ),
                  },
                ],
              ],
            },
          });
      },
      49985: function (e, t, n) {
        "use strict";
        n.d(t, {
          y: function () {
            return i;
          },
        });
        let i = Object.freeze({
          TAB_LOCAL: "local_tab",
          TAB_GOOGLE: "google_tab",
          TAB_RECENT: "recent_tab",
        });
      },
      68853: function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            STRATEGY_1_3_2_6: () => c,
            MARTINGALE: () => s,
            OSCARS_GRIND: () => r,
            D_ALEMBERT: () => o,
            REVERSE_D_ALEMBERT: () => l,
            REVERSE_MARTINGALE: () => d,
          });
        var i = n("21995"),
          a = n("48059");
        let o = () => [
            {
              type: "subtitle",
              content: [
                (0, a.NC)("Exploring the D’Alembert strategy in Oruchotrader"),
              ],
              expanded: !0,
              no_collapsible: !1,
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The D'Alembert strategy involves increasing your stake after a losing trade and reducing it after a successful trade by a predetermined number of units."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Key parameters")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "These are the trade parameters used for D’Alembert strategy in Oruchotrader."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Unit:</strong> The number of units that are added in the event of a trade resulting in loss or the number of units removed in the event of a trade resulting in profit. For example, if the unit is set at 2, the stake increases or decreases by two times the initial stake of 1 USD, meaning it changes by 2 USD."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("An example of D’Alembert strategy")],
            },
            {
              type: "media",
              src: (0, i.oY)("dalembert.svg"),
              alt: (0, a.NC)("An example of D’Alembert strategy"),
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "1. Start with the initial stake. In this example, we’ll use 1 USD."
                ),
                (0, a.NC)(
                  "2. Set your preferred unit. In this example, it is 2 units or 2 USD."
                ),
                (0, a.NC)(
                  "3. If the first trade results in profit, the stake for the following trade will not reduce but remain at the initial stake. The strategy minimally trades at the initial stake of 1 USD. See A1."
                ),
                (0, a.NC)(
                  "4. If the second trade results in a loss, the Oruchotrader will automatically increase your stake for the next trade by 2 USD. Oruchotrader will continue to add 2 USD to the previous round’s stake after every losing trade. See A2."
                ),
                (0, a.NC)(
                  "5. If the next trades are profitable, the stake for the following trade will be reduced by 2 USD. This can be shown above where the stake of 3 USD is reduced to 1 USD. See A3."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Profit and loss thresholds")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "With Oruchotrader, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss thresholds are reached. It's a form of risk management that can potentially enhance returns. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Estimating the lifespan of your trades")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The D’Alembert strategy is less risky than Martingale, but you can still determine how long your funds will last with this strategy before trading. Simply use this formula."
                ),
              ],
            },
            {
              type: "media",
              src: (0, i.oY)("dalembert_formula_1.svg"),
              dark_src: (0, i.oY)("dalembert_formula_dark_1.svg"),
              alt: (0, a.NC)("D’Alembert formula 1"),
              className: "formula",
              styles: { height: "6rem" },
            },
            {
              type: "text",
              content: [
                (0, a.NC)("Where:"),
                (0, a.NC)(
                  "R is the number of rounds a trader can sustain given a specific loss threshold."
                ),
                (0, a.NC)("B is the loss threshold."),
                (0, a.NC)("s is the initial stake."),
                (0, a.NC)("f is the unit increment."),
              ],
              className: "no-margin",
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "For instance, if a trader has a loss threshold (B) of 100 USD, with an initial stake (s) of 1 USD and 2 units of increment (f), the calculation would be as follows:"
                ),
              ],
              className: "top-margin",
            },
            {
              type: "media",
              src: (0, i.oY)("dalembert_formula_2.svg"),
              dark_src: (0, i.oY)("dalembert_formula_dark_2.svg"),
              alt: (0, a.NC)("D’Alembert formula 2"),
              className: "formula",
              styles: { height: "6rem" },
            },
            { type: "text", content: [(0, a.NC)("Number of rounds (R) = 10")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "This means after 10 rounds of consecutive losses, this trader will lose 100 USD. This reaches the loss threshold of 100 USD, stopping the bot."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "This formula helps you plan your trades by considering the amount of money you have and your comfort level with risk. It involves determining your loss threshold and the initial stake you want to trade with. Then, you use this formula to calculate the number of rounds you can trade. This process provides insight into stake sizing and expectations."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Summary")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The D'Alembert system offers more balanced trading through controlled stake progression. With prudent risk management like stake limits, it can be effectively automated in Oruchotrader. However, traders should thoroughly assess their risk appetite, test strategies on a demo account to align with their trading style before trading with real money. This allows optimising the approach and striking a balance between potential gains and losses whilst managing risk."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [(0, a.NC)("<strong>Disclaimer:</strong>")],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities."
                ),
              ],
            },
          ],
          s = () => [
            {
              type: "subtitle",
              content: [
                (0, a.NC)("Exploring the Martingale strategy in Oruchotrader"),
              ],
              expanded: !0,
              no_collapsible: !1,
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Martingale strategy involves increasing your stake after each loss to recoup prior losses with a single successful trade."
                ),
                (0, a.NC)(
                  "This article explores the Martingale strategy integrated into Oruchotrader, a versatile trading bot designed to trade assets such as forex, commodities, and derived indices. We will delve into the strategy's core parameters, its application, and provide essential takeaways for traders looking to use the bot effectively."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Key parameters")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "These are the trade parameters used in Oruchotrader with Martingale strategy."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Multiplier:</strong> The multiplier used to increase your stake if you're losing a trade. The value must be greater than 1."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Maximum stake:</strong> The maximum amount you are willing to pay to enter a single trade. The stake for your next trade will reset to the initial stake if it exceeds this value. This is an optional risk management parameter."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("An example of Martingale strategy")],
            },
            {
              type: "media",
              src: (0, i.oY)("martingale.svg"),
              alt: (0, a.NC)("An example of Martingale strategy"),
            },
            {
              type: "text",
              content: [
                (0, a.NC)("1. Start with the initial stake. Let’s say 1 USD."),
                (0, a.NC)(
                  "2. Select your Martingale multiplier. In this example, it is 2."
                ),
                (0, a.NC)(
                  "3. If the first trade ends in a loss, Oruchotrader will automatically double your stake for the next trade to 2 USD. Oruchotrader will continue to double the stake after every losing trade."
                ),
                (0, a.NC)(
                  "4. If a trade ends in a profit, the stake for the following trade will be reset to the initial stake amount of 1 USD."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The idea is that successful trades may recoup previous losses. However, it is crucial to exercise caution as the risk can quickly increase with this strategy. With Oruchotrader, you can minimise your risk by setting a maximum stake. This is an optional risk management feature. Let’s say a maximum stake of 3 USD. If your stake for the next trade is set to exceed 3 USD, your stake will reset to the initial stake of 1 USD. If you didn't set a maximum stake, it would have increased beyond 3 USD."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Profit and loss thresholds")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "With Oruchotrader, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss thresholds are reached. It's a form of risk management that can potentially enhance returns. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Estimating the lifespan of your trades")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "If you're about to start trading and haven't established a Maximum Stake as part of your risk management strategy, you can determine how long your funds will last by employing the Martingale strategy. Simply use this formula."
                ),
              ],
            },
            {
              type: "media",
              src: (0, i.oY)("martingale_formula_1.svg"),
              dark_src: (0, i.oY)("martingale_formula_dark_1.svg"),
              alt: (0, a.NC)("Martingale formula 1"),
              className: "formula",
              styles: { height: "6.5rem" },
            },
            {
              type: "text",
              content: [
                (0, a.NC)("Where:"),
                (0, a.NC)(
                  "R is the number of rounds a trader can sustain given a specific loss threshold."
                ),
                (0, a.NC)("B is the loss threshold."),
                (0, a.NC)("s is the initial stake."),
                (0, a.NC)("m is the Martingale multiplier."),
              ],
              className: "no-margin",
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "For instance, if a trader has a loss threshold (B) is 1000 USD, with an initial stake (s) is 1 USD, and the Martingale multiplier (m) is 2, the calculation would be as follows:"
                ),
              ],
              className: "top-margin",
            },
            {
              type: "media",
              src: (0, i.oY)("martingale_formula_2.svg"),
              dark_src: (0, i.oY)("martingale_formula_dark_2.svg"),
              alt: (0, a.NC)("Martingale formula 2"),
              className: "formula",
              styles: { height: "6.5rem" },
            },
            {
              type: "text",
              content: [
                (0, a.NC)("Number of rounds, R ≈ 9.965"),
                (0, a.NC)(
                  "This means that after 10 rounds of consecutive losses, this trader will lose 1023 USD which exceeds the loss threshold of 1000 USD, stopping the bot."
                ),
                (0, a.NC)(
                  "This formula helps you plan your trades by considering the amount of money you have and your comfort level with risk. It involves determining your loss threshold and the initial stake you want to trade with. Then, you use this formula to calculate the number of rounds you can trade. This process provides insight into stake sizing and expectations."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Summary")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Martingale strategy in trading may offer substantial gains but also comes with significant risks. With your selected strategy, Oruchotrader provides automated trading with risk management measures like setting initial stake, stake size, maximum stake, profit threshold and loss threshold. It's crucial for traders to assess their risk tolerance, practice in a demo account, and understand the strategy before trading with real money."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [(0, a.NC)("<strong>Disclaimer:</strong>")],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities."
                ),
              ],
            },
          ],
          r = () => [
            {
              type: "subtitle",
              content: [
                (0, a.NC)(
                  "Exploring the Oscar’s Grind strategy in Oruchotrader"
                ),
              ],
              expanded: !0,
              no_collapsible: !1,
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Oscar’s Grind strategy is designed to potentially gain a modest yet steady profit in each trading session. This strategy splits trades into sessions and has three principles."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Key parameters")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "These are the trade parameters used for Oscar’s Grind strategy in Oruchotrader."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("An example of Oscar’s Grind strategy")],
            },
            {
              type: "media",
              src: (0, i.oY)("oscars_grind.png"),
              alt: (0, a.NC)("An example of Oscar’s Grind strategy"),
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Principle 1: Strategy aims to potentially make one unit of profit per session</strong>"
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The table above demonstrates this principle by showing that when a successful trade occurs and meets the target of one unit of potential profit which is 1 USD in this example, the session ends. If trading continues, a new session will begin."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Principle 2: The stake only increases when a loss trade is followed by a successful trade</strong>"
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The table illustrates this principle in the second session. After a trade resulting in loss in round 4 followed by a successful trade in round 5, the stake will increase to 2 USD for round 6. This is in line with the strategy's rule of raising the stake only after a loss is followed by a successful trade."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Principle 3: The stake adjusts to the gap size between current loss and the target profit for the session</strong>"
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "In round 7, the stake is adjusted downwards from 2 USD to 1 USD, to meet the target profit of 1 USD."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The stake adjustment: target session profit (1 USD) - current session profit (0 USD) = 1 USD"
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The second session concludes upon reaching the aim of one unit of potential profit per session, equivalent to 1 USD. If trading continues, a new session will commence again."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Profit and loss thresholds")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "With Oruchotrader, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Summary")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Oscar's Grind strategy provides a disciplined approach for incremental gains through systematic stake progression. When integrated into Oruchotrader with proper risk management like profit or loss thresholds, it offers traders a potentially powerful automated trading technique. However, traders should first thoroughly assess their risk tolerance and first try trading on a demo account in order to familiarise with the strategy before trading with real funds."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [(0, a.NC)("<strong>Disclaimer:</strong>")],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities."
                ),
              ],
            },
          ],
          l = () => [
            {
              type: "subtitle",
              content: [
                (0, a.NC)(
                  "Exploring the Reverse D’Alembert strategy in Oruchotrader"
                ),
              ],
              expanded: !0,
              no_collapsible: !1,
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Reverse D'Alembert strategy involves increasing your stake after a successful trade and reducing it after a losing trade by a predetermined number of units."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Key parameters")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "These are the trade parameters used in Oruchotrader with Reverse D’Alembert strategy."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Unit:</strong> The number of units that are added in the event of successful trades or the number of units removed in the event of losing trades. For example, if the unit is set at 2, the stake increases or decreases by two times the initial stake of 1 USD, meaning it changes by 2 USD."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("An example of Reverse D’Alembert strategy")],
            },
            {
              type: "media",
              src: (0, i.oY)("reverse_dalembert.svg"),
              alt: (0, a.NC)("An example of Reverse D’Alembert strategy"),
            },
            {
              type: "text",
              content: [
                (0, a.NC)("1. Start with the initial stake. Let’s say 1 USD."),
                (0, a.NC)(
                  "2. Select your unit. In this example, it is 2 units or 2 USD."
                ),
                (0, a.NC)(
                  "3. For trades that result in a profit, the stake for the next trade will be increased by 2 USD. Oruchotrader will continue to add 2 USD for every successful trade. See A1."
                ),
                (0, a.NC)(
                  "4. For trades that result in a loss, there are two outcomes.  If it was traded at the initial stake, the next trade will remain at the same amount as the strategy trades minimally at the initial stake, see A2. If it was traded with a higher amount, the stake for the next trade would be reduced by 2 USD, see A3."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Profit and loss thresholds")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "With Oruchotrader, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Summary")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "Effective trading with the D'Alembert system requires careful consideration of its stake progression and risk management. Traders can automate this approach using Oruchotrader, setting profit and loss thresholds to ensure balanced and controlled trading. However, it is crucial for traders to assess their risk appetite, test strategies on a demo account, and align with their own trading style before transitioning to real money trading. This optimization process helps strike a balance between potential gains and losses while managing risk prudently."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [(0, a.NC)("<strong>Disclaimer:</strong>")],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD  profit in successful trades."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities."
                ),
              ],
            },
          ],
          d = () => [
            {
              type: "subtitle",
              content: [
                (0, a.NC)(
                  "Exploring the Reverse Martingale strategy in Oruchotrader"
                ),
              ],
              expanded: !0,
              no_collapsible: !1,
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Reverse Martingale strategy involves increasing your stake after each successful trade and resets to the initial stake for every losing trade as it aims to secure potential profits from consecutive wins."
                ),
                (0, a.NC)(
                  "This article explores the Reverse Martingale strategy integrated into Oruchotrader, a versatile trading bot designed to trade assets such as forex, commodities, and derived indices. We will delve into the strategy's core parameters, its application, and provide essential takeaways for traders looking to use the bot effectively."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Key parameters")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "These are the trade parameters used in Oruchotrader with Reverse Martingale strategy."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Multiplier:</strong> The multiplier used to increase your stake if your trade is successful. The value must be greater than 1."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Maximum stake:</strong> The maximum amount you are willing to pay to enter a single trade. The stake for your next trade will reset to the initial stake if it exceeds this value. This is an optional risk management parameter."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("An example of Reverse Martingale strategy")],
            },
            {
              type: "media",
              src: (0, i.oY)("reverse_martingale.svg"),
              alt: (0, a.NC)("An example of Martingale strategy"),
            },
            {
              type: "text",
              content: [
                (0, a.NC)("1. Start with the initial stake. Let’s say 1 USD."),
                (0, a.NC)(
                  "2. Select your Martingale multiplier. In this example, it is 2."
                ),
                (0, a.NC)(
                  "3. If the first trade is a successful trade, Oruchotrader will automatically double your stake for the next trade to 2 USD. Oruchotrader will continue to double the stake after every successful trade."
                ),
                (0, a.NC)(
                  "4. If a trade ends in a loss, the stake for the following trade will be reset to the initial stake amount of 1 USD."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The objective of Martingale strategy is to take advantage of consecutive successful trades and maximise potential profits from them. This strategy is beneficial only if there are consecutive successful trades. Therefore, it is important to set a maximum stake to secure all the potential profits gained from a number of consecutive successful trades, or you could lose all the profits you have accumulated, including your initial stake. For example, if your goal is to maximise profits within 2 consecutive successful trades, you set a maximum stake of 2 USD, given your initial stake is 1 USD. Similarly, if your goal is to maximise profits within 3 consecutive successful trades, you set a maximum stake of 4 USD, given your initial stake is 1 USD."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Profit and loss thresholds")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "With Oruchotrader, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Summary")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The Reverse Martingale strategy in trading may offer substantial gains but also comes with significant risks. With your selected strategy, Oruchotrader provides automated trading with risk management measures like setting initial stake, stake size, maximum stake, profit threshold and loss threshold. It's crucial for traders to assess their risk tolerance, practice in a demo account, and understand the strategy before trading with real money."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [(0, a.NC)("<strong>Disclaimer:</strong>")],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities."
                ),
              ],
            },
          ],
          c = () => [
            {
              type: "subtitle",
              content: [
                (0, a.NC)("Exploring the 1-3-2-6 strategy in Oruchotrader"),
              ],
              expanded: !0,
              no_collapsible: !1,
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The 1-3-2-6 strategy aims to maximise potential profits with four consecutive successful trades. One unit is equal to the amount of the initial stake. The stake will adjust from 1 unit to 3 units after the first successful trade, then to 2 units after your second successful trade, and to 6 units after the third successful trade. The stake for the next trade will reset to the initial stake if there is a losing trade or a completion of the trade cycle."
                ),
                (0, a.NC)(
                  "This article explores the strategy integrated into Oruchotrader, a versatile trading bot designed to trade assets such as Forex, Commodities, and Derived Indices. We will delve into the strategy's core parameters, its application, and provide essential takeaways for traders looking to use the bot effectively."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Key parameters")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "These are the trade parameters used in Oruchotrader with 1-3-2-6 strategy."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Initial stake:</strong> The amount that you are willing to place as a stake to enter a trade. This is the starting point for any changes in stake depending on the dynamic of the strategy being used."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Profit threshold:</strong> The bot will stop trading if your total profit exceeds this amount."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "<strong>Loss threshold:</strong> The bot will stop trading if your total loss exceeds this amount."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("An example of 1-3-2-6 strategy")],
            },
            {
              type: "media",
              src: (0, i.oY)("1-3-2-6.svg"),
              alt: (0, a.NC)("An example of 1-3-2-6 strategy"),
            },
            {
              type: "text",
              content: [
                (0, a.NC)("1. Start with the initial stake. Let’s say 1 USD."),
                (0, a.NC)(
                  "2. If the trade is successful, this strategy will automatically adjust your stake to 3 units of your initial stake for the next trade. In this case, the stake adjustment is 3 units and the initial stake is 1 USD, hence the next trade will start at 3 USD."
                ),
                (0, a.NC)(
                  "3. If the second trade is also successful, your stake will adjust to 2 USD or 2 units of the initial stake for the next trade."
                ),
                (0, a.NC)(
                  "4. However, if any trade results in a loss, your stake will reset back to the initial stake of 1 USD for the next trade. The third trade results in a loss hence the stake resets to the initial stake of 1 USD for the next trade."
                ),
                (0, a.NC)(
                  "5. Upon reaching the initial stake, if the next trade still results in a loss, your stake will remain at the initial stake of 1 USD. This strategy will minimally trade at the initial stake. Refer to the fourth and fifth trade."
                ),
                (0, a.NC)(
                  "6. If consecutive successful trades were to happen, the stake would follow a sequence of adjustment from 1 to 3, then 2, and 6 units of initial stake. After 4 consecutive successful trades, it completes one cycle and then the strategy will repeat itself for another cycle. If any trade results in a loss, your stake will reset back to the initial stake for the next trade."
                ),
              ],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The 1-3-2-6 strategy is designed to capitalise on consecutive successful trades while minimising losses during losing streaks. The rationale behind this strategy lies in statistical probabilities, with adjustments to stake sizes based on the perceived likelihood of success. There is a higher likelihood of success in the second trade after one successful trade. Hence the stake adjusts to 3 in the second trade. In the third trade, the stake adjusts to 2 units due to a lower probability of a successful trade. If the third trade is also successful, the strategy then allocates all the previous gains (a total of 6 units of initial stake) into the fourth trade with the aim of doubling the potential profits. If the fourth trade results in a positive outcome, the strategy helps achieve a total gain of 12 units. However, it is crucial to exercise caution, as the risk can escalate quickly with this strategy, and any loss in the fourth trade forfeits all previous gains."
                ),
              ],
            },
            {
              type: "subtitle",
              content: [(0, a.NC)("Profit and loss thresholds")],
            },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "With Oruchotrader, traders can set the profit and loss thresholds to secure potential profits and limit potential losses. This means that the trading bot will automatically stop when either the profit or loss threshold is reached. This is a form of risk management that can potentially boost successful trades whilst limiting the impact of loss. For example, if a trader sets the profit threshold at 100 USD and the strategy exceeds 100 USD of profit from all trades, then the bot will stop running."
                ),
              ],
            },
            { type: "subtitle", content: [(0, a.NC)("Summary")] },
            {
              type: "text",
              content: [
                (0, a.NC)(
                  "The 1-3-2-6 strategy in trading may offer substantial gains but also comes with significant risks. Each stake is independent, and the strategy does not increase your chances of successful trades in the long run. If you encounter a series of losses, the strategy can lead to significant losses. Therefore, it is crucial for traders to assess their risk tolerance, practice in a demo account, utilise profit and loss thresholds, and fully comprehend the strategy before engaging in real-money trading."
                ),
              ],
            },
            {
              type: "text_italic",
              content: [(0, a.NC)("<strong>Disclaimer:</strong>")],
            },
            {
              type: "text_italic",
              content: [
                (0, a.NC)(
                  "Please be aware that while we may use rounded figures for illustration, a stake of a specific amount does not guarantee an exact amount in successful trades. For example, a 1 USD stake does not necessarily equate to a 1 USD profit in successful trades."
                ),
                (0, a.NC)(
                  "Trading inherently involves risks, and actual profits can fluctuate due to various factors, including market volatility and other unforeseen variables. As such, exercise caution and conduct thorough research before engaging in any trading activities."
                ),
              ],
            },
          ];
      },
      33690: function (e, t, n) {
        "use strict";
        n.d(t, {
          i: function () {
            return i;
          },
        });
        let i = Object.freeze({ CONTRACT: "contract", DIVIDER: "divider" });
      },
      47962: function (e, t, n) {
        "use strict";
        n.d(t, {
          G: function () {
            return o;
          },
          v: function () {
            return s;
          },
        });
        var i = n(48059);
        let a = ["BTC", "ETH", "LTC", "BCH", "UST"],
          o = {
            digit_list: [],
            pip_size: 0,
            active_symbol: "",
            other_symbol: { isActive: !1, symbol: "" },
            show_notifications: { show_tp: !1, show_sl: !1 },
            pred_setter: { prediction: "0", allow_pred_setter: !1 },
            contract_switcher: { contract_switcher_value: "disable" },
            custom_variables: { isApolloBots: !1 },
            copy_trading: { is_active: !1 },
            demo_copy_trading: { is_active: !1, login_id: "" },
            vh_variables: {
              other_oauth: !1,
              vh_official: !1,
              martingale: 1,
              token: "",
              max_steps: 1,
              min_trades: 1,
              take_profit: 8,
              stop_loss: 20,
              is_authorized: !1,
              is_enabled: !1,
              stake: 0.35,
              current_step: 1,
              current_trades_real: 0,
              is_martingale_active: !1,
              mart_total_lost: 0,
              allow_martingale: !1,
              mart_stake: 0,
              total_loss: 0,
              enable_total_lost: !1,
              market_analysis: !1,
              shouldUseVHMartingale: !1,
            },
            analysis_vars: {
              tick_list: [],
              sub_id: "",
              last_digit: 0,
              current_tick: "...",
              symbol_list: [],
              subscribed: !1,
            },
            touch_notouch_vars: {
              barrier_offset: 0,
              barrier_offset_active: !1,
              official_offseter: !1,
            },
          },
          s = () => ({
            lists: {
              PAYOUTTYPE: [[(0, i.NC)("Stake"), "stake"]],
              CRYPTO_CURRENCIES: a,
              DETAILS: [
                [(0, i.NC)("deal reference id"), "1"],
                [(0, i.NC)("purchase price"), "2"],
                [(0, i.NC)("payout"), "3"],
                [(0, i.NC)("profit"), "4"],
                [(0, i.NC)("contract type"), "5"],
                [(0, i.NC)("entry spot time"), "6"],
                [(0, i.NC)("entry spot price"), "7"],
                [(0, i.NC)("exit spot time"), "8"],
                [(0, i.NC)("exit spot price"), "9"],
                [(0, i.NC)("barrier"), "10"],
                [(0, i.NC)("result"), "11"],
              ],
              CHECK_RESULT: [
                [(0, i.NC)("Win"), "win"],
                [(0, i.NC)("Loss"), "loss"],
              ],
              CHECK_DIRECTION: [
                [(0, i.NC)("Rise"), "rise"],
                [(0, i.NC)("Fall"), "fall"],
                [(0, i.NC)("No Change"), ""],
              ],
              BALANCE_TYPE: [
                [(0, i.NC)("string"), "STR"],
                [(0, i.NC)("number"), "NUM"],
              ],
              NOTIFICATION_TYPE: [
                [(0, i.NC)("green"), "success"],
                [(0, i.NC)("blue"), "info"],
                [(0, i.NC)("yellow"), "warn"],
                [(0, i.NC)("red"), "error"],
              ],
              NOTIFICATION_SOUND: [
                [(0, i.NC)("Silent"), "silent"],
                [(0, i.NC)("Announcement"), "announcement"],
                [(0, i.NC)("Earned money"), "earned-money"],
                [(0, i.NC)("Job done"), "job-done"],
                [(0, i.NC)("Error"), "error"],
                [(0, i.NC)("Severe error"), "severe-error"],
              ],
              CURRENCY: ["USD", "EUR", "GBP", "AUD", ...a],
            },
            opposites: {
              ACCUMULATOR: [{ ACCU: (0, i.NC)("Buy") }],
              MULTIPLIER: [
                { MULTUP: (0, i.NC)("Up") },
                { MULTDOWN: (0, i.NC)("Down") },
              ],
              CALLPUT: [
                { CALL: (0, i.NC)("Rise") },
                { PUT: (0, i.NC)("Fall") },
              ],
              CALLPUTEQUAL: [
                { CALLE: (0, i.NC)("Rise Equals") },
                { PUTE: (0, i.NC)("Fall Equals") },
              ],
              HIGHERLOWER: [
                { CALL: (0, i.NC)("Higher") },
                { PUT: (0, i.NC)("Lower") },
              ],
              TOUCHNOTOUCH: [
                { ONETOUCH: (0, i.NC)("Touch") },
                { NOTOUCH: (0, i.NC)("No Touch") },
              ],
              ENDSINOUT: [
                { EXPIRYRANGE: (0, i.NC)("Ends Between") },
                { EXPIRYMISS: (0, i.NC)("Ends Outside") },
              ],
              STAYSINOUT: [
                { RANGE: (0, i.NC)("Stays Between") },
                { UPORDOWN: (0, i.NC)("Goes Outside") },
              ],
              ASIANS: [
                { ASIANU: (0, i.NC)("Asian Up") },
                { ASIAND: (0, i.NC)("Asian Down") },
              ],
              MATCHESDIFFERS: [
                { DIGITMATCH: (0, i.NC)("Matches") },
                { DIGITDIFF: (0, i.NC)("Differs") },
              ],
              EVENODD: [
                { DIGITEVEN: (0, i.NC)("Even") },
                { DIGITODD: (0, i.NC)("Odd") },
              ],
              OVERUNDER: [
                { DIGITOVER: (0, i.NC)("Over") },
                { DIGITUNDER: (0, i.NC)("Under") },
              ],
              HIGHLOWTICKS: [
                { TICKHIGH: (0, i.NC)("High Tick") },
                { TICKLOW: (0, i.NC)("Low Tick") },
              ],
              RESET: [
                { RESETCALL: (0, i.NC)("Reset Call") },
                { RESETPUT: (0, i.NC)("Reset Put") },
              ],
              RUNS: [
                { RUNHIGH: (0, i.NC)("Only Ups") },
                { RUNLOW: (0, i.NC)("Only Downs") },
              ],
              CALLPUTSPREAD: [
                { CALLSPREAD: (0, i.NC)("Call Spread") },
                { PUTSPREAD: (0, i.NC)("Put Spread") },
              ],
            },
            BARRIER_TYPES: [
              ["Offset +", "+"],
              ["Offset -", "-"],
            ],
            ohlcFields: [
              [(0, i.NC)("Open"), "open"],
              [(0, i.NC)("High"), "high"],
              [(0, i.NC)("Low"), "low"],
              [(0, i.NC)("Close"), "close"],
              [(0, i.NC)("Open Time"), "epoch"],
            ],
            candleIntervals: [
              [(0, i.NC)("Default"), "default"],
              [(0, i.NC)("1 minute"), "60"],
              [(0, i.NC)("2 minutes"), "120"],
              [(0, i.NC)("3 minutes"), "180"],
              [(0, i.NC)("5 minutes"), "300"],
              [(0, i.NC)("10 minutes"), "600"],
              [(0, i.NC)("15 minutes"), "900"],
              [(0, i.NC)("30 minutes"), "1800"],
              [(0, i.NC)("1 hour"), "3600"],
              [(0, i.NC)("2 hours"), "7200"],
              [(0, i.NC)("4 hours"), "14400"],
              [(0, i.NC)("8 hours"), "28800"],
              [(0, i.NC)("1 day"), "86400"],
            ],
            mainBlocks: [
              "trade_definition",
              "before_purchase",
              "during_purchase",
              "after_purchase",
            ],
            mandatoryMainBlocks: [
              "trade_definition",
              "purchase",
              "before_purchase",
            ],
            procedureDefinitionBlocks: [
              "procedures_defnoreturn",
              "procedures_defreturn",
            ],
            single_instance_blocks: [
              "trade_definition",
              "before_purchase",
              "during_purchase",
              "after_purchase",
            ],
            TRADE_TYPE_TO_CONTRACT_CATEGORY_MAPPING: {
              callput: ["callput", "higherlower"],
              asian: ["asians"],
              digits: ["matchesdiffers", "evenodd", "overunder"],
            },
            TRADE_TYPE_CATEGORIES: {
              multiplier: ["multiplier"],
              callput: ["callput", "callputequal", "higherlower"],
              touchnotouch: ["touchnotouch"],
              inout: ["endsinout", "staysinout"],
              asian: ["asians"],
              digits: ["matchesdiffers", "evenodd", "overunder"],
              reset: ["reset"],
              callputspread: ["callputspread"],
              highlowticks: ["highlowticks"],
              runs: ["runs"],
              accumulator: ["accumulator"],
            },
            TRADE_TYPE_CATEGORY_NAMES: {
              callput: (0, i.NC)("Up/Down"),
              touchnotouch: (0, i.NC)("Touch/No Touch"),
              inout: (0, i.NC)("In/Out"),
              asian: (0, i.NC)("Asians"),
              digits: (0, i.NC)("Digits"),
              reset: (0, i.NC)("Reset Call/Reset Put"),
              callputspread: (0, i.NC)("Call Spread/Put Spread"),
              highlowticks: (0, i.NC)("High/Low Ticks"),
              runs: (0, i.NC)("Only Ups/Only Downs"),
              multiplier: (0, i.NC)("Multipliers"),
              accumulator: (0, i.NC)("Accumulators"),
            },
            BARRIER_CATEGORIES: {
              euro_atm: ["callput", "callputequal"],
              euro_non_atm: ["endsinout", "higherlower", "callputspread"],
              american: [
                "staysinout",
                "touchnotouch",
                "highlowticks",
                "runs",
                "multiplier",
              ],
              non_financial: [
                "digits",
                "overunder",
                "evenodd",
                "matchesdiffers",
              ],
              asian: ["asians"],
              reset: ["reset"],
              lookback: ["lookback"],
              accumulator: ["accumulator"],
            },
            DEFAULT_DURATION_DROPDOWN_OPTIONS: [
              [(0, i.NC)("Ticks"), "t"],
              [(0, i.NC)("Seconds"), "s"],
              [(0, i.NC)("Minutes"), "m"],
              [(0, i.NC)("Hours"), "h"],
              [(0, i.NC)("Days"), "d"],
            ],
            BARRIER_LABELS: [
              (0, i.NC)("High barrier"),
              (0, i.NC)("Low barrier"),
            ],
            ABSOLUTE_BARRIER_DROPDOWN_OPTION: [
              [(0, i.NC)("Absolute"), "absolute"],
            ],
            NOT_AVAILABLE_DROPDOWN_OPTIONS: [
              [(0, i.NC)("Not available"), "na"],
            ],
            NOT_AVAILABLE_DURATIONS: [
              { display: (0, i.NC)("Not available"), unit: "na", min: 0 },
            ],
            BARRIER_TRADE_TYPES: [
              "higherlower",
              "touchnotouch",
              "endsinout",
              "staysinout",
              "callputspread",
            ],
            PREDICTION_TRADE_TYPES: [
              "matchesdiffers",
              "overunder",
              "highlowticks",
            ],
            DIGIT_CATEGORIES: ["digits", "highlowticks"],
            INDEPEDENT_BLOCKS: [
              "block_holder",
              "tick_analysis",
              "loader",
              "procedures_defreturn",
              "procedures_defnoreturn",
            ],
            bbResult: [
              [(0, i.NC)("upper"), "1"],
              [(0, i.NC)("middle"), "0"],
              [(0, i.NC)("lower"), "2"],
            ],
            macdFields: [
              [(0, i.NC)("Histogram"), "0"],
              [(0, i.NC)("MACD"), "1"],
              [(0, i.NC)("Signal"), "2"],
            ],
            GOOGLE_DRIVE: {
              SCOPE: "https://www.googleapis.com/auth/drive.file",
              DISCOVERY_DOCS:
                "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest",
            },
            workspaces: {
              flyoutWorkspacesStartScale: 0.7,
              mainWorkspaceStartScale: 0.9,
              previewWorkspaceStartScale: 0.6,
              indentWorkspace: { x: 0, y: 60 },
            },
            strategies: {
              martingale: {
                index: 0,
                label: (0, i.NC)("Martingale"),
                description: (0, i.NC)(
                  "The Martingale Strategy is a classic trading technique that has been used for more than a hundred years, popularised by the French mathematician Paul Pierre Levy in the 18th century."
                ),
              },
              dalembert: {
                index: 1,
                label: (0, i.NC)("D'Alembert"),
                description: (0, i.NC)(
                  "The concept of the D’Alembert Strategy is said to be similar to the Martingale Strategy where you will increase your contract size after a loss. With the D’Alembert Strategy, you will also decrease your contract size after a successful trade."
                ),
              },
              oscars_grind: {
                index: 2,
                label: (0, i.NC)("Oscar's Grind"),
                description: (0, i.NC)(
                  "The Oscar's Grind Strategy is a low-risk positive progression strategy that first appeared in 1965. By using this strategy, the size of your contract will increase after successful trades, but remains unchanged after unsuccessful trades."
                ),
              },
            },
            default_file_name: (0, i.NC)("Untitled Bot"),
            DISABLED_SYMBOLS: [
              "frxGBPNOK",
              "frxUSDNOK",
              "frxUSDNEK",
              "frxUSDSEK",
            ],
            DISABLED_SUBMARKETS: ["energy"],
            QUICK_STRATEGY: {
              DISABLED: {
                SYMBOLS: ["1HZ150V", "1HZ250V"],
                SUBMARKETS: ["crash_index", "non_stable_coin", "step_index"],
                BARRIER_TRADE_TYPES: [
                  "higherlower",
                  "touchnotouch",
                  "endsinout",
                  "staysinout",
                  "callputspread",
                  "accumulator",
                ],
                PREDICTION_TRADE_TYPES: ["highlowticks"],
              },
              DEFAULT: {
                symbol: "1HZ100V",
                tradetype: "callput",
                durationtype: "t",
                size: 1,
                unit: 1,
                prediction: 0,
              },
            },
          });
      },
      87920: function (e, t, n) {
        "use strict";
        n.d(t, {
          GL: function () {
            return i.G;
          },
          Jr: function () {
            return a.Jr;
          },
          Rg: function () {
            return o.R;
          },
          ZB: function () {
            return a.ZB;
          },
          u: function () {
            return a.u;
          },
          v9: function () {
            return a.v9;
          },
          vc: function () {
            return i.v;
          },
        });
        var i = n(47962),
          a = n(51434),
          o = n(30810);
      },
      51434: function (e, t, n) {
        "use strict";
        n.d(t, {
          Jr: function () {
            return i;
          },
          ZB: function () {
            return l;
          },
          u: function () {
            return r;
          },
          v9: function () {
            return d;
          },
        });
        let i = [
          "InsufficientBalance",
          "CustomLimitsReached",
          "OfferingsValidationError",
          "InvalidCurrency",
          "ContractBuyValidationError",
          "NotDefaultCurrency",
          "PleaseAuthenticate",
          "FinancialAssessmentRequired",
          "PositiveIntegerExpected",
          "OptionError",
          "IncorrectPayoutDecimals",
          "IncorrectStakeDecimals",
          "NoMFProfessionalClient",
          "AuthorizationRequired",
          "InvalidToken",
          "DailyLossLimitExceeded",
          "InputValidationFailed",
          "ClientUnwelcome",
          "PriceMoved",
        ];
        var a,
          o,
          s,
          r =
            (((a = {}).ERROR = "error"),
            (a.NOTIFY = "notify"),
            (a.SUCCESS = "success"),
            a);
        var l =
          (((o = {}).RECOVERABLE_ERRORS = "recoverable_errors"),
          (o.UNRECOVERABLE_ERRORS = "unrecoverable_errors"),
          o);
        var d =
          (((s = {}).LOAD_BLOCK = "load_block"),
          (s.PURCHASE = "purchase"),
          (s.SELL = "sell"),
          (s.NOT_OFFERED = "not_offered"),
          (s.PROFIT = "profit"),
          (s.LOST = "lost"),
          (s.WELCOME_BACK = "welcome_back"),
          (s.WELCOME = "welcome"),
          s);
      },
      30810: function (e, t, n) {
        "use strict";
        n.d(t, {
          R: function () {
            return i;
          },
        });
        let i = Object.freeze({
          UNSAVED: "unsaved",
          LOCAL: "local",
          GOOGLE_DRIVE: "google drive",
        });
      },
      88199: function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            extractBlocksFromXml: () => r.mT,
            runGroupedEvents: () => o.UR,
            ServerTime: () => s.Xc,
            MessageTypes: () => i.u,
            api_base3: () => s.hL,
            removeErrorHandlingEventListener: () => r.GZ,
            saveWorkspaceToRecent: () => r.l5,
            sortBlockChild: () => r.X6,
            onWorkspaceResize: () => r.N0,
            removeExistingWorkspace: () => r.lY,
            ActiveSymbols: () => s.E9,
            handleError: () => r.S3,
            save_types: () => i.Rg,
            updateCopyTradingTokens: () => s.YD,
            DBot: () => a.Z,
            load: () => o.zD,
            pipe: () => r.zG,
            save: () => o.a1,
            getSavedWorkspaces: () => r.WN,
            compareXml: () => r.dY,
            config_v1: () => i.GL,
            TradingTimes: () => s.tI,
            retrieveListItem: () => s.Dz,
            getToken: () => s.LP,
            convertStrategyToIsDbot: () => r.Xt,
            NetworkMonitor: () => s.YS,
            deleteItemFromStorage: () => s.Gq,
            getContractTypeName: () => r.ZT,
            importExternal: () => r.Vc,
            initErrorHandlingListener: () => r.tZ,
            api_base: () => s.DO,
            observer: () => r.Pi,
            removeCopyTradingTokens: () => s.Ug,
            dollar_bot_list: () => a.D,
            retrieveCopyTradingTokens: () => s.Yp,
            runIrreversibleEvents: () => o.$9,
            saveListItemToStorage: () => s.an,
            setColors: () => r.Ow,
            newListTokens: () => s.gb,
            trackAndEmitError: () => r.N_,
            reCallTheTokens: () => s.M4,
            updateWorkspaceName: () => o.Hh,
            config: () => i.vc,
            unrecoverable_errors: () => i.Jr,
            ErrorTypes: () => i.ZB,
            ContractsFor: () => s.HP,
            addVirtualAccoutsTrade: () => s.Nk,
            scrollWorkspace: () => o.yW,
            timeSince: () => r.VG,
            createError: () => r.Tr,
            LogTypes: () => i.v9,
            ApiHelpers: () => s.ST,
          });
        var i = n("87920"),
          a = n("78514"),
          o = n("2776"),
          s = n("94915"),
          r = n("94576");
      },
      63999: function (e, t, n) {
        "use strict";
        n.d(t, {
          Gh: function () {
            return r;
          },
          QT: function () {
            return l;
          },
          wd: function () {
            return s;
          },
        });
        var i = n(94915),
          a = n(85872);
        let o = {
            amount: void 0,
            basis: "stake",
            contract_type: "ACCU",
            currency: void 0,
            symbol: void 0,
            growth_rate: void 0,
            proposal: 1,
            subscribe: 1,
          },
          s = async (e) => {
            if (e && !e.is_bot_running) {
              var t;
              await (null === i.DO || void 0 === i.DO
                ? void 0
                : null === (t = i.DO.api) || void 0 === t
                ? void 0
                : t.send({ forget_all: "proposal" })),
                (e.subscription_id_for_accumulators = null),
                (e.is_proposal_requested_for_accumulators = !1),
                (window.Blockly.accumulators_request = {});
            }
          },
          r = (e) => {
            var t, n, i;
            let s = null == e ? void 0 : e.getTopParent(),
              r =
                null == s
                  ? void 0
                  : s.getChildByType("trade_definition_market"),
              l = null == r ? void 0 : r.getFieldValue("SYMBOL_LIST"),
              d = a.Z.instance.client.currency,
              c =
                (null == e ? void 0 : e.getFieldValue("GROWTHRATE_LIST")) ||
                0.01,
              u =
                (null == e
                  ? void 0
                  : null === (i = e.childBlocks_) || void 0 === i
                  ? void 0
                  : null === (n = i[0]) || void 0 === n
                  ? void 0
                  : null === (t = n.getField("NUM")) || void 0 === t
                  ? void 0
                  : t.getValue()) || 0,
              h = { ...o, amount: u, currency: d, symbol: l, growth_rate: c };
            window.Blockly.accumulators_request = h;
          },
          l = (e, t) => {
            let {
                amount: n,
                currency: i,
                symbol: a,
                growth_rate: s,
                limit_order: r,
              } = e,
              { take_profit: l } = r,
              d = {
                ...o,
                amount: n,
                currency: i,
                symbol: a,
                growth_rate: s,
                subscribe: void 0,
                limit_order: { take_profit: l },
              };
            return null == t
              ? void 0
              : t
                  .send(d)
                  .then((e) => (e.error ? Promise.reject(e.error) : e))
                  .catch((e) => {
                    throw e;
                  });
          };
      },
      85872: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return l;
          },
        });
        var i = n(27412),
          a = n(68949),
          o = n(79907);
        class s {
          constructor() {
            (0, i._)(this, "handleFileChange", () => {
              throw Error("handleFileChange has not been implemented.");
            }),
              (0, i._)(this, "toggleStrategyModal", () => {
                throw Error("handleFileChange has not been implemented.");
              });
          }
        }
        class r extends s {
          static setInstance(e) {
            return (this.singleton = new r(e)), this.instance;
          }
          static get instance() {
            return this.singleton;
          }
          constructor(e) {
            super(),
              (this.is_mobile = e.is_mobile || !1),
              (this.is_dark_mode_on = e.is_dark_mode_on || !1),
              (this.client = e.client),
              (this.dashboard = e.dashboard),
              (this.flyout = e.flyout),
              (this.toolbar = e.toolbar),
              (this.toolbox = e.toolbox),
              (this.save_modal = e.save_modal),
              (this.load_modal = e.load_modal),
              (this.setContractUpdateConfig = e.setContractUpdateConfig),
              (this.toggleStrategyModal = e.toggleStrategyModal),
              (this.handleFileChange = e.handleFileChange),
              (this.setLoading = e.setLoading),
              (0, a.U5)(
                () => this.client.loginid,
                () => o.DO.createNewInstance(this.client.loginid)
              );
          }
        }
        (0, i._)(r, "singleton", null);
        let l = r;
      },
      78514: function (e, t, n) {
        "use strict";
        let i, a, o;
        n.d(t, { Z: () => th, D: () => tc });
        var s = n("27412"),
          r = n("87920"),
          l = n("47962"),
          d = n("79907"),
          c = n("13604"),
          u = n("66175");
        let h = (function () {
          let e, t, n;
          function i(e, t) {
            return null != t && e instanceof t;
          }
          try {
            e = Map;
          } catch (t) {
            e = function () {};
          }
          try {
            t = Set;
          } catch (e) {
            t = function () {};
          }
          try {
            n = Promise;
          } catch (e) {
            n = function () {};
          }
          function a(o, r, l, d, c) {
            "object" == typeof r &&
              ((l = r.depth),
              (d = r.prototype),
              (c = r.includeNonEnumerable),
              (r = r.circular));
            let u = [],
              h = [],
              p = "undefined" != typeof Buffer;
            return (
              void 0 === r && (r = !0),
              void 0 === l && (l = 1 / 0),
              (function o(l, m) {
                let _, f;
                if (null === l) return null;
                if (0 === m || "object" != typeof l) return l;
                if (i(l, e)) _ = new e();
                else if (i(l, t)) _ = new t();
                else if (i(l, n))
                  _ = new n(function (e, t) {
                    l.then(
                      function (t) {
                        e(o(t, m - 1));
                      },
                      function (e) {
                        t(o(e, m - 1));
                      }
                    );
                  });
                else if (a.__isArray(l)) _ = [];
                else if (a.__isRegExp(l))
                  (_ = new RegExp(l.source, s(l))),
                    l.lastIndex && (_.lastIndex = l.lastIndex);
                else if (a.__isDate(l)) _ = new Date(l.getTime());
                else {
                  if (p && Buffer.isBuffer(l))
                    return (
                      Buffer.from
                        ? (_ = Buffer.from(l))
                        : ((_ = new Buffer(l.length)), l.copy(_)),
                      _
                    );
                  i(l, Error)
                    ? (_ = Object.create(l))
                    : void 0 === d
                    ? (_ = Object.create((f = Object.getPrototypeOf(l))))
                    : ((_ = Object.create(d)), (f = d));
                }
                if (r) {
                  let e = u.indexOf(l);
                  if (-1 != e) return h[e];
                  u.push(l), h.push(_);
                }
                for (var b in (i(l, e) &&
                  l.forEach(function (e, t) {
                    let n = o(t, m - 1),
                      i = o(e, m - 1);
                    _.set(n, i);
                  }),
                i(l, t) &&
                  l.forEach(function (e) {
                    let t = o(e, m - 1);
                    _.add(t);
                  }),
                l)) {
                  if (Object.getOwnPropertyDescriptor(l, b)) {
                    if (0 > Object.keys(l).indexOf(b)) continue;
                    _[b] = o(l[b], m - 1);
                  }
                  try {
                    let e = Object.getOwnPropertyDescriptor(l, b);
                    if ("undefined" === e.set) continue;
                    _[b] = o(l[b], m - 1);
                  } catch (e) {
                    if (e instanceof TypeError) continue;
                    if (e instanceof ReferenceError) continue;
                  }
                }
                if (Object.getOwnPropertySymbols) {
                  let e = Object.getOwnPropertySymbols(l);
                  for (var b = 0; b < e.length; b++) {
                    let t = e[b];
                    var y = Object.getOwnPropertyDescriptor(l, t);
                    if (!y || !!y.enumerable || !!c)
                      (_[t] = o(l[t], m - 1)), Object.defineProperty(_, t, y);
                  }
                }
                if (c) {
                  let e = Object.getOwnPropertyNames(l);
                  for (var b = 0; b < e.length; b++) {
                    let t = e[b];
                    var y = Object.getOwnPropertyDescriptor(l, t);
                    if (!y || !y.enumerable)
                      (_[t] = o(l[t], m - 1)), Object.defineProperty(_, t, y);
                  }
                }
                return _;
              })(o, l)
            );
          }
          function o(e) {
            return Object.prototype.toString.call(e);
          }
          (a.clonePrototype = function (e) {
            if (null === e) return null;
            let t = function () {};
            return (t.prototype = e), new t();
          }),
            (a.__objToStr = o);
          a.__isDate = function (e) {
            return "object" == typeof e && "[object Date]" === o(e);
          };
          a.__isArray = function (e) {
            return "object" == typeof e && "[object Array]" === o(e);
          };
          function s(e) {
            let t = "";
            return (
              e.global && (t += "g"),
              e.ignoreCase && (t += "i"),
              e.multiline && (t += "m"),
              t
            );
          }
          return (
            (a.__isRegExp = function (e) {
              return "object" == typeof e && "[object RegExp]" === o(e);
            }),
            (a.__getRegExpFlags = s),
            a
          );
        })();
        var p = n("88203"),
          m = n.n(p),
          _ = n("51434"),
          f = n("65464"),
          b = n("71526"),
          y = n("22598"),
          v = n("48059"),
          g = n("50043"),
          k = n("39338");
        let w = (e) => Number.isFinite(e) && e > 0,
          T = (e) => w(e) && Number.isInteger(e),
          C = (e, t) => {
            if (!T(e)) throw (0, g.T)("PositiveIntegerExpected", t);
            return e;
          },
          E = (e) => {
            let { symbol: t, contractTypes: n } = e;
            if (!t)
              throw (0, g.T)(
                "OptionError",
                (0, v.NC)("Underlying market is not selected")
              );
            if (!n[0])
              throw (0, g.T)(
                "OptionError",
                (0, v.NC)("Contract type is not selected")
              );
          },
          N = (e) => {
            let [t, n] = e;
            if (!t) throw (0, g.T)("LoginError", (0, v.NC)("Please login"));
            return E(n), e;
          },
          x = (e) =>
            e instanceof Object &&
            ["open", "high", "low", "close"].every((t) => w(e[t])) &&
            T(e.epoch),
          A = (e) => {
            if (!x(e))
              throw (0, g.T)(
                "CandleExpected",
                (0, v.NC)("Given candle is not valid")
              );
            return e;
          },
          S = (e) => {
            if (!(e instanceof Array) || !e.every((e) => x(e)))
              throw (0, g.T)(
                "CandleListExpected",
                (0, v.NC)("Given candle list is not valid")
              );
            return e;
          },
          O = "BEFORE_PURCHASE",
          I = "DURING_PURCHASE",
          D = "PROPOSALS_READY",
          R = "CLEAR_PROPOSALS",
          L = "PURCHASE_SUCCESSFUL",
          P = "OPEN_CONTRACT",
          B = "SELL",
          U = "START",
          M = "STOP",
          j = "NEW_TICK",
          F = (e) => {
            let { dispatch: t, getState: n, data: i, scope: a } = e,
              { scope: o } = n();
            o === a && t(i);
          },
          V = () => (e, t) =>
            F({ dispatch: e, getState: t, data: { type: U }, scope: M }),
          G = () => ({ type: D }),
          Y = () => ({ type: R }),
          X = (e) => F({ ...e, scope: O }),
          W = (e) => {
            let { getState: t } = e,
              { proposalsReady: n } = t();
            n && X(e), F({ ...e, scope: O });
          },
          H = () => (e, t) =>
            W({ dispatch: e, getState: t, data: { type: L } }),
          $ = () => (e, t) => {
            let { scope: n } = t();
            n === I && e({ type: P }),
              W({ dispatch: e, getState: t, data: { type: P } });
          },
          K = () => (e, t) =>
            F({ dispatch: e, getState: t, data: { type: B }, scope: I }),
          q = { scope: M, proposalsReady: !1 },
          z = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : q,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case U:
                return { scope: O, proposalsReady: e.proposalsReady };
              case D:
                return { ...e, proposalsReady: !0 };
              case R:
                return { ...e, proposalsReady: !1 };
              case L:
                return {
                  scope: I,
                  openContract: !1,
                  proposalsReady: e.proposalsReady,
                };
              case P:
                return {
                  scope: I,
                  openContract: !0,
                  proposalsReady: e.proposalsReady,
                };
              case B:
                return { scope: M, proposalsReady: e.proposalsReady };
              case j:
                return { ...e, newTick: t.payload };
              default:
                return e;
            }
          };
        var J = n("85872"),
          Z = n("21796");
        let Q = "",
          ee = (e) =>
            class t extends e {
              observeBalance() {
                if (!d.DO.api) return;
                let e = d.DO.api.onMessage().subscribe((e) => {
                  let { data: t } = e;
                  if (
                    (null == t ? void 0 : t.msg_type) === "balance" &&
                    (null == t ? void 0 : t.balance)
                  ) {
                    let {
                      balance: { balance: e, currency: n },
                    } = t;
                    (Q = (0, u.drH)(e, n)),
                      this.accountInfo &&
                        (0, Z.um)({
                          accountID: this.accountInfo.loginid,
                          balance: Q,
                        });
                  }
                });
                d.DO.pushSubscription(e);
              }
              getBalance(e) {
                let { client: t } = J.Z.instance,
                  n = (t && t.balance) || 0;
                return (Q = (0, u.drH)(n, t.currency, !1)), "STR" === e ? Q : n;
              }
            },
          et = (e) =>
            class t extends e {
              observeOpenContract() {
                if (!d.DO.api) return;
                let e = d.DO.api.onMessage().subscribe((e) => {
                  let { data: t } = e;
                  if ("proposal_open_contract" === t.msg_type) {
                    let e = t.proposal_open_contract;
                    if (
                      !e ||
                      !this.expectedContractId(
                        null == e ? void 0 : e.contract_id
                      )
                    )
                      return;
                    this.setContractFlags(e),
                      (this.data.contract = e),
                      (0, Z.LJ)({ accountID: d.DO.account_info.loginid, ...e }),
                      this.isSold
                        ? ((this.contractId = ""),
                          clearTimeout(this.transaction_recovery_timeout),
                          this.updateTotals(e),
                          (0, Z.x_)({
                            id: "contract.sold",
                            data: e.transaction_ids.sell,
                            contract: e,
                          }),
                          this.afterPromise && this.afterPromise(),
                          this.store.dispatch(K()))
                        : this.store.dispatch($());
                  }
                });
                d.DO.pushSubscription(e);
              }
              waitForAfter() {
                return new Promise((e) => {
                  this.afterPromise = e;
                });
              }
              setContractFlags(e) {
                let {
                  is_expired: t,
                  is_valid_to_sell: n,
                  is_sold: i,
                  entry_tick: a,
                } = e;
                (this.isSold = !!i),
                  (this.isSellAvailable = !this.isSold && !!n),
                  (this.isExpired = !!t),
                  (this.hasEntryTick = !!a);
              }
              expectedContractId(e) {
                return this.contractId && e === this.contractId;
              }
              getSellPrice() {
                let {
                  bid_price: e,
                  buy_price: t,
                  currency: n,
                } = this.data.contract;
                return (0, u.bfN)(Number(e) - Number(t), n);
              }
            },
          en = (e) =>
            class t extends e {
              makeProposals(e) {
                if (!!this.isNewTradeOption(e))
                  this.regeneratePurchaseReference(),
                    (this.trade_option = e),
                    (this.proposal_templates = (0, k.pH)(
                      e,
                      this.getPurchaseReference()
                    )),
                    this.renewProposalsOnPurchase();
              }
              selectProposal(e) {
                let { proposals: t } = this.data;
                if (0 === t.length)
                  throw Error((0, v.NC)("Proposals are not ready"));
                let n = t.find((t) => {
                  if (
                    t.contract_type === e &&
                    t.purchase_reference === this.getPurchaseReference()
                  ) {
                    if (t.error) throw t.error;
                    return t;
                  }
                  return !1;
                });
                if (!n)
                  throw Error((0, v.NC)("Selected proposal does not exist"));
                return { id: n.id, askPrice: n.ask_price };
              }
              renewProposalsOnPurchase() {
                (this.data.proposals = []),
                  this.store.dispatch(Y()),
                  this.requestProposals();
              }
              requestProposals() {
                let e = !1;
                Promise.all(
                  this.proposal_templates.map((t) => {
                    (0, k.l6)(() => d.DO.api.send(t)).catch((t) => {
                      var n;
                      return (null == t
                        ? void 0
                        : null === (n = t.error) || void 0 === n
                        ? void 0
                        : n.code) === "ContractBuyValidationError"
                        ? (this.data.proposals.push({
                            ...t.error.echo_req,
                            ...t.echo_req.passthrough,
                            error: t,
                          }),
                          null)
                        : (!e &&
                            ((e = !0),
                            this.$scope.observer.emit("Error", t.error)),
                          null);
                    });
                  })
                );
              }
              observeProposals() {
                if (!d.DO.api) return;
                let e = d.DO.api.onMessage().subscribe((e) => {
                  if ("proposal" === e.data.msg_type) {
                    let { passthrough: t, proposal: n } = e.data;
                    n &&
                      -1 ===
                        this.data.proposals.findIndex((e) => e.id === n.id) &&
                      (this.data.proposals.push({ ...n, ...t }),
                      this.checkProposalReady());
                  }
                });
                d.DO.pushSubscription(e);
              }
              checkProposalReady() {
                let { proposals: e } = this.data;
                e.length > 0 &&
                  this.proposal_templates &&
                  this.proposal_templates.every(
                    (t) =>
                      -1 !==
                      e.findIndex(
                        (e) =>
                          e.purchase_reference ===
                            t.passthrough.purchase_reference &&
                          e.contract_type === t.contract_type
                      )
                  ) &&
                  this.startPromise.then(() => this.store.dispatch(G()));
              }
              isNewTradeOption(e) {
                return this.trade_option
                  ? [
                      "amount",
                      "barrierOffset",
                      "basis",
                      "duration",
                      "duration_unit",
                      "prediction",
                      "secondBarrierOffset",
                      "symbol",
                    ].some((t) => this.trade_option[t] !== e[t])
                  : ((this.trade_option = e), !0);
              }
            },
          ei = 0,
          ea = (e) =>
            class t extends e {
              purchase(e) {
                if (this.store.getState().scope !== O) return Promise.resolve();
                let t = (t) => {
                  let { buy: n } = t;
                  (0, Z.x_)({
                    id: "contract.purchase_received",
                    data: n.transaction_id,
                    buy: n,
                  }),
                    (this.contractId = n.contract_id),
                    this.store.dispatch(H()),
                    this.is_proposal_subscription_required &&
                      this.renewProposalsOnPurchase(),
                    (ei = 0),
                    (0, Z.cM)(_.v9.PURCHASE, {
                      longcode: n.longcode,
                      transaction_id: n.transaction_id,
                    }),
                    (0, Z.um)({
                      accountID: this.accountInfo.loginid,
                      totalRuns: this.updateAndReturnTotalRuns(),
                      transaction_ids: { buy: n.transaction_id },
                      contract_type: e,
                      buy_price: n.buy_price,
                    });
                };
                if (this.is_proposal_subscription_required) {
                  let { id: n, askPrice: i } = this.selectProposal(e),
                    a = () => d.DO.api.send({ buy: n, price: i });
                  return ((this.isSold = !1),
                  (0, Z.x_)({ id: "contract.purchase_sent", data: i }),
                  this.options.timeMachineEnabled)
                    ? (0, k.Kn)(
                        a,
                        (e, t) => {
                          "DisconnectError" !== e
                            ? this.renewProposalsOnPurchase()
                            : this.clearProposals();
                          let n = this.store.subscribe(() => {
                            let { scope: e, proposalsReady: i } =
                              this.store.getState();
                            e === O &&
                              i &&
                              (t().then(() =>
                                this.observer.emit("REVERT", "before")
                              ),
                              n());
                          });
                        },
                        ["PriceMoved", "InvalidContractProposal"],
                        ei++
                      ).then(t)
                    : (0, k.l6)(a).then(t);
                }
                let n = (0, k.nD)(e, this.tradeOptions),
                  i = () => d.DO.api.send(n);
                return ((this.isSold = !1),
                (0, Z.x_)({
                  id: "contract.purchase_sent",
                  data: this.tradeOptions.amount,
                }),
                this.options.timeMachineEnabled)
                  ? (0, k.Kn)(
                      i,
                      (e, t) => {
                        "DisconnectError" === e && this.clearProposals();
                        let n = this.store.subscribe(() => {
                          let { scope: e } = this.store.getState();
                          e === O &&
                            (t().then(() =>
                              this.observer.emit("REVERT", "before")
                            ),
                            n());
                        });
                      },
                      ["PriceMoved", "InvalidContractProposal"],
                      ei++
                    ).then(t)
                  : (0, k.l6)(i).then(t);
              }
              constructor(...e) {
                super(...e),
                  (0, s._)(this, "getPurchaseReference", () => i),
                  (0, s._)(this, "regeneratePurchaseReference", () => {
                    i = (0, k.Fs)();
                  });
              }
            },
          eo = (e) =>
            class t extends e {
              isSellAtMarketAvailable() {
                return (
                  this.contractId &&
                  !this.isSold &&
                  this.isSellAvailable &&
                  !this.isExpired
                );
              }
              sellAtMarket() {
                if ((f.P.emit("bot.sell"), this.store.getState().scope !== I))
                  return Promise.resolve();
                if (!this.isSellAtMarketAvailable())
                  return (0, Z.cM)(_.v9.NOT_OFFERED), Promise.resolve();
                let e = 1;
                return new Promise((t) => {
                  let n = (n) => {
                      if (((e = 1), n)) {
                        let { sold_for: e } = n.sell;
                        (0, Z.cM)(_.v9.SELL, { sold_for: e });
                      }
                      (0, Z.x_)("purchase.sold"), this.waitForAfter(), t();
                    },
                    i = this.contractId,
                    a = () =>
                      (0, k.l6)(() => d.DO.api.send({ sell: i, price: 0 }))
                        .then((e) => {
                          (0, k.l6)(() =>
                            d.DO.api.send({
                              proposal_open_contract: 1,
                              contract_id: i,
                            })
                          ).then(() => e);
                        })
                        .catch((e) => {
                          let t = e.error;
                          if ("InvalidOfferings" === t.code)
                            return Promise.resolve();
                          let n = {
                            name: t.code,
                            message: t.message,
                            msg_type: e.msg_type,
                            error: { ...t.error },
                          };
                          return "RateLimit" === t.code
                            ? Promise.reject(n)
                            : (0, k.l6)(() =>
                                d.DO.api.send({
                                  proposal_open_contract: 1,
                                  contract_id: i,
                                })
                              ).then((e) => {
                                let { proposal_open_contract: t } = e;
                                return t.is_sold
                                  ? Promise.resolve({
                                      sell: { sold_for: t.sell_price },
                                    })
                                  : Promise.reject(n);
                              });
                        }),
                    o = [
                      "NoOpenPosition",
                      "InvalidSellContractProposal",
                      "UnrecognisedRequest",
                    ];
                  return this.options.timeMachineEnabled
                    ? (0, k.Kn)(
                        a,
                        (e, t) =>
                          t().then(() =>
                            this.observer.emit("REVERT", "during")
                          ),
                        o,
                        e++
                      ).then((e) => n(e))
                    : (0, k.l6)(a, o)
                        .then((e) => n(e))
                        .catch((e) => e);
                });
              }
            };
        var es = n("91296"),
          er = n.n(es);
        let el = (e) => e && (0 === e.length ? void 0 : e[e.length - 1]),
          ed = (e) =>
            e.times.map((t, n) => ({ epoch: +t, quote: +e.prices[n] })),
          ec = (e) =>
            class t extends e {
              async watchTicks(e) {
                if (e && this.symbol !== e) {
                  this.symbol = e;
                  let { ticksService: t } = this.$scope;
                  await t.stopMonitor({ symbol: e, key: a });
                  a = await t.monitor({
                    symbol: e,
                    callback: (e) => {
                      this.is_proposal_subscription_required &&
                        this.checkProposalReady();
                      let { epoch: t } = e.slice(-1)[0];
                      this.store.dispatch({ type: j, payload: t });
                    },
                  });
                }
              }
              checkTicksPromiseExists() {
                return this.$scope.ticksService.ticks_history_promise;
              }
              getTicks() {
                let e =
                  arguments.length > 0 &&
                  void 0 !== arguments[0] &&
                  arguments[0];
                return new Promise((t) => {
                  this.$scope.ticksService
                    .request({ symbol: this.symbol })
                    .then((n) => {
                      t(
                        n.map((t) =>
                          e ? t.quote.toFixed(this.getPipSize()) : t.quote
                        )
                      );
                    });
                });
              }
              getLastTick(e) {
                let t =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1];
                return new Promise((n) =>
                  this.$scope.ticksService
                    .request({ symbol: this.symbol })
                    .then((i) => {
                      let a = e ? el(i) : el(i).quote;
                      !e && t && (a = a.toFixed(this.getPipSize())), n(a);
                    })
                    .catch((e) => {
                      "MarketIsClosed" === e.code &&
                        (f.P.emit("Error", e), n(e.code));
                    })
                );
              }
              getLastDigit() {
                return new Promise((e) =>
                  this.getLastTick(!1, !0).then((t) => e((0, k.VM)(t)))
                );
              }
              getLastDigitList() {
                return new Promise((e) =>
                  this.getTicks().then((t) => e(this.getLastDigitsFromList(t)))
                );
              }
              getLastDigitsFromList(e) {
                return e.map((e) => (0, k.VM)(e.toFixed(this.getPipSize())));
              }
              checkDirection(e) {
                return new Promise((t) =>
                  this.$scope.ticksService
                    .request({ symbol: this.symbol })
                    .then((n) => t((0, k.Mg)(n) === e))
                );
              }
              getOhlc(e) {
                let {
                  granularity: t = this.options.candleInterval || 60,
                  field: n,
                } = e || {};
                return new Promise((e) =>
                  this.$scope.ticksService
                    .request({ symbol: this.symbol, granularity: t })
                    .then((t) => e(n ? t.map((e) => e[n]) : t))
                );
              }
              getOhlcFromEnd(e) {
                let { index: t = 1 } = e || {},
                  n = C(
                    Number(t),
                    (0, v.NC)("Index must be a positive integer")
                  );
                return new Promise((t) =>
                  this.getOhlc(e).then((e) => t(e.slice(-n)[0]))
                );
              }
              getPipSize() {
                return this.$scope.ticksService.pipSizes[this.symbol];
              }
              async requestAccumulatorStats() {
                var e, t, n, i, a, o;
                let s = this.subscription_id_for_accumulators,
                  r = this.is_proposal_requested_for_accumulators,
                  l = {
                    ...window.Blockly.accumulators_request,
                    amount:
                      null === this || void 0 === this
                        ? void 0
                        : null === (e = this.tradeOptions) || void 0 === e
                        ? void 0
                        : e.amount,
                    basis:
                      null === this || void 0 === this
                        ? void 0
                        : null === (t = this.tradeOptions) || void 0 === t
                        ? void 0
                        : t.basis,
                    contract_type: "ACCU",
                    currency:
                      null === this || void 0 === this
                        ? void 0
                        : null === (n = this.tradeOptions) || void 0 === n
                        ? void 0
                        : n.currency,
                    growth_rate:
                      null === this || void 0 === this
                        ? void 0
                        : null === (i = this.tradeOptions) || void 0 === i
                        ? void 0
                        : i.growth_rate,
                    proposal: 1,
                    subscribe: 1,
                    symbol:
                      null === this || void 0 === this
                        ? void 0
                        : null === (a = this.tradeOptions) || void 0 === a
                        ? void 0
                        : a.symbol,
                  };
                !s &&
                  !r &&
                  ((this.is_proposal_requested_for_accumulators = !0),
                  l &&
                    (await (null === d.DO || void 0 === d.DO
                      ? void 0
                      : null === (o = d.DO.api) || void 0 === o
                      ? void 0
                      : o.send(l))));
              }
              async handleOnMessageForAccumulators() {
                let e = [];
                return new Promise((t) => {
                  let n = d.DO.api.onMessage().subscribe((n) => {
                    let { data: i } = n;
                    if ("proposal" === i.msg_type)
                      try {
                        (this.subscription_id_for_accumulators =
                          i.subscription.id),
                          (e = [
                            ...(
                              i.proposal.contract_details.ticks_stayed_in || []
                            )
                              .flat()
                              .reverse(),
                            ...e,
                          ]).length > 0 && t(e);
                      } catch (e) {
                        f.P.emit(
                          "Unexpected message type or no proposal found:",
                          e
                        );
                      }
                  });
                  d.DO.pushSubscription(n);
                });
              }
              async fetchStatsForAccumulators() {
                try {
                  return (
                    er()(() => this.requestAccumulatorStats(), 300)(),
                    await this.handleOnMessageForAccumulators()
                  );
                } catch (e) {
                  throw (f.P.emit("Error in subscription promise:", e), e);
                } finally {
                  var e;
                  await (null === d.DO || void 0 === d.DO
                    ? void 0
                    : null === (e = d.DO.api) || void 0 === e
                    ? void 0
                    : e.send({ forget_all: "proposal" })),
                    (this.is_proposal_requested_for_accumulators = !1),
                    (this.subscription_id_for_accumulators = null);
                }
              }
              async getCurrentStat() {
                try {
                  let e = await this.fetchStatsForAccumulators();
                  return null == e ? void 0 : e[0];
                } catch (e) {
                  f.P.emit("Error fetching current stat:", e);
                }
              }
              async getStatList() {
                try {
                  let e = await this.fetchStatsForAccumulators();
                  return null == e ? void 0 : e.slice(0, 100);
                } catch (e) {
                  f.P.emit("Error fetching current stat:", e);
                }
              }
              async getDelayTickValue(e) {
                return new Promise((t, n) => {
                  try {
                    let n = [],
                      i = this.symbol,
                      a = () => {
                        this.$scope.ticksService.stopMonitor({
                          symbol: i,
                          key: "",
                        }),
                          t(n),
                          (n.length = 0);
                      },
                      o = (t) => {
                        n.push(t), n.length === e && a();
                      };
                    0 >= Number(e) && a(),
                      this.$scope.ticksService.monitor({
                        symbol: i,
                        callback: (e) => o(e),
                      });
                  } catch (e) {
                    n(Error(`Failed to start tick monitoring: ${e.message}`));
                  }
                });
              }
            },
          eu = {
            totalProfit: 0,
            totalWins: 0,
            totalLosses: 0,
            totalStake: 0,
            totalPayout: 0,
            totalRuns: 0,
          },
          eh = {},
          ep = (e) =>
            class t extends e {
              clearStatistics() {
                if (
                  ((this.sessionRuns = 0),
                  (this.sessionProfit = 0),
                  !this.accountInfo)
                )
                  return;
                let { loginid: e } = this.accountInfo;
                eh[e] = { ...eu };
              }
              updateTotals(e) {
                let { sell_price: t, buy_price: n, currency: i } = e,
                  a = (0, u.bfN)(Number(t) - Number(n), i),
                  o = a > 0,
                  s = this.getAccountStat();
                (s.totalWins += o ? 1 : 0),
                  (s.totalLosses += o ? 0 : 1),
                  (this.sessionProfit = (0, u.bfN)(
                    Number(this.sessionProfit) + Number(a),
                    i
                  )),
                  (s.totalProfit = (0, u.bfN)(
                    Number(s.totalProfit) + Number(a),
                    i
                  )),
                  (s.totalStake = (0, u.bfN)(
                    Number(s.totalStake) + Number(n),
                    i
                  )),
                  (s.totalPayout = (0, u.bfN)(
                    Number(s.totalPayout) + Number(t),
                    i
                  )),
                  (0, Z.um)({
                    profit: a,
                    contract: e,
                    accountID: this.accountInfo.loginid,
                    totalProfit: s.totalProfit,
                    totalWins: s.totalWins,
                    totalLosses: s.totalLosses,
                    totalStake: s.totalStake,
                    totalPayout: s.totalPayout,
                  }),
                  (0, Z.cM)(o ? _.v9.PROFIT : _.v9.LOST, {
                    currency: i,
                    profit: a,
                  });
              }
              updateAndReturnTotalRuns() {
                this.sessionRuns++;
                let e = this.getAccountStat();
                return ++e.totalRuns;
              }
              getTotalRuns() {
                return this.getAccountStat().totalRuns;
              }
              getTotalProfit(e, t) {
                let n = this.getAccountStat();
                return e && 0 !== n.totalProfit
                  ? (0, u.bfN)(+n.totalProfit, t)
                  : +n.totalProfit;
              }
              checkLimits(e) {
                if (!e.limitations) return;
                let {
                  limitations: { maxLoss: t, maxTrades: n },
                } = e;
                if (t && n) {
                  if (this.sessionRuns >= n)
                    throw (0, g.T)(
                      "CustomLimitsReached",
                      (0, v.NC)("Maximum number of trades reached")
                    );
                  if (this.sessionProfit <= -t)
                    throw (0, g.T)(
                      "CustomLimitsReached",
                      (0, v.NC)("Maximum loss amount reached")
                    );
                }
              }
              validateTradeOptions(e) {
                let t = e.take_profit,
                  n = e.stop_loss;
                return (
                  t && (e.limit_order.take_profit = t),
                  n && (e.limit_order.stop_loss = n),
                  e
                );
              }
              getAccountStat() {
                let { loginid: e } = this.accountInfo;
                return !(e in eh) && (eh[e] = { ...eu }), eh[e];
              }
              constructor() {
                super(),
                  (this.sessionRuns = 0),
                  (this.sessionProfit = 0),
                  f.P.register(
                    "statistics.clear",
                    this.clearStatistics.bind(this)
                  );
              }
            },
          em = (e) =>
            ef({
              store: e,
              stopScope: I,
              passScope: O,
              passFlag: "proposalsReady",
            }),
          e_ = (e) =>
            ef({
              store: e,
              stopScope: M,
              passScope: I,
              passFlag: "openContract",
            }),
          ef = (e) => {
            let { store: t, stopScope: n, passScope: i, passFlag: a } = e;
            return t.getState().scope === n
              ? Promise.resolve(!1)
              : new Promise((e) => {
                  let s = t.subscribe(() => {
                    let r = t.getState();
                    r.newTick !== o &&
                      ((o = r.newTick),
                      r.scope === i && r[a] && (s(), e(!0)),
                      r.scope === n && (s(), e(!1)));
                  });
                });
          };
        class eb extends ee(ea(eo(et(en(ec(ep(class {}))))))) {
          init() {
            for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
              t[n] = arguments[n];
            let [i, a] = N(t),
              { symbol: o } = a;
            (this.initArgs = t),
              (this.options = a),
              (this.startPromise = this.loginAndGetBalance(i)),
              !this.checkTicksPromiseExists() && this.watchTicks(o);
          }
          start(e) {
            if (!this.options)
              throw (0, g.T)(
                "NotInitialized",
                (0, v.NC)("Bot.init is not called")
              );
            f.P.emit("bot.running");
            let t = this.validateTradeOptions(e);
            (this.tradeOptions = { ...t, symbol: this.options.symbol }),
              this.store.dispatch(V()),
              this.checkLimits(t),
              this.makeDirectPurchaseDecision();
          }
          loginAndGetBalance(e) {
            return this.token === e
              ? Promise.resolve()
              : ((this.accountInfo = d.DO.account_info),
                (this.token = d.DO.token),
                new Promise((e) => {
                  let t = d.DO.api.onMessage().subscribe((t) => {
                    let { data: n } = t;
                    "transaction" === n.msg_type &&
                      "sell" === n.transaction.action &&
                      (this.transaction_recovery_timeout = setTimeout(() => {
                        let { contract: e } = this.data,
                          t = e.contract_id === n.transaction.contract_id,
                          i = "open" === e.status;
                        t &&
                          i &&
                          (0, k.l6)(() => {
                            d.DO.api.send({
                              proposal_open_contract: 1,
                              contract_id: e.contract_id,
                            });
                          }, ["PriceMoved"]);
                      }, 1500)),
                      e();
                  });
                  d.DO.pushSubscription(t);
                }));
          }
          observe() {
            this.observeOpenContract(),
              this.observeBalance(),
              this.observeProposals();
          }
          watch(e) {
            return "before" === e ? em(this.store) : e_(this.store);
          }
          makeDirectPurchaseDecision() {
            let { has_payout_block: e, is_basis_payout: t } = (0, k.vo)();
            (this.is_proposal_subscription_required = e || t),
              this.is_proposal_subscription_required
                ? (this.makeProposals({
                    ...this.options,
                    ...this.tradeOptions,
                  }),
                  this.checkProposalReady())
                : this.store.dispatch(G());
          }
          constructor(e) {
            super(),
              (this.observer = e.observer),
              (this.$scope = e),
              this.observe(),
              (this.data = { contract: {}, proposals: [] }),
              (this.subscription_id_for_accumulators = null),
              (this.is_proposal_requested_for_accumulators = !1),
              (this.store = (0, b.MT)(z, (0, b.md)(y.I)));
          }
        }
        let ey = (e, t) =>
            t.data.proposals.find(
              (n) =>
                n.contract_type === e &&
                n.purchase_reference === t.getPurchaseReference()
            ),
          ev = (e) => e.getSellPrice(),
          eg = (e) => {
            let t = (t) => (0, k.mh)(e.data.contract)[t];
            return {
              init: function () {
                for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                  n[i] = arguments[i];
                return e.init(...n);
              },
              start: function () {
                for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                  n[i] = arguments[i];
                return e.start(...n);
              },
              stop: function () {
                for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                  n[i] = arguments[i];
                return e.stop(...n);
              },
              purchase: (t) => e.purchase(t),
              getAskPrice: (t) => Number(ey(t, e).ask_price),
              getPayout: (t) => Number(ey(t, e).payout),
              getPurchaseReference: () => e.getPurchaseReference(),
              isSellAvailable: () => e.isSellAtMarketAvailable(),
              sellAtMarket: () => e.sellAtMarket(),
              getSellPrice: () => ev(e),
              isResult: (e) => t(10) === e,
              isTradeAgain: (e) => f.P.emit("bot.trade_again", e),
              readDetails: (e) => t(e - 1),
            };
          },
          ek = (e) => ({
            getDelayTickValue: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getDelayTickValue(...n);
            },
            getCurrentStat: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getCurrentStat(...n);
            },
            getStatList: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getStatList(...n);
            },
            getLastTick: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getLastTick(...n);
            },
            getLastDigit: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getLastDigit(...n);
            },
            getTicks: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getTicks(...n);
            },
            checkDirection: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.checkDirection(...n);
            },
            getOhlcFromEnd: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getOhlcFromEnd(...n);
            },
            getOhlc: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getOhlc(...n);
            },
            getLastDigitList: function () {
              for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)
                n[i] = arguments[i];
              return e.getLastDigitList(...n);
            },
          }),
          ew = () => ({
            isCandleBlack: (e) => A(e) && e.close < e.open,
            candleValues: (e, t) => S(e).map((e) => e[t]),
            candleField: (e, t) => A(e)[t],
          }),
          eT = (e, t) => e.map((e) => (t ? e[t] : e)),
          eC = (e, t, n) =>
            eT(e.slice(t > e.length ? 0 : e.length - t, e.length), n),
          eE = (e) => e.reduce((e, t) => e + t, 0),
          eN = (e) => e.reduce((e, t) => e + t, 0) / e.length,
          ex = (e) => {
            let t = eN(e);
            return Math.sqrt(eN(e.map((e) => (e - t) ** 2)));
          },
          eA = (e, t) => {
            let { periods: n, field: i } = t;
            if (e.length < n) throw Error("Periods longer than data length");
            return eE(eC(e, n, i)) / n;
          },
          eS = (e, t) => {
            let { periods: n, pipSize: i = 2 } = t;
            return (0, u.vPG)(e.length - n + 1).map(
              (a, o) => +eA(e.slice(o, o + n), t).toFixed(i)
            );
          },
          eO = (e, t) => {
            let {
                periods: n = 20,
                field: i,
                stdDevUp: a = 2,
                stdDevDown: o = 2,
                pipSize: s = 2,
              } = t,
              r = eC(e, n, i),
              l = eA(r, { periods: n }),
              d = ex(r),
              c = l + d * a,
              u = l - d * o;
            return [+l.toFixed(s), +c.toFixed(s), +u.toFixed(s)];
          },
          eI = (e, t) => {
            let { periods: n } = t;
            return (0, u.vPG)(e.length - n + 1).map((i, a) =>
              eO(e.slice(a, a + n), t)
            );
          },
          eD = (e, t, n) => {
            let { periods: i, field: a, pipSize: o = 2 } = t,
              s = 2 / (i + 1),
              r = eT(e, a);
            if (n) return (r[0] - n) * s + n;
            if (e.length < i) throw Error("Periods longer than data length");
            let l = eN(eT(e.slice(0, i), a));
            return +r
              .slice(i)
              .reduce((e, t) => (t - e) * s + e, l)
              .toFixed(o);
          },
          eR = (e, t) => {
            let { periods: n } = t,
              i = eD(e.slice(0, n), t);
            return e.slice(n - 1).map((e, n) => (n ? (i = eD([e], t, i)) : i));
          },
          eL = (e, t) => {
            let n = [];
            return (n.length = t - e.length), n.fill(0), [...n, ...e];
          },
          eP = (e, t) => {
            let {
                field: n,
                fastEmaPeriod: i = 12,
                slowEmaPeriod: a = 26,
                signalEmaPeriod: o = 9,
                pipSize: s = 2,
              } = t,
              r = eT(e, n),
              l = r.length,
              d = eL(eR(r, { periods: i, pipSize: 20, field: n }), l),
              c = eL(eR(r, { periods: a, pipSize: 20, field: n }), l),
              u = eL(
                c.map((e, t) => +(d[t] - e).toFixed(s)),
                l
              ),
              h = eL(
                eR(u.slice(a - 1), { periods: o, pipSize: 20, field: n }),
                l
              );
            return u
              .map((e, t) => [+(e - h[t]).toFixed(s), e, +h[t].toFixed(s)])
              .slice(a + o - 2);
          },
          eB = (e, t) => (t > e ? t - e : 0),
          eU = (e, t) => (t < e ? e - t : 0),
          eM = (e, t, n) => {
            let i;
            return (
              e.reduce((e, n, a) => {
                1 === a && (i = e);
                let o = t(i, n);
                return (i = n), o + (1 === a ? 0 : e);
              }) / n
            );
          },
          ej = (e, t, n, i) => {
            let a;
            return 1 === e.length
              ? i
              : e.reduce((e, o, s) => {
                  1 === s && (a = e);
                  let r = t(a, o);
                  return (a = o), ((1 === s ? i : e) * (n - 1) + r) / n;
                });
          },
          eF = (e, t, n) => {
            let i, a, o;
            let { periods: s, field: r } = t;
            if (e.length < s) throw Error("Periods longer than data length");
            if (e.length === s) return 0;
            let l = eT(e.slice(0, s + 1), r);
            n && "gain" in n
              ? ((i = eT(e.slice(-2), r)), (a = n.gain), (o = n.loss))
              : ((i = eT(e.slice(s, e.length), r)),
                (a = eM(l, eB, s)),
                (o = eM(l, eU, s)));
            let d = ej(i, eB, s, a),
              c = ej(i, eU, s, o);
            return (n && ((n.gain = d), (n.loss = c)), 0 === d)
              ? 0
              : 0 === c
              ? 100
              : 100 - 100 / (1 + d / c);
          },
          eV = (e, t) => {
            let { periods: n, pipSize: i = 2 } = t,
              a = {};
            return (0, u.vPG)(e.length - n).map(
              (o, s) => +eF(e.slice(0, s + n + 1), t, a).toFixed(i)
            );
          },
          eG = function (e, t, n, i) {
            for (
              var a = arguments.length, o = Array(a > 4 ? a - 4 : 0), s = 4;
              s < a;
              s++
            )
              o[s - 4] = arguments[s];
            return e(t, { pipSize: n.getPipSize(), ...i }, ...o);
          },
          eY = (e) => ({
            sma: (t, n) => eG(eA, t, e, { periods: n }),
            smaa: (t, n) => eG(eS, t, e, { periods: n }),
            ema: (t, n) => eG(eD, t, e, { periods: n }),
            emaa: (t, n) => eG(eR, t, e, { periods: n }),
            rsi: (t, n) => eG(eF, t, e, { periods: n }),
            rsia: (t, n) => eG(eV, t, e, { periods: n }),
            bb: (t, n, i) => eG(eO, t, e, n)[i],
            bba: (t, n, i) => eG(eI, t, e, n).map((e) => e[i]),
            macda: (t, n, i) => eG(eP, t, e, n).map((e) => e[i]),
          }),
          eX = (e) => ({
            notify: (e) => f.P.emit("ui.log.notify", e),
            console: (e) => {
              let { type: t, message: n } = e;
              return console[t](n);
            },
            notifyTelegram: (e, t, n) => {
              let i = () =>
                (0, Z.h4)(
                  "warn",
                  (0, v.NC)("The Telegram notification could not be sent")
                );
              fetch(`https://api.telegram.org/bot${e}/sendMessage`, {
                method: "POST",
                mode: "cors",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ chat_id: t, text: n }),
              })
                .then((e) => {
                  !e.ok && i();
                })
                .catch(i);
            },
            getTotalRuns: () => e.getTotalRuns(),
            getBalance: (t) => e.getBalance(t),
            getTotalProfit: (t) => e.getTotalProfit(t, e.tradeOptions.currency),
          }),
          eW = (e) => ({
            dateTimeStringToTimestamp: (e) => {
              let t;
              let n = (0, v.NC)("Invalid date/time: {{ datetime_string }}", {
                datetime_string: e,
              });
              if ("string" != typeof e) return n;
              let i = e
                  .replace(/[^0-9.:-\s]/g, "")
                  .replace(/\s+/g, " ")
                  .trim()
                  .split(" "),
                a = /^[12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$/;
              if (
                (t =
                  i.length >= 2
                    ? a.test(i[0]) &&
                      /^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])(:([0-5][0-9])?)?$/.test(
                        i[1]
                      )
                      ? `${i[0]}T${i[1]}`
                      : null
                    : 1 === i.length
                    ? a.test(i[0])
                      ? i[0]
                      : null
                    : null)
              ) {
                let e = new Date(t);
                if (e instanceof Date && !isNaN(e)) return e.getTime() / 1e3;
              }
              return n;
            },
            getTime: () => parseInt(new Date().getTime() / 1e3),
            ...ew(),
            ...eX(e),
            ...eY(e),
            highlightBlock: (e) => {
              let t = window.Blockly.derivWorkspace.getBlockById(e);
              (window.Blockly.BlockSvg.prototype.highlightExecutedBlock =
                function () {
                  let e = "block--execution-highlighted";
                  !window.Blockly.utils.dom.hasClass(this.svgGroup_, e) &&
                    (window.Blockly.utils.dom.addClass(this.svgGroup_, e),
                    setTimeout(() => {
                      this.svgGroup_ &&
                        window.Blockly.utils.dom.removeClass(this.svgGroup_, e);
                    }, 1505));
                }),
                t && t.highlightExecutedBlock(t);
            },
          }),
          eH = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 1;
            return new Promise(
              (n) =>
                setTimeout(() => {
                  n(), setTimeout(() => e.emit("CONTINUE"), 0);
                }, 1e3 * t),
              () => {}
            );
          },
          e$ = (e) => {
            let t = new eb(e),
              { observer: n } = e;
            return {
              tradeEngine: t,
              observer: n,
              getInterface: () => ({
                ...eg(t),
                ...eW(t),
                getTicksInterface: ek(t),
                watch: function () {
                  for (
                    var e = arguments.length, n = Array(e), i = 0;
                    i < e;
                    i++
                  )
                    n[i] = arguments[i];
                  return t.watch(...n);
                },
                sleep: function () {
                  for (
                    var e = arguments.length, t = Array(e), i = 0;
                    i < e;
                    i++
                  )
                    t[i] = arguments[i];
                  return eH(n, ...t);
                },
                alert: function () {
                  for (
                    var e = arguments.length, t = Array(e), n = 0;
                    n < e;
                    n++
                  )
                    t[n] = arguments[n];
                  return alert(...t);
                },
                prompt: function () {
                  for (
                    var e = arguments.length, t = Array(e), n = 0;
                    n < e;
                    n++
                  )
                    t[n] = arguments[n];
                  return prompt(...t);
                },
                console: {
                  log() {
                    for (
                      var e = arguments.length, t = Array(e), n = 0;
                      n < e;
                      n++
                    )
                      t[n] = arguments[n];
                    console.log(new Date().toLocaleTimeString(), ...t);
                  },
                },
              }),
            };
          };
        var eK = n("35369");
        let eq = (e) => ({ epoch: +e.epoch, quote: +e.quote }),
          ez = (e) => ({
            open: +e.open,
            high: +e.high,
            low: +e.low,
            close: +e.close,
            epoch: +(e.open_time || e.epoch),
          }),
          eJ = (e) => e.map((e) => ez(e)),
          eZ = (e, t) => (el(e).epoch >= t.epoch ? e : [...e.slice(1), t]),
          eQ = (e, t) => {
            let n = el(e);
            return (n.open === t.open &&
              n.high === t.high &&
              n.low === t.low &&
              n.close === t.close &&
              n.epoch === t.epoch) ||
              n.epoch > t.epoch
              ? e
              : [...(n.epoch === t.epoch ? e.slice(0, -1) : e.slice(1)), t];
          },
          e0 = (e) => (e ? "candles" : "ticks");
        class e1 {
          requestPipSizes() {
            return this.pipSizes
              ? Promise.resolve(this.pipSizes)
              : (!this.active_symbols_promise &&
                  (this.active_symbols_promise = new Promise((e) => {
                    (this.pipSizes = d.DO.pip_sizes), e(this.pipSizes);
                  })),
                this.active_symbols_promise);
          }
          async request(e) {
            return new Promise((t, n) => {
              let { symbol: i, granularity: a } = e,
                o = e0(a);
              "ticks" === o && this.ticks.has(i) && t(this.ticks.get(i)),
                "candles" === o &&
                  this.candles.hasIn([i, Number(a)]) &&
                  t(this.candles.getIn([i, Number(a)])),
                this.requestStream({ ...e, style: o })
                  .then((e) => {
                    t(e);
                  })
                  .catch((e) => {
                    n(e);
                  });
            });
          }
          monitor(e) {
            return new Promise((t, n) => {
              let { symbol: i, granularity: a, callback: o } = e,
                s = e0(a),
                r = (0, k.Fs)();
              this.request(e)
                .then(() => {
                  "ticks" === s
                    ? ((this.tickListeners = this.tickListeners.setIn(
                        [i, r],
                        o
                      )),
                      f.P.emit("bot.bot_ready"),
                      d.DO.toggleRunButton(!1))
                    : (this.ohlcListeners = this.ohlcListeners.setIn(
                        [i, Number(a), r],
                        o
                      )),
                    t(r);
                })
                .catch((e) => {
                  f.P.emit("Error", e),
                    (this.ticks_history_promise = null),
                    d.DO.toggleRunButton(!1),
                    n(e);
                });
            });
          }
          async stopMonitor(e) {
            let { symbol: t, granularity: n, key: i } = e,
              a = e0(n);
            "ticks" === a &&
              this.tickListeners.hasIn([t, i]) &&
              (this.tickListeners = this.tickListeners.deleteIn([t, i])),
              "candles" === a &&
                this.ohlcListeners.hasIn([t, Number(n), i]) &&
                (this.ohlcListeners = this.ohlcListeners.deleteIn([
                  t,
                  Number(n),
                  i,
                ])),
              await this.unsubscribeIfEmptyListeners(e);
          }
          async unsubscribeIfEmptyListeners(e) {
            let { symbol: t, granularity: n } = e,
              i = !1,
              a = this.tickListeners.get(t);
            a &&
              !a.size &&
              ((this.tickListeners = this.tickListeners.delete(t)),
              (this.ticks = this.ticks.delete(t)),
              (i = !0));
            let o = this.ohlcListeners.getIn([t, Number(n)]);
            o &&
              !o.size &&
              ((this.ohlcListeners = this.ohlcListeners.deleteIn([
                t,
                Number(n),
              ])),
              (this.candles = this.candles.deleteIn([t, Number(n)])),
              (i = !0)),
              i && (await this.unsubscribeAllAndSubscribeListeners(t));
          }
          unsubscribeAllAndSubscribeListeners(e) {
            let t = this.subscriptions.getIn(["ohlc", e]);
            Promise.all(
              [...(t ? Array.from(t.values()) : [])].map((e) =>
                (0, k.l6)(() => d.DO.api.forget(e))
              )
            ),
              (this.subscriptions = new eK.D5());
          }
          updateTicksAndCallListeners(e, t) {
            if (this.ticks.get(e) === t) return;
            this.ticks = this.ticks.set(e, t);
            let n = this.tickListeners.get(e);
            n && n.forEach((t) => t(this.ticks.get(e)));
          }
          updateCandlesAndCallListeners(e, t) {
            if (this.ticks.getIn(e) === t) return;
            this.candles = this.candles.setIn(e, t);
            let n = this.ohlcListeners.getIn(e);
            n && n.forEach((t) => t(this.candles.getIn(e)));
          }
          observe() {
            if (d.DO.api) {
              let e = d.DO.api.onMessage().subscribe((e) => {
                let { data: t } = e;
                if ("tick" === t.msg_type) {
                  let { tick: e } = t,
                    { symbol: n, id: i } = e;
                  this.ticks.has(n) &&
                    ((this.subscriptions = this.subscriptions.setIn(
                      ["tick", n],
                      i
                    )),
                    this.updateTicksAndCallListeners(
                      n,
                      eZ(this.ticks.get(n), eq(e))
                    ));
                }
                if ("ohlc" === t.msg_type) {
                  let { ohlc: e } = t,
                    { symbol: n, granularity: i, id: a } = e;
                  if (this.candles.hasIn([n, Number(i)])) {
                    this.subscriptions = this.subscriptions.setIn(
                      ["ohlc", n, Number(i)],
                      a
                    );
                    let t = [n, Number(i)];
                    this.updateCandlesAndCallListeners(
                      t,
                      eQ(this.candles.getIn(t), ez(e))
                    );
                  }
                }
              });
              d.DO.pushSubscription(e);
            }
          }
          requestStream(e) {
            let { style: t } = e,
              n = JSON.stringify(e);
            if ("ticks" === t) {
              var i;
              return (
                (null === (i = this.ticks_history_promise) || void 0 === i
                  ? void 0
                  : i.stringified_options) !== n &&
                  (this.ticks_history_promise = {
                    promise: this.requestPipSizes().then(() =>
                      this.requestTicks(e)
                    ),
                    stringified_options: n,
                  }),
                this.ticks_history_promise.promise
              );
            }
            return "candles" === t
              ? ((!this.candles_promise ||
                  this.candles_promise.stringified_options !== n) &&
                  (this.candles_promise = {
                    promise: this.requestPipSizes().then(() =>
                      this.requestTicks(e)
                    ),
                    stringified_options: n,
                  }),
                this.candles_promise.promise)
              : [];
          }
          requestTicks(e) {
            let { symbol: t, granularity: n, style: i } = e,
              a = {
                ticks_history: t,
                subscribe: 1,
                end: "latest",
                count: 1e3,
                granularity: n ? Number(n) : void 0,
                style: i,
              };
            return new Promise((e, o) => {
              !d.DO.api && e([]),
                (0, k.l6)(() => d.DO.api.send(a), [], d.DO)
                  .then((a) => {
                    if ("ticks" === i) {
                      let n = ed(a.history);
                      this.updateTicksAndCallListeners(t, n), e(n);
                    } else {
                      let i = eJ(a.candles);
                      this.updateCandlesAndCallListeners([t, Number(n)], i),
                        e(i);
                    }
                  })
                  .catch(o);
            });
          }
          unsubscribeFromTicksService() {
            return new Promise((e, t) => {
              this.forget()
                .then(() => {
                  this.forgetCandleSubscription()
                    .then(() => {
                      e();
                    })
                    .catch(t);
                })
                .catch(t),
                (this.ticks_history_promise = null);
            });
          }
          constructor() {
            (0, s._)(
              this,
              "forget",
              () =>
                new Promise((e, t) => {
                  (null === d.DO || void 0 === d.DO ? void 0 : d.DO.api)
                    ? d.DO.api
                        .forgetAll("ticks")
                        .then(() => {
                          e();
                        })
                        .catch(t)
                    : e();
                })
            ),
              (0, s._)(
                this,
                "forgetCandleSubscription",
                () =>
                  new Promise((e, t) => {
                    (null === d.DO || void 0 === d.DO ? void 0 : d.DO.api)
                      ? d.DO.api
                          .forgetAll("candles")
                          .then(() => {
                            e();
                          })
                          .catch(t)
                      : e();
                  })
              ),
              (this.ticks = new eK.D5()),
              (this.candles = new eK.D5()),
              (this.tickListeners = new eK.D5()),
              (this.ohlcListeners = new eK.D5()),
              (this.subscriptions = new eK.D5()),
              (this.ticks_history_promise = null),
              (this.active_symbols_promise = null),
              (this.candles_promise = null),
              this.observe();
          }
        }
        let e2 = () => {
          let e = new f.Z(),
            t = new e1();
          return { observer: e, ticksService: t, stopped: !1 };
        };
        (m().prototype.takeStateSnapshot = function () {
          return h(this.stateStack, void 0, void 0, void 0, !0);
        }),
          (m().prototype.restoreStateSnapshot = function (e) {
            (this.stateStack = h(e, void 0, void 0, void 0, !0)),
              (this.global =
                this.stateStack[0].scope.object || this.stateStack[0].scope),
              this.initFunc_(this, this.global);
          });
        let e5 = (e) => e && e.tradeEngine.options,
          e3 = (e) => e5(e) && e.tradeEngine.tradeOptions,
          e9 = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "";
            return (
              !_.Jr.includes(t) &&
              e5(e) &&
              e.tradeEngine.options.shouldRestartOnError
            );
          },
          e6 = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "";
            return (
              !!(
                [
                  "SellNotAvailableCustom",
                  "ContractCreationFailure",
                  "InvalidtoBuy",
                ].includes(t) && e5(e)
              ) || !1
            );
          },
          e8 = (e) => e5(e) && e.tradeEngine.options.timeMachineEnabled,
          e4 = () => {
            let e,
              t = e2(),
              n = e$(t),
              i = {};
            t.observer.register("REVERT", (e) =>
              a("before" === e ? t.beforeState : t.duringState)
            );
            function a(e) {
              i.restoreStateSnapshot(e), (i.paused_ = !1), o();
            }
            function o() {
              (t.stopped || !i.run()) && e(i.pseudoToNative(i.value));
            }
            function s(e, n) {
              let i = function () {
                for (var i = arguments.length, a = Array(i), s = 0; s < i; s++)
                  a[s] = arguments[s];
                let r = a.pop(),
                  l = a.slice().reverse(),
                  d = l.findIndex((e) => void 0 !== e);
                n(
                  ...(d < 0 ? [] : l.slice(d).reverse()).map((t) =>
                    e.pseudoToNative(t)
                  )
                )
                  .then((t) => {
                    r(e.nativeToPseudo(t)), o();
                  })
                  .catch((e) => {
                    t.observer.emit("Error", e.error || e);
                  });
              };
              return (
                Object.defineProperty(i, "length", { value: 101 }),
                e.createAsyncFunction(i)
              );
            }
            function r(e, a) {
              let o = n.getInterface(),
                {
                  getTicksInterface: r,
                  alert: l,
                  prompt: d,
                  sleep: c,
                  console: u,
                } = o;
              e.setProperty(a, "console", e.nativeToPseudo(u)),
                e.setProperty(a, "alert", e.nativeToPseudo(l)),
                e.setProperty(a, "prompt", e.nativeToPseudo(d)),
                e.setProperty(
                  a,
                  "getPurchaseReference",
                  e.nativeToPseudo(o.getPurchaseReference)
                );
              let h = e.nativeToPseudo(o);
              Object.entries(r).forEach((t) => {
                let [n, i] = t;
                return e.setProperty(h, n, s(e, i));
              }),
                e.setProperty(
                  h,
                  "start",
                  e.nativeToPseudo(function () {
                    for (
                      var i = arguments.length, a = Array(i), s = 0;
                      s < i;
                      s++
                    )
                      a[s] = arguments[s];
                    let { start: r } = o;
                    e9(n) && (t.startState = e.takeStateSnapshot()), r(...a);
                  })
                ),
                e.setProperty(h, "purchase", s(e, o.purchase)),
                e.setProperty(h, "sellAtMarket", s(e, o.sellAtMarket)),
                e.setProperty(a, "Bot", h),
                e.setProperty(
                  a,
                  "watch",
                  s(e, (e) => {
                    let { watch: a } = n.getInterface();
                    if (e8(n)) {
                      let n = i.takeStateSnapshot();
                      "before" === e
                        ? (t.beforeState = n)
                        : (t.duringState = n);
                    }
                    return a(e);
                  })
                ),
                e.setProperty(a, "sleep", s(e, c));
            }
            async function l() {
              return new Promise((e, i) => {
                try {
                  var a, o, s;
                  let i = f.P.getState("global_timeouts") ?? [],
                    r = Object.keys(i).every((e) => i[e].is_cancellable);
                  !n.tradeEngine.contractId && r
                    ? ((d.DO.is_stopping = !0),
                      i.forEach((e) => clearTimeout(i[e])),
                      c().then(() => {
                        (d.DO.is_stopping = !1), e();
                      }))
                    : !1 === n.tradeEngine.isSold &&
                      !t.is_error_triggered &&
                      (0, u.L8o)(
                        (null == n
                          ? void 0
                          : null === (s = n.tradeEngine) || void 0 === s
                          ? void 0
                          : null === (o = s.data) || void 0 === o
                          ? void 0
                          : null === (a = o.contract) || void 0 === a
                          ? void 0
                          : a.contract_type) ?? ""
                      )
                    ? f.P.register("contract.status", async (t) => {
                        "contract.sold" === t.id && c().then(() => e());
                      })
                    : ((d.DO.is_stopping = !0),
                      c().then(() => {
                        (d.DO.is_stopping = !1), e();
                      }));
                } catch (e) {
                  i(e);
                }
              });
            }
            async function c() {
              return new Promise((e, n) => {
                try {
                  (t.stopped = !0),
                    (t.is_error_triggered = !1),
                    f.P.emit("bot.stop");
                  let { ticksService: n } = t;
                  d.DO.clearSubscriptions(),
                    n.unsubscribeFromTicksService().then(() => {
                      e();
                    });
                } catch (e) {
                  n(e);
                }
              });
            }
            async function h() {
              let { ticksService: e } = t;
              return new Promise((t, n) => {
                try {
                  e.unsubscribeFromTicksService().then(() => {
                    t();
                  });
                } catch (e) {
                  n(e);
                }
              });
            }
            return {
              stop: l,
              run: function (s) {
                return new Promise((l, d) => {
                  let u = (o) => {
                    if (t.stopped) return;
                    if ("InvalidToken" === o.code) {
                      f.P.emit("client.invalid_token");
                      return;
                    }
                    if (e6(n, null == o ? void 0 : o.code)) {
                      f.P.emit("ui.log.error", o.message),
                        f.P.emit("bot.click_stop");
                      return;
                    }
                    if (
                      ((t.is_error_triggered = !0), !e9(n, o.code) || !e3(n))
                    ) {
                      d(o);
                      return;
                    }
                    f.P.emit("Error", o);
                    let { initArgs: s, tradeOptions: r } = n.tradeEngine;
                    c(),
                      (n = e$((t = e2()))),
                      (i = {}),
                      (e = () => {}),
                      t.observer.register("Error", u),
                      n.tradeEngine.init(...s),
                      n.tradeEngine.start(r),
                      t.startState &&
                        (null == i ? void 0 : i.restoreStateSnapshot) instanceof
                          Function &&
                        a(t.startState);
                  };
                  t.observer.register("Error", u),
                    (i = new (m())(s, r)),
                    (e = l),
                    o();
                });
              },
              terminateSession: c,
              bot: n,
              unsubscribeFromTicksService: h,
            };
          };
        var e7 = n("94576"),
          te = n("66345"),
          tt = n("26855"),
          tn = n("56505"),
          ti = n("63999"),
          ta = n("5466"),
          to = n("8813");
        let ts = {};
        (ts.inherits = function (e, t) {
          function n() {}
          (n.prototype = t.prototype),
            (e.superClass_ = t.prototype),
            (e.prototype = new n()),
            (e.prototype.constructor = e),
            (e.base = function (e, n) {
              for (
                var i = arguments.length, a = Array(i > 2 ? i - 2 : 0), o = 2;
                o < i;
                o++
              )
                a[o - 2] = arguments[o];
              return t.prototype[n].apply(e, a);
            });
        }),
          (ts.math = {}),
          (ts.isDef = function (e) {
            return void 0 !== e;
          }),
          (ts.math.Size = function (e, t) {
            (this.width = e), (this.height = t);
          }),
          (ts.isNumber = function (e) {
            return /^\s*-?\d+(\.\d+)?\s*$/.test(e);
          }),
          (ts.dom = {}),
          (ts.dom.removeNode = function (e) {
            let t = e.parentNode;
            e &&
              t &&
              (null == t ? void 0 : t.contains(e)) &&
              (null == t || t.removeChild(e));
          }),
          (ts.math.Coordinate = function (e, t) {
            (this.x = ts.isDef(e) ? e : 0), (this.y = ts.isDef(t) ? t : 0);
          }),
          (ts.math.Coordinate.prototype.scale = function (e, t) {
            return (
              (t = ts.isNumber(t) ? t : e), (this.x *= e), (this.y *= t), this
            );
          }),
          (ts.math.Coordinate.difference = function (e, t) {
            return new ts.math.Coordinate(e.x - t.x, e.y - t.y);
          });
        window.goog = ts;
        let tr = () => {
            ["blockInline"].forEach((e) => {
              window.Blockly.ContextMenuRegistry.registry.getItem(
                e
              ).preconditionFn = () => "hidden";
            });
            let e = {
              undoWorkspace: (0, v.NC)("Undo"),
              redoWorkspace: (0, v.NC)("Redo"),
              cleanWorkspace: (0, v.NC)("Clean up Blocks"),
              collapseWorkspace: (0, v.NC)("Collapse Blocks"),
              expandWorkspace: (0, v.NC)("Expand Blocks"),
              workspaceDelete: (0, v.NC)("Delete All Blocks"),
            };
            Object.keys(e).forEach((t) => {
              window.Blockly.ContextMenuRegistry.registry.getItem(
                t
              ).displayText = (0, v.NC)(e[t]);
            });
          },
          tl = async (e) => {
            let t = await n.e("551").then(n.t.bind(n, 34948, 23));
            (window.Blockly = t.default), (window.Blockly.Colours = {});
            let i = new window.Blockly.Generator("code"),
              a = { ...ta, ...i };
            (window.Blockly.JavaScript = a),
              (window.Blockly.Themes.zelos_renderer =
                window.Blockly.Theme.defineTheme("zelos_renderer", {
                  base: window.Blockly.Themes.Zelos,
                  componentStyles: {},
                })),
              tr(),
              (0, to.O)(e),
              await n.e("463").then(n.bind(n, 62471)),
              await n.e("378").then(n.bind(n, 3365));
          };
        var td = n("2776");
        let tc = [
          {
            id: 1,
            name: "AUTO C4 PRO",
            xml: '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="1Gp/v]LP27,I/mi@$;US" islocal="false" iscloud="false">NAME</variable>\n    <variable type="" id="9dQ4tsj$@`vWpu;:2{K=" islocal="false" iscloud="false">Stake</variable>\n    <variable type="" id="`=|V?TV%1c6]^Pvh=CK/" islocal="false" iscloud="false">Loss</variable>\n    <variable type="" id="7/Cs|{m_XjDwo::I6g5A" islocal="false" iscloud="false">Random</variable>\n    <variable type="" id="!P]:?:q)?v?}qINF%J42" islocal="false" iscloud="false">Win Stake</variable>\n    <variable type="" id="#nKyoAm=Zh-Afx.zUa%f" islocal="false" iscloud="false">Trend List</variable>\n    <variable type="" id=":Fbza.{0*q*jalJ+tc#." islocal="false" iscloud="false">Expected Profit</variable>\n    <variable type="" id="BTQ{$u318X:bRnhP(mQ9" islocal="false" iscloud="false">Stop Loss</variable>\n    <variable type="" id="$9kfg`#)W1GU[tN89.$Y" islocal="false" iscloud="false">list</variable>\n    <variable type="" id="bw=WNch~q~IyOluni[{w" islocal="false" iscloud="false">text</variable>\n    <variable type="" id="5sjtQu$-/?=Smx**u,[," islocal="false" iscloud="false">text1</variable>\n    <variable type="" id=",^hu|}AYLe!Uy/eB*Xza" islocal="false" iscloud="false">text2</variable>\n    <variable type="" id="3;41-/yDNM7GQiJ)3t8;" islocal="false" iscloud="false">text3</variable>\n    <variable type="" id="i)c1G![Sbwc71H79Cxx9" islocal="false" iscloud="false">text4</variable>\n    <variable type="" id="fn}w18~E+(.4W*[N}-^@" islocal="false" iscloud="false">text5</variable>\n  </variables>\n  <block type="trade_definition" id="dh^-@@VYq5^lDX~C~$86" deletable="false" x="0" y="0">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id=":NPm:a?-oii=T=L@/(VO" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="2]DfM`Leu~F^0Ug.aziM" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="~VI%{}-*c!OxfTdGA#N|" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITUNDER</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="dLa22pt?X?={uzSyMI(4" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="*/nEU/$eYm(3i`^]R:1[" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="d+FEZBQ{:x:Rxe3s:)+r" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="text_print" id="JMicd5|dBWrwn5f*JZY)" collapsed="true">\n        <value name="TEXT">\n          <shadow type="text" id="}O{;5)!^1q(D.+FT~!Jk">\n            <field name="TEXT">Trade Responsibly!!!</field>\n          </shadow>\n        </value>\n        <next>\n          <block type="variables_set" id="Knk-Z(:]#S77$xNwhEZh">\n            <field name="VAR" id="9dQ4tsj$@`vWpu;:2{K=" variabletype="">Stake</field>\n            <value name="VALUE">\n              <block type="math_number" id=":b)[I:+1{L^-HVlSIwt:">\n                <field name="NUM">50</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="iNi4}`P,KVgR@Y?cq?YJ">\n                <field name="VAR" id="!P]:?:q)?v?}qINF%J42" variabletype="">Win Stake</field>\n                <value name="VALUE">\n                  <block type="math_number" id="55dRWVvWfj*Y@A6a[{!P">\n                    <field name="NUM">50</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="lists_create_with" id="Ji]?2}yCMaQ3ZI{jMHsk">\n                    <field name="VARIABLE" id="$9kfg`#)W1GU[tN89.$Y" variabletype="">list</field>\n                    <next>\n                      <block type="variables_set" id="E(12Ylqn0rCa:`)li`3[">\n                        <field name="VAR" id="#nKyoAm=Zh-Afx.zUa%f" variabletype="">Trend List</field>\n                        <value name="VALUE">\n                          <block type="variables_get" id="5Z2sfmyU0oGK(QE$qvIG">\n                            <field name="VAR" id="$9kfg`#)W1GU[tN89.$Y" variabletype="">list</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="=:g/A@vg-C5Ao}k?+[?3">\n                            <field name="VAR" id=":Fbza.{0*q*jalJ+tc#." variabletype="">Expected Profit</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="6=)|PfX|q;/?CSkebhiO">\n                                <field name="NUM">200</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="$SHPlxO!t=}yn)YI)sjT">\n                                <field name="VAR" id="BTQ{$u318X:bRnhP(mQ9" variabletype="">Stop Loss</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="~:4d:Xh6y4:_W5@|x!$X">\n                                    <field name="NUM">200</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_join" id="dO-E$bUE`f:vC7B;XEvD">\n                                    <field name="VARIABLE" id="bw=WNch~q~IyOluni[{w" variabletype="">text</field>\n                                    <statement name="STACK">\n                                      <block type="text_statement" id="%jH3S}WY}T=mufh-^T_h">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="sD?,AaH4UKe4y#i|N=MZ">\n                                            <field name="TEXT"></field>\n                                          </shadow>\n                                          <block type="text" id=",*)$NY%#-R_A69KnNmKS">\n                                            <field name="TEXT"> AUTO C4 PRO 1 [BY\uD83D\uDCB5C. E. O FREDDY]•Expected Profit-&gt; $</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="text_statement" id="NPe)o+p{}rkic*]MS5hT">\n                                            <value name="TEXT">\n                                              <shadow type="text" id="zQ[9iVgDp[AMTD^h@(Hg">\n                                                <field name="TEXT"></field>\n                                              </shadow>\n                                              <block type="variables_get" id="]909*Vrk2h:DUlT!iXyD">\n                                                <field name="VAR" id=":Fbza.{0*q*jalJ+tc#." variabletype="">Expected Profit</field>\n                                              </block>\n                                            </value>\n                                            <next>\n                                              <block type="text_statement" id="KI.t8:Z*6obu/{wj7NFv">\n                                                <value name="TEXT">\n                                                  <shadow type="text" id=",YP5%Da@^sQEn-EOY*eK">\n                                                    <field name="TEXT"></field>\n                                                  </shadow>\n                                                  <block type="text" id="b~cm:3V/3z5YOYha#=Ob">\n                                                    <field name="TEXT">  |  Stop Loss $</field>\n                                                  </block>\n                                                </value>\n                                                <next>\n                                                  <block type="text_statement" id="+8!nj]LfJAx~,(~cmJa!">\n                                                    <value name="TEXT">\n                                                      <shadow type="text" id="3ofqfhf+Mr_uSh_SByXK">\n                                                        <field name="TEXT"></field>\n                                                      </shadow>\n                                                      <block type="variables_get" id=",^zg#LeCF?v!vOCa3C#D">\n                                                        <field name="VAR" id="BTQ{$u318X:bRnhP(mQ9" variabletype="">Stop Loss</field>\n                                                      </block>\n                                                    </value>\n                                                  </block>\n                                                </next>\n                                              </block>\n                                            </next>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </statement>\n                                    <next>\n                                      <block type="notify" id="GOaGb(XZqTPAc5athzR-" collapsed="true">\n                                        <field name="NOTIFICATION_TYPE">info</field>\n                                        <field name="NOTIFICATION_SOUND">earned-money</field>\n                                        <value name="MESSAGE">\n                                          <shadow type="text" id="F1Ev+q~=o]298B5q{KvY">\n                                            <field name="TEXT">abc</field>\n                                          </shadow>\n                                          <block type="variables_get" id="{UHLM+j3WGAcY-W,Z*PX">\n                                            <field name="VAR" id="bw=WNch~q~IyOluni[{w" variabletype="">text</field>\n                                          </block>\n                                        </value>\n                                        <next>\n                                          <block type="variables_set" id="Ml)bUviV4gl8d[.Cqc%E">\n                                            <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                                            <value name="VALUE">\n                                              <block type="math_number" id="_cR^eUvF+.ALU[Y*s5Oj">\n                                                <field name="NUM">0</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </next>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id=";iL5kzxEo`f?:.y/2lkf">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="0W5V~~9Ila$QjH9)6}nv">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="math_number" id="fCs$6V4/P2A8fdF$8_Bl">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="}CP3NPX3xpG{AF#vmWA`">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="?wCJz=I.fwOpVNt_$/kl">\n            <field name="VAR" id="9dQ4tsj$@`vWpu;:2{K=" variabletype="">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="w.*-rl90Ver_!yG_{I}A">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="logic_ternary" id="tT/)D$:F*oS=@%{dbZ_~">\n            <value name="IF">\n              <block type="logic_compare" id="zwB2F2FvMc%..VVc4^Bw">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="jkC.4j)/1q%NhH(`f7`W">\n                    <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="math_number" id="J-T2($h8O|GU*@yDgL*~">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <value name="THEN">\n              <block type="math_number" id="T=`,lp?ytg?=EV{jRN_g">\n                <field name="NUM">9</field>\n              </block>\n            </value>\n            <value name="ELSE">\n              <block type="logic_ternary" id="uPk%5E8b=1wy1Sm;@TM3">\n                <value name="IF">\n                  <block type="logic_compare" id=".26OZ?~q}kvi9Qcvg%Gi">\n                    <field name="OP">GTE</field>\n                    <value name="A">\n                      <block type="variables_get" id="c]qes~EBKIJ_ZdVE(#2$">\n                        <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="w_n8Fz@Msi(F{GEz/hjV">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <value name="THEN">\n                  <block type="math_number" id="Bes#!dp5QqDq}5952Ob#">\n                    <field name="NUM">5</field>\n                  </block>\n                </value>\n                <value name="ELSE">\n                  <block type="logic_ternary" id="54:[KaecyNfyO`9c]%G3">\n                    <value name="IF">\n                      <block type="logic_compare" id="STeaDu`f|:Ial/ueW*ss">\n                        <field name="OP">GTE</field>\n                        <value name="A">\n                          <block type="variables_get" id="MmAhwvIh`?)U=f[UIB-8">\n                            <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="M=Dl~kVN0E-6vrL{(ooy">\n                            <field name="NUM">2</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name="THEN">\n                      <block type="math_number" id=",sZ#`SJY]r2Hu@:oEFbJ">\n                        <field name="NUM">5</field>\n                      </block>\n                    </value>\n                    <value name="ELSE">\n                      <block type="logic_ternary" id="P-GE[3#%%tAQepHeUWu2">\n                        <value name="IF">\n                          <block type="logic_compare" id="TWneymLqMtlr.vobvv)o">\n                            <field name="OP">GTE</field>\n                            <value name="A">\n                              <block type="variables_get" id="2T.t-}tQo|9Qr^t2BgZ:">\n                                <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="math_number" id="JkT,Vr2PbgWKtYAA?*/z">\n                                <field name="NUM">4</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <value name="THEN">\n                          <block type="math_number" id="|{9);Vw7u45_9Dnd]$a=">\n                            <field name="NUM">5</field>\n                          </block>\n                        </value>\n                        <value name="ELSE">\n                          <block type="math_number" id="IwYizQFru!y(O0jScnBQ">\n                            <field name="NUM">5</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="UAC4xR$|pMj{_?BclRyl" x="2655" y="0">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="5w[ZkFOlVjYumIA!Ja7#">\n        <mutation elseif="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="[+xDz7A+36R6~WL(0iJ0">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="9s`G:(V0AX+DBUY3:kz.">\n            <field name="VAR" id="9dQ4tsj$@`vWpu;:2{K=" variabletype="">Stake</field>\n            <value name="VALUE">\n              <block type="variables_get" id="-K)=]-oJ3bK`/sR7YBX!">\n                <field name="VAR" id="!P]:?:q)?v?}qINF%J42" variabletype="">Win Stake</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="YCp~WL1f|LHs2-G~,ENC">\n                <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                <value name="VALUE">\n                  <block type="math_number" id="c*}7E3i{997]::S,aT?G">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <value name="IF1">\n          <block type="contract_check_result" id="G5Dr~$O8{NI2G08;+8|q">\n            <field name="CHECK_RESULT">loss</field>\n          </block>\n        </value>\n        <statement name="DO1">\n          <block type="variables_set" id="1+IAvc:!ML7-vFA:HE(7">\n            <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n            <value name="VALUE">\n              <block type="math_arithmetic" id="e.40ovsE/b3PphBQg^fb">\n                <field name="OP">ADD</field>\n                <value name="A">\n                  <shadow type="math_number" id="q~wiPuz~V$vY4|2MRIH(">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="}|wsc.):(5s^prD+D8Hq">\n                    <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="mhI++Ym(-d)E3Kij]$i[">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="controls_if" id="r[Wj=|C{;)HmTY7j;H.O">\n                <value name="IF0">\n                  <block type="logic_compare" id="r;9v;9td*EF+dn8p]R]L">\n                    <field name="OP">GTE</field>\n                    <value name="A">\n                      <block type="variables_get" id="QW3ONWHGS?/,GAG?8;-?">\n                        <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="k2SM,%neE0KQ/5GpCIwj">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="-a#?VB%[k1W$;Mt/w(:;">\n                    <field name="VAR" id="9dQ4tsj$@`vWpu;:2{K=" variabletype="">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="|CQ(Li)xehyDWs)q}eTx">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="leBB-L|(0tiUw=KV#eo~">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_single" id="@zI4VB`6LG(Q)iy;t!SW">\n                            <field name="OP">ABS</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id="c~C|bkwvhb2sh|^DG$X^">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="read_details" id="[`J#v}B:E_fxBtk2VJW-">\n                                <field name="DETAIL_INDEX">4</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="q2u*`A3zW1~ICpks#(O_">\n                            <field name="NUM">2.1</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="/tya9W0!U)f_5.Eex#{q">\n            <mutation elseif="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="]S[{;lv5ESg*_b:=wm3Z">\n                <field name="CHECK_RESULT">loss</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="controls_if" id="9dO9t+lyT%wS^W.C!71=">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_operation" id="2{G^0=kEOSE=}HD)fT4%">\n                    <field name="OP">AND</field>\n                    <value name="A">\n                      <block type="math_number_property" id="w$I^qmTTjFJO{2m-fk+R">\n                        <mutation divisor_input="false"></mutation>\n                        <field name="PROPERTY">NEGATIVE</field>\n                        <value name="NUMBER_TO_CHECK">\n                          <shadow type="math_number" id="CB_Hj[vL_+c2Anbr3nD$">\n                            <field name="NUM">0</field>\n                          </shadow>\n                          <block type="total_profit" id="KC+%U?~IVW)cSFv`MZ~1"></block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_compare" id="dpB[@5og^oWB[6Zf=%+A">\n                        <field name="OP">GTE</field>\n                        <value name="A">\n                          <block type="math_single" id="E_p7IkxoQL,pJtp7JX|x">\n                            <field name="OP">ABS</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id="T%5!9T?.k{CE8BwhT9ku">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="total_profit" id="*$)Z/2DC6]qynp3_p=n["></block>\n                            </value>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="/OqyHPEEtxNLTX~.Td%Q">\n                            <field name="VAR" id="BTQ{$u318X:bRnhP(mQ9" variabletype="">Stop Loss</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="text_join" id="@Nup7az?O10oNuF6:=(k">\n                    <field name="VARIABLE" id=",^hu|}AYLe!Uy/eB*Xza" variabletype="">text2</field>\n                    <statement name="STACK">\n                      <block type="text_statement" id="Ys*pkk|?KRLfaq}8dyH}">\n                        <value name="TEXT">\n                          <shadow type="text" id="GJZTl0=?znC{r{`s!AL%">\n                            <field name="TEXT"></field>\n                          </shadow>\n                          <block type="text" id="8t%dgyDnACaRA4(XvX9U">\n                            <field name="TEXT">Total Loss $</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="text_statement" id=".Q]ylNHB:$@G?[Hw|1`a">\n                            <value name="TEXT">\n                              <shadow type="text" id="A_CzCaGZPhIhYFM9)g^X">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="total_profit" id="^(mTEk-!)).#GI.$bjJR"></block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="notify" id="SMnE3)wpMlgo8vbmiA.v">\n                        <field name="NOTIFICATION_TYPE">error</field>\n                        <field name="NOTIFICATION_SOUND">error</field>\n                        <value name="MESSAGE">\n                          <shadow type="text" id="DMUwiW7/5Ul5oJ:dBbM;">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="variables_get" id="uX$;mqM5YAq2:7w5z8sZ">\n                            <field name="VAR" id=",^hu|}AYLe!Uy/eB*Xza" variabletype="">text2</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="text_join" id="[XFZO^`rWtol#XZ~C;pR">\n                            <field name="VARIABLE" id="3;41-/yDNM7GQiJ)3t8;" variabletype="">text3</field>\n                            <statement name="STACK">\n                              <block type="text_statement" id="qGA*#aY$B]U=5urGw(+d">\n                                <value name="TEXT">\n                                  <shadow type="text" id="XBwkdy5z+mV!ILp#f67Z">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="text" id="`uzFL*$g5MX3%h8|hZ!A">\n                                    <field name="TEXT">Stop Loss Reached!!! $</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id="!{72$|5zEfBByeSb/Z|2">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="~kI##Ng])v_.m,U;cM:}">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="total_profit" id="D]4~788(Lp$?94~S)^AB"></block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="text_print" id="4)-%@b}w]B{TK~3lR4k;">\n                                <value name="TEXT">\n                                  <shadow type="text" id="ADo$bKVZ^omn/SB|[PG;">\n                                    <field name="TEXT">abc</field>\n                                  </shadow>\n                                  <block type="variables_get" id="xn}gT^p(UJSIt`%Un[$-">\n                                    <field name="VAR" id="3;41-/yDNM7GQiJ)3t8;" variabletype="">text3</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="trade_again" id="xekSLxhq_}FYNBh7W7!."></block>\n                </statement>\n              </block>\n            </statement>\n            <value name="IF1">\n              <block type="contract_check_result" id="X^;Q9ZA;G1@spPI-~=Gf">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO1">\n              <block type="controls_if" id="tPs|1XM7`CrKI)43aq]B">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="/`#wh|rYQ,(Hx?u[h-_|">\n                    <field name="OP">GTE</field>\n                    <value name="A">\n                      <block type="total_profit" id="4Qb82L^_~;EEl}DCqdUw"></block>\n                    </value>\n                    <value name="B">\n                      <block type="variables_get" id=",fM.Z7T7Ym$sYT)?=do|">\n                        <field name="VAR" id=":Fbza.{0*q*jalJ+tc#." variabletype="">Expected Profit</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="text_join" id="(*7+fB/GL$TQj+.ztq=`">\n                    <field name="VARIABLE" id="i)c1G![Sbwc71H79Cxx9" variabletype="">text4</field>\n                    <statement name="STACK">\n                      <block type="text_statement" id="3EzniL.{i|u$8Yoc(T|f">\n                        <value name="TEXT">\n                          <shadow type="text" id="l`2x4n0!iQ5!;`^=_J8;">\n                            <field name="TEXT"></field>\n                          </shadow>\n                          <block type="text" id="-yX^b1}R-VS/Nbgfu#l4">\n                            <field name="TEXT">Total Profit $</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="text_statement" id="c*Qr0)9*{J.h=,F+eXl0">\n                            <value name="TEXT">\n                              <shadow type="text" id="C#acmi5]lwOB[kyGlU=6">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="total_profit" id="R5]Oh?30-QBMuwT.DqID"></block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="notify" id="axfGf[dzs8eKlmKD~=C1">\n                        <field name="NOTIFICATION_TYPE">success</field>\n                        <field name="NOTIFICATION_SOUND">earned-money</field>\n                        <value name="MESSAGE">\n                          <shadow type="text" id="%+ZAZkv0v_T?HTfk3atd">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="variables_get" id="UcZ(EBmtOz#xBcNmFBsT">\n                            <field name="VAR" id="i)c1G![Sbwc71H79Cxx9" variabletype="">text4</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="text_join" id="]n7JRckFuPs9cx:}p-mC">\n                            <field name="VARIABLE" id="fn}w18~E+(.4W*[N}-^@" variabletype="">text5</field>\n                            <statement name="STACK">\n                              <block type="text_statement" id="^yJSQK!Zl}9B@0fNNhJw">\n                                <value name="TEXT">\n                                  <shadow type="text" id="r4(RepgEe,U8Hx|~{j0$">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="text" id="IG0lU9s(V-(QJQ{!/Vxp">\n                                    <field name="TEXT">AUTO C4 PRO 1 [By\uD83D\uDCB5 C. E. O FREDDY ] </field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="text_statement" id=";:-.3+3jL%dI{~MYqhfq">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="/Swd-3P%^$VGE=;U1Dgj">\n                                        <field name="TEXT"></field>\n                                      </shadow>\n                                      <block type="text" id="`M[c7c0InH,HjEczH,{x">\n                                        <field name="TEXT">•Profit Achieved!!! $</field>\n                                      </block>\n                                    </value>\n                                    <next>\n                                      <block type="text_statement" id="VZK/Kpy0eq~y%wW/AvCV">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="h5TnPe7yr3sWR=m,1]yF">\n                                            <field name="TEXT"></field>\n                                          </shadow>\n                                          <block type="total_profit" id="i]enl}hC_aE3Fmkt|5l1"></block>\n                                        </value>\n                                      </block>\n                                    </next>\n                                  </block>\n                                </next>\n                              </block>\n                            </statement>\n                            <next>\n                              <block type="text_print" id="n74Jv9*[jq[a`s/8e6.[">\n                                <value name="TEXT">\n                                  <shadow type="text" id="_3`]kP4Il~ums,Y:OTTi">\n                                    <field name="TEXT">abc</field>\n                                  </shadow>\n                                  <block type="variables_get" id="JF_Uy*55x|h]*7#_%)vS">\n                                    <field name="VAR" id="fn}w18~E+(.4W*[N}-^@" variabletype="">text5</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="trade_again" id=".-|%U17au,9uLOZbM?h="></block>\n                </statement>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="z)/BQSi(pTa`6r,jB,tG" deletable="false" x="0" y="1416">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="notify" id="X@TFP,L@:1Q0/g(XaS,+" collapsed="true">\n        <field name="NOTIFICATION_TYPE">info</field>\n        <field name="NOTIFICATION_SOUND">silent</field>\n        <value name="MESSAGE">\n          <shadow type="text" id="WxR+#D?TAfUGuz*ivI33">\n            <field name="TEXT">AUTO C4 PRO 1 [BY\uD83D\uDCB5C. E. O FREDDY] </field>\n          </shadow>\n        </value>\n        <next>\n          <block type="text_join" id="kHJ]G9_TqUU(5M5_/gIW">\n            <field name="VARIABLE" id="5sjtQu$-/?=Smx**u,[," variabletype="">text1</field>\n            <statement name="STACK">\n              <block type="text_statement" id="ZC/X=XSbJvLUOCTf?gS*">\n                <value name="TEXT">\n                  <shadow type="text" id="D0z@!aN^Aua1GX~4X%II">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="Gt(_8)@F!fOH0bK{DEwc">\n                    <field name="TEXT">Last Digit &gt;&gt; </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="]Eq|;.JmaM/%|bE/He^:">\n                    <value name="TEXT">\n                      <shadow type="text" id="dakT^~w[Gq=VbEZQiE_R">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="last_digit" id="x67!a,REPR6dZiU?(+6X"></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id="!F`!UJkn2E0iP{4n2LSO">\n                <field name="NOTIFICATION_TYPE">info</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="]]gyc(ZrL7VdMoQ9oPmm">\n                    <field name="TEXT">[Optimus Binary Traders]</field>\n                  </shadow>\n                  <block type="variables_get" id="iB*GZ!^lkR;`-3G+x0@m">\n                    <field name="VAR" id="5sjtQu$-/?=Smx**u,[," variabletype="">text1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id=",qUhZPf((2}[zOGQKAu3">\n                    <field name="VAR" id="7/Cs|{m_XjDwo::I6g5A" variabletype="">Random</field>\n                    <value name="VALUE">\n                      <block type="math_random_int" id="xPG)F]J1F[KDE.?NN(mo">\n                        <value name="FROM">\n                          <shadow type="math_number" id="`Cz[/20,U|^7|*5|:@8u">\n                            <field name="NUM">0</field>\n                          </shadow>\n                        </value>\n                        <value name="TO">\n                          <shadow type="math_number" id="Iac6%SXuJTBB_#GtDD@6">\n                            <field name="NUM">9</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="controls_if" id="I6IGvQlgQZ=Ja=mhP.ql">\n                        <mutation elseif="2" else="1"></mutation>\n                        <value name="IF0">\n                          <block type="logic_operation" id="QlS06_93yu|pwiBJeIoE">\n                            <field name="OP">AND</field>\n                            <value name="A">\n                              <block type="logic_compare" id="gE*xeSzZgdO;BcSza9[d">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="6J3ajC|RwbQvF+cci$[9">\n                                    <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="`IKA#agi*0GRvzKmzGnL">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_compare" id="|TyTeI9a6uaD=/P5iEHI">\n                                <field name="OP">GTE</field>\n                                <value name="A">\n                                  <block type="variables_get" id="N5.!}L}tzIU)5a+ZtE,%">\n                                    <field name="VAR" id="7/Cs|{m_XjDwo::I6g5A" variabletype="">Random</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="PS5bBj_sO,],#e|{,w:`">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="notify" id="dU6]Du.1fRxc3VhYhhG,">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="#RWG3t,eaqS?f._su}[[">\n                                <field name="TEXT">Now Trading Under 9</field>\n                              </shadow>\n                            </value>\n                            <next>\n                              <block type="purchase" id="Qm3)8JtLKaF=,rJ$u*v0">\n                                <field name="PURCHASE_LIST">DIGITUNDER</field>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <value name="IF1">\n                          <block type="logic_operation" id="1cW$XicBGD,%QqU_]:cT">\n                            <field name="OP">AND</field>\n                            <value name="A">\n                              <block type="logic_compare" id="Ft`^@|Z@yI]@9++TZ0Bo">\n                                <field name="OP">GTE</field>\n                                <value name="A">\n                                  <block type="variables_get" id="OCc_=P+)R~j|Tkt3{ymw">\n                                    <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="A/LfG0.Q;RPh,HC0W%:*">\n                                    <field name="NUM">1</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_compare" id="_tR,Vu/.px-pm+ncmFLW">\n                                <field name="OP">GTE</field>\n                                <value name="A">\n                                  <block type="variables_get" id="R~P9gE)eUyjO9i1H*pyg">\n                                    <field name="VAR" id="7/Cs|{m_XjDwo::I6g5A" variabletype="">Random</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="MsO735IUQ^Wb$uZy]tmO">\n                                    <field name="NUM">6</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO1">\n                          <block type="notify" id="$rXR+U#r_w.OJk(8jqv:">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="|SxG7HQs#*_r,fEC.=Fp">\n                                <field name="TEXT">Now Trading Under 5</field>\n                              </shadow>\n                            </value>\n                            <next>\n                              <block type="purchase" id="OmBwVe/Oe$,;4rDRUv$^">\n                                <field name="PURCHASE_LIST">DIGITUNDER</field>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <value name="IF2">\n                          <block type="logic_operation" id="3{t:%htN9lAEtV)ErvEb">\n                            <field name="OP">AND</field>\n                            <value name="A">\n                              <block type="logic_compare" id="!!T4iXP*wXM}1H%{*8?p">\n                                <field name="OP">GTE</field>\n                                <value name="A">\n                                  <block type="variables_get" id="5(eIFLogRmTyj!3J*TiV">\n                                    <field name="VAR" id="`=|V?TV%1c6]^Pvh=CK/" variabletype="">Loss</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="0mp3)2;y7v_R5|+@FXNm">\n                                    <field name="NUM">2</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_compare" id="-X+Yj9{Oo8|Hv+w_K^#-">\n                                <field name="OP">LTE</field>\n                                <value name="A">\n                                  <block type="variables_get" id="zR$TZ7;gjg5vWrjfK}|R">\n                                    <field name="VAR" id="7/Cs|{m_XjDwo::I6g5A" variabletype="">Random</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="math_number" id="w;:dc9p0/AVP5pr50a8c">\n                                    <field name="NUM">4</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO2">\n                          <block type="notify" id="A~jw?g.s9MAd^mkGPalI">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="j:jC_!(G!n_,lDJ2dw/*">\n                                <field name="TEXT">Still Trading Under 5</field>\n                              </shadow>\n                            </value>\n                            <next>\n                              <block type="purchase" id="1?pO4e5/`p=R[^AIEEm$">\n                                <field name="PURCHASE_LIST">DIGITUNDER</field>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <statement name="ELSE">\n                          <block type="purchase" id="pot5,HAbP^g.ZPd.vHT#">\n                            <field name="PURCHASE_LIST">DIGITUNDER</field>\n                          </block>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n</xml>',
          },
          {
            id: 2,
            name: "Dollar printer \uD83D\uDCB8\uD83D\uDCB9binary-bot",
            xml: '<xml xmlns="http://www.w3.org/1999/xhtml" collection="false">\n  <variables>\n    <variable type="" id="/shM51Nl|.I_R[9=PPJd">dalembert:resultIsWin</variable>\n    <variable type="" id="8-FGM6FF)6Y!:[]L7ZW0">dalembert:profit</variable>\n    <variable type="" id="dO,2jA#,W(l+~Rs7@l[|">stake</variable>\n    <variable type="" id="J3g++(PvQv/)qGUt#G2:">trader</variable>\n    <variable type="" id="weOIq50C[S,Wr;`!|gYR">dalembert:totalProfit</variable>\n    <variable type="" id="[w@pzvBAlteju[8,x#hD">dalembert:tradeAgain</variable>\n    <variable type="" id="C1sj}QRP*^Ngjgv+U:yR">stake win</variable>\n    <variable type="" id="ZGpA`4foih2T_0.]xE66">dalembert:expectedProfit</variable>\n    <variable type="" id="o((rBg*rL/qm;RU%PM7_">dalembert:size</variable>\n    <variable type="" id="-PgUuax5KQf1zn42iCd~">dalembert:amount</variable>\n    <variable type="" id="R2yOKK{FmV|TULnU8.,[">dalembert:profitUnits</variable>\n    <variable type="" id="@nr#0%ma@V~6H5D#nWB[">martingale</variable>\n    <variable type="" id="%o8CQE,uNdg`rmRL:-ca">dalembert:maximumLoss</variable>\n    <variable type="" id="P)NjFI#Az8j_imPxVHT{">take profit</variable>\n    <variable type="" id="Af6WwokSaL9#7sS#fHwZ">rsi</variable>\n  </variables>\n  <block type="trade" id="xgH69|xFn9=70w.*3Vo@" x="-134" y="-148">\n    <field name="MARKET_LIST">synthetic_index</field>\n    <field name="SUBMARKET_LIST">random_index</field>\n    <field name="SYMBOL_LIST">R_50</field>\n    <field name="TRADETYPECAT_LIST">digits</field>\n    <field name="TRADETYPE_LIST">evenodd</field>\n    <field name="TYPE_LIST">both</field>\n    <field name="CANDLEINTERVAL_LIST">60</field>\n    <field name="TIME_MACHINE_ENABLED">FALSE</field>\n    <field name="RESTARTONERROR">TRUE</field>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="xuScAp;eOn*L5u{n4M^E">\n        <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n        <value name="VALUE">\n          <block type="math_number" id="[c5yLi4G|uk0~Lr@m-fx">\n            <field name="NUM">0.5</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="m,6d3TYRlb;Zb|*YaS59">\n            <field name="VAR" id="C1sj}QRP*^Ngjgv+U:yR" variabletype="">stake win</field>\n            <value name="VALUE">\n              <block type="variables_get" id=")BEr-`LosGajs5yxBTs1">\n                <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="~u:7#J%K;q97Z6g[oZlr">\n                <field name="VAR" id="@nr#0%ma@V~6H5D#nWB[" variabletype="">martingale</field>\n                <value name="VALUE">\n                  <block type="math_number" id="ZnJYt2fIm:FlLWLQiyQU">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id=",!5VN1|afV#%K:8]!EV^">\n                    <field name="VAR" id="P)NjFI#Az8j_imPxVHT{" variabletype="">take profit</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="##R:`pUqt:qQ1kH5M*p]">\n                        <field name="NUM">80</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="variables_set" id="q[-nJb1Q+|ZyLN*CgFTk">\n        <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n        <value name="VALUE">\n          <block type="logic_null" id="(]wM.%WLpeDncY,rg[b!"></block>\n        </value>\n        <next>\n          <block type="controls_whileUntil" id="d5Pm~jI3Lq_ezNvXa|;w">\n            <field name="MODE">UNTIL</field>\n            <value name="BOOL">\n              <block type="logic_compare" id="7J8k`Id*7G=lfO=Fgo|/">\n                <field name="OP">NEQ</field>\n                <value name="A">\n                  <block type="variables_get" id="pXzZ)Fu{nE|$@w;7:Jq=">\n                    <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="logic_null" id="lBvJibb3!R8pN/8$(n6J"></block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO">\n              <block type="controls_if" id=";0z5t~q[wz!JSkn04Db{">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="math_number_property" id="2#A%Be`vi.KtL|agk#W%">\n                    <mutation divisor_input="false"></mutation>\n                    <field name="PROPERTY">EVEN</field>\n                    <value name="NUMBER_TO_CHECK">\n                      <shadow type="math_number" id="]JcdfTE{eZI)!aCt=A9z">\n                        <field name="NUM">0</field>\n                      </shadow>\n                      <block type="total_runs" id="-@-I.j8o}tpl9^X(]Z=^"></block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="controls_if" id="9Dp}Jf.PGcNAe{4s+D/A">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="math_number_property" id="dPGH?++*Mb9uZA9JEtJ^">\n                        <mutation divisor_input="false"></mutation>\n                        <field name="PROPERTY">EVEN</field>\n                        <value name="NUMBER_TO_CHECK">\n                          <shadow type="math_number" id="]JcdfTE{eZI)!aCt=A9z">\n                            <field name="NUM">0</field>\n                          </shadow>\n                          <block type="last_digit" id=";3h,Tw6:Tfx78XdH_4i("></block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="}R=4O:w4}.?{L$A]=/xf">\n                        <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                        <value name="VALUE">\n                          <block type="text" id="ds{:Ht-)-F?~R+U~m[x1">\n                            <field name="TEXT">put</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="notify" id="S2ef0ET}v?qrguYTZR5o">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="text_join" id="#d]XT5cVW6h`.a.E?UBn">\n                                <mutation items="5"></mutation>\n                                <value name="ADD0">\n                                  <block type="variables_get" id="cuX%S8Sv?=TXVM(v+lm@">\n                                    <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                                  </block>\n                                </value>\n                                <value name="ADD1">\n                                  <block type="text" id="SC;P}p$+S36h6,0Cz?zP">\n                                    <field name="TEXT">   </field>\n                                  </block>\n                                </value>\n                                <value name="ADD2">\n                                  <block type="variables_get" id="M_4GNvD0[fq*a[pat!3.">\n                                    <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                                  </block>\n                                </value>\n                                <value name="ADD3">\n                                  <block type="text" id="vy%:u.~Bn|c41J0TN-Oc">\n                                    <field name="TEXT">✅</field>\n                                  </block>\n                                </value>\n                                <value name="ADD4">\n                                  <block type="text" id="wE$p@/U]tD(%~)vlVikZ">\n                                    <field name="TEXT"> ⇶ </field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="timeout" id="arY6150c@w/Ohg-=5*W.">\n                                <statement name="TIMEOUTSTACK">\n                                  <block type="tradeOptions" id="O{l#o6HlUSh:I,l;$==;">\n                                    <field name="DURATIONTYPE_LIST">t</field>\n                                    <field name="CURRENCY_LIST">USD</field>\n                                    <field name="BARRIEROFFSETTYPE_LIST">+</field>\n                                    <field name="SECONDBARRIEROFFSETTYPE_LIST">-</field>\n                                    <value name="DURATION">\n                                      <shadow type="math_number" id="}uq/#zeUjTQJ4F?Ts@t}">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                    </value>\n                                    <value name="AMOUNT">\n                                      <shadow type="math_number" id="ml)25~7^q}3I9}vjf:%K">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="0=uc48UqlEwvhPQ0{]}P">\n                                        <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                                <value name="SECONDS">\n                                  <shadow type="math_number" id="5dOrZ4n{Xwl/[$aOzEqW">\n                                    <field name="NUM">0.000001</field>\n                                  </shadow>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="variables_set" id=".Ur3^Ymo3%XtVwQ8$=Y.">\n                        <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                        <value name="VALUE">\n                          <block type="text" id="W~(l|@Z*@_5EznNDN+E@">\n                            <field name="TEXT">call</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="notify" id="~V7)Z:kUz-tP/]HN@pr%">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="text_join" id="3[Avlw?NK0]VD*Ji?*j5">\n                                <mutation items="5"></mutation>\n                                <value name="ADD0">\n                                  <block type="variables_get" id="D]MxH}83X`sam{9K-?kf">\n                                    <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                                  </block>\n                                </value>\n                                <value name="ADD1">\n                                  <block type="text" id="n{+ugc3YnMf+a~}V]gJd">\n                                    <field name="TEXT">   </field>\n                                  </block>\n                                </value>\n                                <value name="ADD2">\n                                  <block type="variables_get" id="n}pfY[(]^N^x%^h()#3O">\n                                    <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                                  </block>\n                                </value>\n                                <value name="ADD3">\n                                  <block type="text" id="n^c@r_,NcJ@l},^)?@@R">\n                                    <field name="TEXT">✅</field>\n                                  </block>\n                                </value>\n                                <value name="ADD4">\n                                  <block type="text" id="Ka4VzUobhX0Vjz@nv2s[">\n                                    <field name="TEXT"> ⇶ </field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="timeout" id="yA][4g[.$0,3ZIgQYG(Y">\n                                <statement name="TIMEOUTSTACK">\n                                  <block type="tradeOptions" id="l1(iUk=4{Ld3XP6%{.[%">\n                                    <field name="DURATIONTYPE_LIST">t</field>\n                                    <field name="CURRENCY_LIST">USD</field>\n                                    <field name="BARRIEROFFSETTYPE_LIST">+</field>\n                                    <field name="SECONDBARRIEROFFSETTYPE_LIST">-</field>\n                                    <value name="DURATION">\n                                      <shadow type="math_number" id="x/r6U@0.),diY{`SL3d6">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                    </value>\n                                    <value name="AMOUNT">\n                                      <shadow type="math_number" id="ml)25~7^q}3I9}vjf:%K">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id=":BfQZNL^@WhQHIc/m+b4">\n                                        <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                                <value name="SECONDS">\n                                  <shadow type="math_number" id="sG?:T}cQ}}of,5.fS0cd">\n                                    <field name="NUM">0.000001</field>\n                                  </shadow>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="controls_if" id="R5AJmD/BcjBX=zOVufw3">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="math_number_property" id="2][w$W!zE*MLMG`D,d~M">\n                        <mutation divisor_input="false"></mutation>\n                        <field name="PROPERTY">EVEN</field>\n                        <value name="NUMBER_TO_CHECK">\n                          <shadow type="math_number" id="]JcdfTE{eZI)!aCt=A9z">\n                            <field name="NUM">0</field>\n                          </shadow>\n                          <block type="last_digit" id="9.8n2J]l^K$_:,,9a1X7"></block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="dhkoR$OlFr}w4atu#{mC">\n                        <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                        <value name="VALUE">\n                          <block type="text" id="8zd7R=0K6$AU^l5Nc04a">\n                            <field name="TEXT">call</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="notify" id="sw[-[fg!8)!bv3V8)/2a">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="text_join" id="d|N/S--{+lgjJ6A?AyF7">\n                                <mutation items="5"></mutation>\n                                <value name="ADD0">\n                                  <block type="variables_get" id=":27_.2d]*_iyPdi@^hWR">\n                                    <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                                  </block>\n                                </value>\n                                <value name="ADD1">\n                                  <block type="text" id=".4qQ7~[,41oeY_P(iCwH">\n                                    <field name="TEXT">   </field>\n                                  </block>\n                                </value>\n                                <value name="ADD2">\n                                  <block type="variables_get" id="W*)YY~o_^_muc}5n8n=N">\n                                    <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                                  </block>\n                                </value>\n                                <value name="ADD3">\n                                  <block type="text" id=".J|w^{(Y/d6LeOJo8fbr">\n                                    <field name="TEXT">✅</field>\n                                  </block>\n                                </value>\n                                <value name="ADD4">\n                                  <block type="text" id="o:a)W!c4RVu}Rs9xK.s0">\n                                    <field name="TEXT"> ⇶ </field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="timeout" id="6=KQux0QzcH!lcrpPN]w">\n                                <statement name="TIMEOUTSTACK">\n                                  <block type="tradeOptions" id="j6X5/tMmK4VkTTE#jrkf">\n                                    <field name="DURATIONTYPE_LIST">t</field>\n                                    <field name="CURRENCY_LIST">USD</field>\n                                    <field name="BARRIEROFFSETTYPE_LIST">+</field>\n                                    <field name="SECONDBARRIEROFFSETTYPE_LIST">-</field>\n                                    <value name="DURATION">\n                                      <shadow type="math_number" id="bC!)PAq^%o6AR@~Dn7t#">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                    </value>\n                                    <value name="AMOUNT">\n                                      <shadow type="math_number" id="ml)25~7^q}3I9}vjf:%K">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="30@0sL/{{.B+_cz3tIGx">\n                                        <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                                <value name="SECONDS">\n                                  <shadow type="math_number" id="ND~F83^yX|t/,nl+85EY">\n                                    <field name="NUM">0.000001</field>\n                                  </shadow>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="variables_set" id="{1;{CqQ4t;3P^:0Ayt+G">\n                        <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                        <value name="VALUE">\n                          <block type="text" id="ZT,{-.%rzD8wm6~M1_.Y">\n                            <field name="TEXT">call</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="notify" id="QyZDhNj3pp4MBm:-!`~%">\n                            <field name="NOTIFICATION_TYPE">success</field>\n                            <field name="NOTIFICATION_SOUND">silent</field>\n                            <value name="MESSAGE">\n                              <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="text_join" id="XN3A|(Ox=~ZbTb=[3g5]">\n                                <mutation items="5"></mutation>\n                                <value name="ADD0">\n                                  <block type="variables_get" id="8dgw#.%p`]AuoM(=l*ws">\n                                    <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                                  </block>\n                                </value>\n                                <value name="ADD1">\n                                  <block type="text" id="$WDAdZRIOxonr!(/.EqD">\n                                    <field name="TEXT">   </field>\n                                  </block>\n                                </value>\n                                <value name="ADD2">\n                                  <block type="variables_get" id="U{fJ{3(Pw]x5PEB=2j)R">\n                                    <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                                  </block>\n                                </value>\n                                <value name="ADD3">\n                                  <block type="text" id="D{){sI4]+#vej40AUs48">\n                                    <field name="TEXT">✅</field>\n                                  </block>\n                                </value>\n                                <value name="ADD4">\n                                  <block type="text" id="hwVo9e5^t=e%`JO$u|+*">\n                                    <field name="TEXT"> ⇶ </field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="timeout" id="/yg4]/^S?IJeB(6u,ukS">\n                                <statement name="TIMEOUTSTACK">\n                                  <block type="tradeOptions" id="+Mt/r$U@9qAjJZB8]ei$">\n                                    <field name="DURATIONTYPE_LIST">t</field>\n                                    <field name="CURRENCY_LIST">USD</field>\n                                    <field name="BARRIEROFFSETTYPE_LIST">+</field>\n                                    <field name="SECONDBARRIEROFFSETTYPE_LIST">-</field>\n                                    <value name="DURATION">\n                                      <shadow type="math_number" id="xFxtL%k0F~Xvz}1|gWF=">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                    </value>\n                                    <value name="AMOUNT">\n                                      <shadow type="math_number" id="ml)25~7^q}3I9}vjf:%K">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="variables_get" id="tVxPw27?i/c@o2?Ji]GY">\n                                        <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                                <value name="SECONDS">\n                                  <shadow type="math_number" id="$Ws(Bmjh9T65=89v|lDP">\n                                    <field name="NUM">0.000001</field>\n                                  </shadow>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </statement>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id=".{;r0.=RTBSC;X8[pyj{">\n                <field name="NOTIFICATION_TYPE">warn</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text_join" id=":85n,h$7V/L*Pr4Is+oz">\n                    <mutation items="5"></mutation>\n                    <value name="ADD0">\n                      <block type="variables_get" id="N8(I|$xM#pv/PFJlAJsN">\n                        <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                      </block>\n                    </value>\n                    <value name="ADD1">\n                      <block type="text" id="5^_eSd^R/#,f{85pEG37">\n                        <field name="TEXT">   </field>\n                      </block>\n                    </value>\n                    <value name="ADD2">\n                      <block type="variables_get" id="75f$}.~(XXLD4xd6wol*">\n                        <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                      </block>\n                    </value>\n                    <value name="ADD3">\n                      <block type="text" id="nEFR-{?ZFnZ}-2vb?vJ8">\n                        <field name="TEXT">❌</field>\n                      </block>\n                    </value>\n                    <value name="ADD4">\n                      <block type="text" id="2m$^$Z|XFsNO[*Sy$Z-$">\n                        <field name="TEXT"> ⇶ </field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defreturn" id="qq2xGirc*Byb/P/HE^]H" collapsed="true" x="0" y="2121">\n    <field name="NAME">D\'Alembert Trade Amount</field>\n    <comment pinned="false" h="80" w="160">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="controls_if" id="n4tz9*`uW5vI{Y(mwC)L">\n        <value name="IF0">\n          <block type="logic_compare" id="3qWA5gevZ|UpE{.gFl4n">\n            <field name="OP">EQ</field>\n            <value name="A">\n              <block type="variables_get" id="nXPxXCq9p:hf1Xx:`D_{">\n                <field name="VAR" id="ZGpA`4foih2T_0.]xE66" variabletype="">dalembert:expectedProfit</field>\n              </block>\n            </value>\n            <value name="B">\n              <block type="logic_null" id="Tp8pr^]@7PA~eGl`XK?b"></block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="p8_@*8We560p~d]XEj-I">\n            <field name="VAR" id="ZGpA`4foih2T_0.]xE66" variabletype="">dalembert:expectedProfit</field>\n            <value name="VALUE">\n              <block type="text_prompt_ext" id="%r0#U,KXY;)S1-I},GCs">\n                <mutation type="NUMBER"></mutation>\n                <field name="TYPE">NUMBER</field>\n                <value name="TEXT">\n                  <shadow type="text" id=".P`a1!r=yj-[H(SJX}_m">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text" id="AlB(yFhIT1/FZu-ZEpqQ">\n                    <field name="TEXT">Expected Profit</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="qa:)sj8|A!lxwG*|YaO]">\n            <value name="IF0">\n              <block type="logic_compare" id="fo(G)bKdQhx,?aEY[Yl}">\n                <field name="OP">EQ</field>\n                <value name="A">\n                  <block type="variables_get" id="`Geg[{!:(HTr6q)A];`0">\n                    <field name="VAR" id="%o8CQE,uNdg`rmRL:-ca" variabletype="">dalembert:maximumLoss</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="logic_null" id="!X8^fykpJtsH#Il8+Wh9"></block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="variables_set" id="t3Gw#E]HVqIM/6J-t-2Y">\n                <field name="VAR" id="%o8CQE,uNdg`rmRL:-ca" variabletype="">dalembert:maximumLoss</field>\n                <value name="VALUE">\n                  <block type="text_prompt_ext" id="K[Cz2)F(1ny#Zw!j7j!V">\n                    <mutation type="NUMBER"></mutation>\n                    <field name="TYPE">NUMBER</field>\n                    <value name="TEXT">\n                      <shadow type="text" id=".P`a1!r=yj-[H(SJX}_m">\n                        <field name="TEXT">abc</field>\n                      </shadow>\n                      <block type="text" id="dfNPxr:VpC%uF[yz%xk[">\n                        <field name="TEXT">Maximum Loss Amount</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </statement>\n            <next>\n              <block type="controls_if" id="^CEM+~9aQ2uhnXtkL`kv">\n                <value name="IF0">\n                  <block type="logic_compare" id="wL4k~{ia}[/ON_+z47RO">\n                    <field name="OP">EQ</field>\n                    <value name="A">\n                      <block type="variables_get" id="WjGS@!}HI|kFH{rJqavk">\n                        <field name="VAR" id="-PgUuax5KQf1zn42iCd~" variabletype="">dalembert:amount</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="logic_null" id="qTK#~^WMVK;Wyz1LJ/@d"></block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="ZxKDnNw2?MsznEZQtR6`">\n                    <field name="VAR" id="-PgUuax5KQf1zn42iCd~" variabletype="">dalembert:amount</field>\n                    <value name="VALUE">\n                      <block type="text_prompt_ext" id="^4peSz1pJ=`,CaD#@6Jd">\n                        <mutation type="NUMBER"></mutation>\n                        <field name="TYPE">NUMBER</field>\n                        <value name="TEXT">\n                          <shadow type="text" id=".P`a1!r=yj-[H(SJX}_m">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="text" id="=6eX{Eblptb4BBlz7?U[">\n                            <field name="TEXT">Trade Amount</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type="controls_if" id="kC@O!Xl:KO^G_(uzKTzH">\n                    <value name="IF0">\n                      <block type="logic_compare" id="@|K%}q0X`VebpuZQ=EV*">\n                        <field name="OP">EQ</field>\n                        <value name="A">\n                          <block type="variables_get" id="(xdUld=/ZoI`Y#*TZfMw">\n                            <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="logic_null" id="CA@kQ}mQ:c8NW0=5Ed[."></block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="variables_set" id="^xOi2|SaRE2S4sk8(u74">\n                        <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="v]w4MInl_BA/~uV5yCK3">\n                            <field name="NUM">1</field>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <next>\n                      <block type="controls_if" id="h,Nbdz7YuKUY`Gfbpf|m">\n                        <value name="IF0">\n                          <block type="logic_compare" id="sb^6?GtDqE1.gRR,o^6w">\n                            <field name="OP">EQ</field>\n                            <value name="A">\n                              <block type="variables_get" id="Af?3G/kU#Zr*:F:)!TXF">\n                                <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_null" id="bQQ+#eD?`3tP=4tI@B9S"></block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="variables_set" id="lw``#pLseumYH8FC2--~">\n                            <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="pOIB*s(LL2r5s}F#_Fs1">\n                                <field name="NUM">0</field>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="controls_if" id="fwmgCgdRdN{)3S|t|fn7">\n                            <value name="IF0">\n                              <block type="logic_compare" id="pj:P)Py2NsbQ8@=5Y9D=">\n                                <field name="OP">EQ</field>\n                                <value name="A">\n                                  <block type="variables_get" id="5A]k/?)Q#Xi4G,Wpd;Pz">\n                                    <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="logic_null" id=";,X}K#n`DxM#4`t;d~Cc"></block>\n                                </value>\n                              </block>\n                            </value>\n                            <statement name="DO0">\n                              <block type="variables_set" id="MmEFyqc*]VjjlJZzlNt[">\n                                <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="DcgRnz]nVdJyT*eH=v!;">\n                                    <field name="NUM">0</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </statement>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <value name="RETURN">\n      <block type="math_arithmetic" id="9oY.1lAF`%[xoFKW!Vak">\n        <field name="OP">MULTIPLY</field>\n        <value name="A">\n          <shadow type="math_number" id="!N5Q!/XB/Zq(Yh8GZNXa">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="Zb1gI0smw}o}MYn(O2z7">\n            <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n          </block>\n        </value>\n        <value name="B">\n          <shadow type="math_number" id="_MIi~6{+puJoIPRIyX8S">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="dZh,rVm,Z,HL;@*{;ZGS">\n            <field name="VAR" id="-PgUuax5KQf1zn42iCd~" variabletype="">dalembert:amount</field>\n          </block>\n        </value>\n      </block>\n    </value>\n  </block>\n  <block type="procedures_defnoreturn" id="yNTO_g~CmG;eLIF(#(Fq" collapsed="true" x="0" y="2174">\n    <mutation>\n      <arg name="dalembert:resultIsWin" varid="/shM51Nl|.I_R[9=PPJd"></arg>\n    </mutation>\n    <field name="NAME">D\'Alembert Core Functionality</field>\n    <comment pinned="false" h="80" w="160">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="controls_if" id="du_v/n9L4`|ArT@vt^u(">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="variables_get" id="P]*Fp7~p#Lj1S#`(3rAr">\n            <field name="VAR" id="/shM51Nl|.I_R[9=PPJd" variabletype="">dalembert:resultIsWin</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="!=lcrD.j^lG@TEIG!Wt+">\n            <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n            <value name="VALUE">\n              <block type="math_arithmetic" id="TdC9Atw|9KH;~yI[5d-{">\n                <field name="OP">ADD</field>\n                <value name="A">\n                  <shadow type="math_number" id="ZI-r}kzT8Y=p.GdTq7lH">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="X7ro_Db;}l{v^YAzQBbu">\n                    <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="{Y2dS`Z1{(w6k%yQoR~m">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="^KQ1@hKbpC)EO-!1Vkh(">\n                    <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="controls_if" id="T+LMuBa?y@W4es3Z}sjZ">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="logic_compare" id="~dgK]Iz*%C46;r+~8#}!">\n                    <field name="OP">GT</field>\n                    <value name="A">\n                      <block type="variables_get" id="W2eGOw^LKa45XEtku6}W">\n                        <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="math_number" id="#s1ADC9}k|_{6N3I*+|Y">\n                        <field name="NUM">1</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="variables_set" id="LUJS=P2(!/IWCRY:IsTl">\n                    <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="7#hL./MNVEX(Gb#D`~EC">\n                        <field name="OP">MINUS</field>\n                        <value name="A">\n                          <shadow type="math_number" id="yo:WX(YXv,7m)@[dD*T6">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="%:^P@RJGx^xUN2aftCd@">\n                            <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="xWP@Cne~D[-/%I4}kMHm">\n                            <field name="NUM">1</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="variables_set" id="}HweP{]-KGldbObsN5ja">\n                    <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="F_|2V`E6ObE80k~?NztP">\n                        <field name="NUM">0</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="notify" id="#sbO?-oLMKqQZk(C3=v?">\n                        <field name="NOTIFICATION_TYPE">success</field>\n                        <field name="NOTIFICATION_SOUND">silent</field>\n                        <value name="MESSAGE">\n                          <block type="text" id="N0Ms_cA_dls{(fg4o]rE">\n                            <field name="TEXT">One DAlembert session finished successfully.</field>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="variables_set" id="/-d0;K+{pd79q%;p^o6!">\n            <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n            <value name="VALUE">\n              <block type="math_arithmetic" id="^1(jnI}%J5*f^qdE~e%!">\n                <field name="OP">MINUS</field>\n                <value name="A">\n                  <shadow type="math_number" id="ZI-r}kzT8Y=p.GdTq7lH">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id="uI[tG5Ijf_[ihid2hC0t">\n                    <field name="VAR" id="R2yOKK{FmV|TULnU8.,[" variabletype="">dalembert:profitUnits</field>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id="{Y2dS`Z1{(w6k%yQoR~m">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="variables_get" id=":yC#6A!Y3xuMNiwm-fdB">\n                    <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="?QPU}PR2doaiC^[4f2(d">\n                <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                <value name="VALUE">\n                  <block type="math_arithmetic" id="{p%YL?+Yk3!+=*tM_dR/">\n                    <field name="OP">ADD</field>\n                    <value name="A">\n                      <shadow type="math_number" id="yo:WX(YXv,7m)@[dD*T6">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="variables_get" id="cp=ul.-FT,41`IF2Gzix">\n                        <field name="VAR" id="o((rBg*rL/qm;RU%PM7_" variabletype="">dalembert:size</field>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <shadow type="math_number" id="X@amaJRGiwc^;5j.8f4T">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n  <block type="procedures_defreturn" id="_b//g0Q,2OW8MbY^`J3E" collapsed="true" x="0" y="2227">\n    <mutation>\n      <arg name="dalembert:profit" varid="8-FGM6FF)6Y!:[]L7ZW0"></arg>\n      <arg name="dalembert:resultIsWin" varid="/shM51Nl|.I_R[9=PPJd"></arg>\n    </mutation>\n    <field name="NAME">D\'Alembert Trade Again After Purchase</field>\n    <comment pinned="false" h="80" w="160">Describe this function...</comment>\n    <statement name="STACK">\n      <block type="math_change" id="5ph^#sJ_|cnLn{}e(%Z{">\n        <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n        <value name="DELTA">\n          <shadow type="math_number" id="[)Nh?MH}TXeN]0n(Q?PP">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="Kj+o2HPe^1#-J*pl.VD9">\n            <field name="VAR" id="8-FGM6FF)6Y!:[]L7ZW0" variabletype="">dalembert:profit</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="=``}2YqGE51x5XO#O{A6">\n            <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n            <value name="VALUE">\n              <block type="math_arithmetic" id="m9HUE{JvBzON.?`k.p0L">\n                <field name="OP">DIVIDE</field>\n                <value name="A">\n                  <shadow type="math_number" id="Y445k*N9Y{3k^0nU:f/a">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_round" id="eOhznKTK*Yn[R~s!l7p;">\n                    <field name="OP">ROUND</field>\n                    <value name="NUM">\n                      <shadow type="math_number" id="NxI4W6P)%aS~YX^5:fm(">\n                        <field name="NUM">3.1</field>\n                      </shadow>\n                      <block type="math_arithmetic" id="a52-x:2(jo3fN-]co/k]">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="1IiDMd{pA4I8#Jv5:v)F">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="djyZC:DVv!8AFfC.FoYS">\n                            <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="QPp6Ex`FL}B)uWsSrQ*o">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_number" id="qdaI}RV~2ic%D1==.15s">\n                            <field name="NUM">100</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <value name="B">\n                  <shadow type="math_number" id=";(PBMt(9fPe84P0`MRRO">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_number" id=";)+n7kB.._k3n:rt!GvJ">\n                    <field name="NUM">100</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="controls_if" id="P/L5q|aftSE^KsctnA}E">\n                <mutation else="1"></mutation>\n                <value name="IF0">\n                  <block type="variables_get" id="IE(_]mU,GAeY}*bDjQY@">\n                    <field name="VAR" id="/shM51Nl|.I_R[9=PPJd" variabletype="">dalembert:resultIsWin</field>\n                  </block>\n                </value>\n                <statement name="DO0">\n                  <block type="notify" id="Y+/B?@*,K~?KRM!)/fmK">\n                    <field name="NOTIFICATION_TYPE">success</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <block type="text_join" id="4{*#BHVCa/!8W=WM7Kz8">\n                        <mutation items="2"></mutation>\n                        <value name="ADD0">\n                          <block type="text" id="I-e_UTV7xCYiDFI})Q=(">\n                            <field name="TEXT">Won:</field>\n                          </block>\n                        </value>\n                        <value name="ADD1">\n                          <block type="variables_get" id="k4nklyFK@UB@/FR9Lp|s">\n                            <field name="VAR" id="8-FGM6FF)6Y!:[]L7ZW0" variabletype="">dalembert:profit</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <statement name="ELSE">\n                  <block type="notify" id=",llDyR^DXy%PU^4]}f./">\n                    <field name="NOTIFICATION_TYPE">warn</field>\n                    <field name="NOTIFICATION_SOUND">silent</field>\n                    <value name="MESSAGE">\n                      <block type="text_join" id="/HOAuftQSV1A*1Bigv8-">\n                        <mutation items="2"></mutation>\n                        <value name="ADD0">\n                          <block type="text" id="gF}3UoFAC]sxWV/nw%ei">\n                            <field name="TEXT">Lost: </field>\n                          </block>\n                        </value>\n                        <value name="ADD1">\n                          <block type="math_single" id="1SW+cz/lMmWY)ms^lqaZ">\n                            <field name="OP">ABS</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id="GleSn`9j7Cm7/dqg}FIA">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="variables_get" id="`]%tyAnT!{u4,M%!D1bd">\n                                <field name="VAR" id="8-FGM6FF)6Y!:[]L7ZW0" variabletype="">dalembert:profit</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </statement>\n                <next>\n                  <block type="procedures_callnoreturn" id="sDq[vcSX3kB!@W09lkSI">\n                    <mutation name="D\'Alembert Core Functionality">\n                      <arg name="dalembert:resultIsWin"></arg>\n                    </mutation>\n                    <value name="ARG0">\n                      <block type="variables_get" id=",gx.@YSp(M2f-koK!twT">\n                        <field name="VAR" id="/shM51Nl|.I_R[9=PPJd" variabletype="">dalembert:resultIsWin</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="notify" id="Cvi8%t{p9/_xm#+X]om(">\n                        <field name="NOTIFICATION_TYPE">info</field>\n                        <field name="NOTIFICATION_SOUND">silent</field>\n                        <value name="MESSAGE">\n                          <block type="text_join" id="BJCQ#/4O0}z[^DR9GgkO">\n                            <mutation items="2"></mutation>\n                            <value name="ADD0">\n                              <block type="text" id="ijsv9!fxO*BB:8yHR`f|">\n                                <field name="TEXT">Total Profit: </field>\n                              </block>\n                            </value>\n                            <value name="ADD1">\n                              <block type="variables_get" id="Kc?RVUrXujr{1X[%y1sW">\n                                <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="ix3Jwr;,l7NS%LeIjciS">\n                            <field name="VAR" id="[w@pzvBAlteju[8,x#hD" variabletype="">dalembert:tradeAgain</field>\n                            <value name="VALUE">\n                              <block type="logic_boolean" id="Z;.teZof4syfkPW!mqo,">\n                                <field name="BOOL">FALSE</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="controls_if" id="]Kv}Tw=x^zr6@I@D@S4q">\n                                <mutation else="1"></mutation>\n                                <value name="IF0">\n                                  <block type="logic_compare" id=")|LQhZk*#Wi64TgP!Xa^">\n                                    <field name="OP">LT</field>\n                                    <value name="A">\n                                      <block type="variables_get" id="JIN._QaycDvYwCfcJGCM">\n                                        <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <block type="variables_get" id="ca~g-NW_y(msxA`ID6uw">\n                                        <field name="VAR" id="ZGpA`4foih2T_0.]xE66" variabletype="">dalembert:expectedProfit</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <statement name="DO0">\n                                  <block type="controls_if" id="fVNi_Cv-~iB/uc)2U.3u">\n                                    <mutation else="1"></mutation>\n                                    <value name="IF0">\n                                      <block type="logic_compare" id="+`bh%N2o{Y5P*([/ypeU">\n                                        <field name="OP">GT</field>\n                                        <value name="A">\n                                          <block type="variables_get" id="J~+vmLG#*!wX@7rgH_a9">\n                                            <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <block type="math_single" id="ETDn1dh]F.b#8{zcD@+|">\n                                            <field name="OP">NEG</field>\n                                            <value name="NUM">\n                                              <shadow type="math_number" id="#4N:bIe?FzTA#rOZjMqo">\n                                                <field name="NUM">9</field>\n                                              </shadow>\n                                              <block type="variables_get" id="OovN9^AB=zF:sTh-=oGq">\n                                                <field name="VAR" id="%o8CQE,uNdg`rmRL:-ca" variabletype="">dalembert:maximumLoss</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                    <statement name="DO0">\n                                      <block type="variables_set" id="y%eZ%16)YFB?;J!WT-/1">\n                                        <field name="VAR" id="[w@pzvBAlteju[8,x#hD" variabletype="">dalembert:tradeAgain</field>\n                                        <value name="VALUE">\n                                          <block type="logic_boolean" id="qt?z|=[ordjkFsa{CxlK">\n                                            <field name="BOOL">TRUE</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </statement>\n                                    <statement name="ELSE">\n                                      <block type="text_print" id="(!.##DU]KjPhy^tQC6YF">\n                                        <value name="TEXT">\n                                          <shadow type="text" id="kqlrIk.GO.^}hI,PoUV)">\n                                            <field name="TEXT">abc</field>\n                                          </shadow>\n                                          <block type="text_join" id="oX?Ia)5gqDMl[H*da_9g">\n                                            <mutation items="2"></mutation>\n                                            <value name="ADD0">\n                                              <block type="text" id="ox|AU:{^KZm`Bk=piPeZ">\n                                                <field name="TEXT">Maximum Loss Occurred! Total Loss: </field>\n                                              </block>\n                                            </value>\n                                            <value name="ADD1">\n                                              <block type="math_single" id="bc,1cQ})F_fQN*9Fird^">\n                                                <field name="OP">NEG</field>\n                                                <value name="NUM">\n                                                  <shadow type="math_number" id="pi;;Fh3#fMUD2s`W_UJZ">\n                                                    <field name="NUM">9</field>\n                                                  </shadow>\n                                                  <block type="variables_get" id="=b`joCv5,]G3N=_{)2ND">\n                                                    <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                                                  </block>\n                                                </value>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </statement>\n                                  </block>\n                                </statement>\n                                <statement name="ELSE">\n                                  <block type="text_print" id="RqQw_^5^@PdBOSiPMkW7">\n                                    <value name="TEXT">\n                                      <shadow type="text" id="kqlrIk.GO.^}hI,PoUV)">\n                                        <field name="TEXT">abc</field>\n                                      </shadow>\n                                      <block type="text_join" id="uNhAtc%n?rJat;igy.i;">\n                                        <mutation items="2"></mutation>\n                                        <value name="ADD0">\n                                          <block type="text" id="+Fd!Q%aw=bq2)~qEmqt=">\n                                            <field name="TEXT">Expected Profit Made! Total Profit: </field>\n                                          </block>\n                                        </value>\n                                        <value name="ADD1">\n                                          <block type="variables_get" id="CxB@:}TG^Od;=yysk/#C">\n                                            <field name="VAR" id="weOIq50C[S,Wr;`!|gYR" variabletype="">dalembert:totalProfit</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <value name="RETURN">\n      <block type="variables_get" id="zEXck3l4zHs1m9JF0^g.">\n        <field name="VAR" id="[w@pzvBAlteju[8,x#hD" variabletype="">dalembert:tradeAgain</field>\n      </block>\n    </value>\n  </block>\n  <block type="before_purchase" id="i-CIx.(Onm4?ihxzA}Y]" x="0" y="2280">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="timeout" id="~d#riQehM=KL.|jHVDHO">\n        <statement name="TIMEOUTSTACK">\n          <block type="timeout" id="H$$6u(fZx$(]Ne43:5f!">\n            <statement name="TIMEOUTSTACK">\n              <block type="purchase" id="xS?~b@5AypEX8z48.F$3">\n                <field name="PURCHASE_LIST">DIGITEVEN</field>\n              </block>\n            </statement>\n            <value name="SECONDS">\n              <shadow type="math_number" id="PjNuyvoS7+#$$nl`nl4:">\n                <field name="NUM">0.000001</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <value name="SECONDS">\n          <shadow type="math_number" id="]H!f%54D8x#(V%0tkA*^">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="during_purchase" id="(4;NieXd}j|Bn!c-YiC|" x="0" y="2492">\n    <statement name="DURING_PURCHASE_STACK">\n      <block type="timeout" id="Hu.yBo{Yy57-]y@.GB*l">\n        <statement name="TIMEOUTSTACK">\n          <block type="timeout" id="ABgCTGXQ%pSU8ZKLtP{l">\n            <statement name="TIMEOUTSTACK">\n              <block type="sell_at_market" id="XQi6:iOweggE#x~dDnbk"></block>\n            </statement>\n            <value name="SECONDS">\n              <shadow type="math_number" id="$NgRd#tAxdf2tWt$Mk4v">\n                <field name="NUM">0.000001</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <value name="SECONDS">\n          <shadow type="math_number" id="@n[FVXF9n@zZLzFk]JC-">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="D^Jz1^n=2vtZku1vBN@;" x="0" y="2698">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="4xS~ke%d*d[*|9giNVUB">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="logic_compare" id="2?,sqJk=V9pRUzrMftUE">\n            <field name="OP">GTE</field>\n            <value name="A">\n              <block type="total_profit" id="~zcODa`W$5^Ms.}5d8`s"></block>\n            </value>\n            <value name="B">\n              <block type="variables_get" id="/Rd=xmoy.Lk(T19%iaj*">\n                <field name="VAR" id="P)NjFI#Az8j_imPxVHT{" variabletype="">take profit</field>\n              </block>\n            </value>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_print" id="U=KyIsF2-5Z*~2Qjrgul">\n            <value name="TEXT">\n              <shadow type="text" id="U^i/pmt.MU.3J`g}n`sx">\n                <field name="TEXT">Take Profit Level has reached.</field>\n              </shadow>\n            </value>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="controls_if" id="^17].~Y6J0|e*u)FVO+2">\n            <mutation else="1"></mutation>\n            <value name="IF0">\n              <block type="contract_check_result" id="kgD*ICZDw-%]aRC8N:pE">\n                <field name="CHECK_RESULT">win</field>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="timeout" id="xWlDTw2D3`}s5{b}5w1S">\n                <statement name="TIMEOUTSTACK">\n                  <block type="variables_set" id="(uMO5l0QJ{)o4K+Dxh%e">\n                    <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="]6Z;gXn5d3x~)/zv4z!s">\n                        <field name="VAR" id="C1sj}QRP*^Ngjgv+U:yR" variabletype="">stake win</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="notify" id="?ehF-oDF?d`6142qw}2d">\n                        <field name="NOTIFICATION_TYPE">success</field>\n                        <field name="NOTIFICATION_SOUND">earned-money</field>\n                        <value name="MESSAGE">\n                          <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="text_join" id="r:?sdI#RyEVSuxu.xwbq">\n                            <mutation items="5"></mutation>\n                            <value name="ADD0">\n                              <block type="variables_get" id="$|NP9R)f^qWmf*9,3#c2">\n                                <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                              </block>\n                            </value>\n                            <value name="ADD1">\n                              <block type="text" id="/(6N7r2{yehc!Ea4;ikE">\n                                <field name="TEXT">   </field>\n                              </block>\n                            </value>\n                            <value name="ADD2">\n                              <block type="variables_get" id="Aq6nLPsl7pqyE2AU}t-O">\n                                <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                              </block>\n                            </value>\n                            <value name="ADD3">\n                              <block type="text" id="84-I(@DTL^e5.ia}wDp6">\n                                <field name="TEXT">✅</field>\n                              </block>\n                            </value>\n                            <value name="ADD4">\n                              <block type="text" id="S!**8hZ~/Z?8}?hEbN*A">\n                                <field name="TEXT"> ⇶ </field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <value name="SECONDS">\n                  <shadow type="math_number" id="BjQ%Bzwtybo+zsS2ImPm">\n                    <field name="NUM">0.000001</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <statement name="ELSE">\n              <block type="timeout" id="V!_~77n3M?d*amnsmzzq">\n                <statement name="TIMEOUTSTACK">\n                  <block type="variables_set" id="`P~MJ5nJeI/htNOKM@Fi">\n                    <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                    <value name="VALUE">\n                      <block type="math_arithmetic" id="9$JeIeRw-raa:bq^dk=3">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="7JAR..:`H61~}3S78l(+">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="gGZ}2N]W~6*-C:W)PICl">\n                            <field name="VAR" id="dO,2jA#,W(l+~Rs7@l[|" variabletype="">stake</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id="]%JRNhP|B31(aijJ*%l]">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="variables_get" id="RB*J(6%W.yGnESY;MZnC">\n                            <field name="VAR" id="@nr#0%ma@V~6H5D#nWB[" variabletype="">martingale</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="notify" id="{kZMEn,gncdO!uaM#IFo">\n                        <field name="NOTIFICATION_TYPE">success</field>\n                        <field name="NOTIFICATION_SOUND">error</field>\n                        <value name="MESSAGE">\n                          <shadow type="text" id="Tp0gNwf;2-|~2Gjy$4T!">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="text_join" id="!eS9w5BP+7M)J]=8@#]_">\n                            <mutation items="5"></mutation>\n                            <value name="ADD0">\n                              <block type="variables_get" id="OwX%k6U?iGvfo]F?U,Il">\n                                <field name="VAR" id="J3g++(PvQv/)qGUt#G2:" variabletype="">trader</field>\n                              </block>\n                            </value>\n                            <value name="ADD1">\n                              <block type="text" id="lSkF|11cbmh643U|g:35">\n                                <field name="TEXT">   </field>\n                              </block>\n                            </value>\n                            <value name="ADD2">\n                              <block type="variables_get" id="14bx_UvE(R?#w+D}B~b!">\n                                <field name="VAR" id="Af6WwokSaL9#7sS#fHwZ" variabletype="">rsi</field>\n                              </block>\n                            </value>\n                            <value name="ADD3">\n                              <block type="text" id="yL63N:zgQ[.wIM;j8O7Y">\n                                <field name="TEXT">✅</field>\n                              </block>\n                            </value>\n                            <value name="ADD4">\n                              <block type="text" id="6*+}gQm,yr7Hz@=CNe^L">\n                                <field name="TEXT"> ⇶ </field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </statement>\n                <value name="SECONDS">\n                  <shadow type="math_number" id="TIg|@vrEpFF-K34Gn{KI">\n                    <field name="NUM">1</field>\n                  </shadow>\n                </value>\n              </block>\n            </statement>\n            <next>\n              <block type="trade_again" id="c)S|KjoQdXc8l#J@5z3P"></block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>',
          },
          {
            id: 3,
            name: "speed bot ✅✅",
            xml: '<xml xmlns="https://developers.google.com/blockly/xml" is_dbot="true" collection="false">\n  <variables>\n    <variable id="W4$:ZQCmEz#8+=4ysv5Y">Loss</variable>\n    <variable id="j}8O`Vs+RJljIwPu-_:_">Stake</variable>\n    <variable id="v-wQ=aOwXz:}sER.z~-j">text</variable>\n    <variable id="|:T/2*ivp)1rRd/D?Yy!">text1</variable>\n    <variable id="sPN]59oMSqJG=Bl1Y0rm">text2</variable>\n    <variable id="mXtFswo{p,|%W1:V-$+r">Target Profit</variable>\n    <variable id="%L?;380E6Lr^3b.%}t5Q">stake 2</variable>\n    <variable id="mmIhG6S^lc[ib}^5pLH,">text3</variable>\n  </variables>\n  <block type="trade_definition" id="IffDjwodl@]6yQRI1tIU" deletable="false" x="0" y="50">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="%N|BYv2w;pl~8]%YyLfj" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ10V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="hGdqx^MX,wr)l${d.+w:" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="nJqZG%tYGPuR:!KLYI(I" deletable="false" movable="false">\n                <field name="TYPE_LIST">DIGITOVER</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="-J!D|1e8GCO8C;r;_uzQ" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="SZ#9]@=e[iW^zVRsB_3[" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="ET.C}$^WUupt?Rpaw(H`" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">TRUE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="text_print" id="LqNO)r*X(Ud?(nq9PA~%">\n        <value name="TEXT">\n          <shadow type="text" id="3y.afwF~x9)^?$h-KT52">\n            <field name="TEXT">About to print dollars \uD83D\uDCB0</field>\n          </shadow>\n        </value>\n        <next>\n          <block type="variables_set" id="5]2*:s!+^_~!bhKDwRS5">\n            <field name="VAR" id="W4$:ZQCmEz#8+=4ysv5Y">Loss</field>\n            <value name="VALUE">\n              <block type="math_number" id="_X)%67.BZb3IXtLFKkHt">\n                <field name="NUM">1000</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="C;2(:y1g8-H:M+gu*v:9">\n                <field name="VAR" id="mXtFswo{p,|%W1:V-$+r">Target Profit</field>\n                <value name="VALUE">\n                  <block type="math_number" id="[4)FDySAk7Coa`7[Jw;S">\n                    <field name="NUM">52</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="{YYJIl*OqE`0]V^CA$m[">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_">Stake</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="x9PZ;IxQ4Fan9ceSv2I!">\n                        <field name="NUM">1.97</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="~Yd2YAq|[n%YZ]m[N+qF">\n                        <field name="VAR" id="%L?;380E6Lr^3b.%}t5Q">stake 2</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="k^?U=PyC(@$R4au+Lr()">\n                            <field name="NUM">2.97</field>\n                          </block>\n                        </value>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="oJoU8OWL=7D7-Q,}_Cxc">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <block type="math_number" id="p:so8%~9RxMFE(K=;WdC">\n            <field name="NUM">1</field>\n          </block>\n        </value>\n        <value name="AMOUNT">\n          <block type="variables_get" id="bIcre8zTLMmkW]Kds$_8">\n            <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_">Stake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="*`4O$*u9@@(g-0P0ipj*" inline="true">\n            <field name="NUM">3</field>\n          </shadow>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="during_purchase" id="J(;VFmC/6]f9#7X5[afJ" collapsed="true" x="714" y="50"></block>\n  <block type="after_purchase" id="vN6MsKE.??d,Cc8j:,/%" x="714" y="196">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="Y4F{v79R17J)ejoC^rOF">\n        <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="OTAeB3:D6CGIoc5KMs#s">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="_auB]d.wPIY2NINFKo;v">\n            <field name="VARIABLE" id="v-wQ=aOwXz:}sER.z~-j">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="uo~R}b3ruS=3?;fNrXWA">\n                <value name="TEXT">\n                  <shadow type="text" id="PYFA6(l%?iUc~QZENK]]">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="$WN]^s:NTb9=cqDXGvWh">\n                    <field name="TEXT">Frank\'s AI did it </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="{8td,|MvkBM6:0-#Ptm?">\n                    <value name="TEXT">\n                      <shadow type="text" id="9t0ac$Hi?JHRcvb[WM;`">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="read_details" id="5=9m?3Ew69?SgHsjsl:P">\n                        <field name="DETAIL_INDEX">4</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id="@AZ1;(xSQjU0+sy[{4-Q">\n                <field name="NOTIFICATION_TYPE">success</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <block type="variables_get" id="?,AQXY8@c1Vl7U?|n)yu">\n                    <field name="VAR" id="v-wQ=aOwXz:}sER.z~-j">text</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id=",7],*B2W,4,lCG]}JwX0">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_">Stake</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="Y[pUTH*,~R|LBZb*r[MN">\n                        <field name="VAR" id="%L?;380E6Lr^3b.%}t5Q">stake 2</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="text_join" id="ccyRKfYwsRhmo)gIu#sI">\n            <field name="VARIABLE" id="|:T/2*ivp)1rRd/D?Yy!">text1</field>\n            <statement name="STACK">\n              <block type="text_statement" id="*7=2%))Jjw4bg_BM]+ut">\n                <value name="TEXT">\n                  <shadow type="text" id="sJFD%`2j|;1xil.oK||p">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="$`G$|C.=VKMY0hpK^qAw">\n                    <field name="TEXT">lost but will be recovered </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="}rMF?jSircBDJU2ml.Us">\n                    <value name="TEXT">\n                      <shadow type="text" id="}D/lT/NIrOyFlfzh6|`L">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="math_single" id="Ao_,3rz@)=!:(N?!Se3$">\n                        <field name="OP">ABS</field>\n                        <value name="NUM">\n                          <shadow type="math_number" id="CZ30_V(?i~,6ib/m}u}F">\n                            <field name="NUM">9</field>\n                          </shadow>\n                          <block type="read_details" id="s3)#!_a5K9Lj7w4z^wo/">\n                            <field name="DETAIL_INDEX">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id="jgk`@L.-UG+1{@c8_hp/">\n                <field name="NOTIFICATION_TYPE">warn</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <block type="variables_get" id="tpQl6F%~I{^snD}pb${/">\n                    <field name="VAR" id="|:T/2*ivp)1rRd/D?Yy!">text1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="math_change" id="YiF4%XsrR+c1:6)`=9[a">\n                    <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_">Stake</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="kmMhN5x{4K2%xk=p)1.$">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="math_arithmetic" id="$2knf!1yQL4Z|O#}+m)X">\n                        <field name="OP">MULTIPLY</field>\n                        <value name="A">\n                          <shadow type="math_number" id="4/-|f?Bf|}f`kuBuN+??">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_single" id="-kH5rY^1GdDtD:S8I/J-">\n                            <field name="OP">ABS</field>\n                            <value name="NUM">\n                              <shadow type="math_number" id="^oW~CQc@1sOk[uk9Y#8Q">\n                                <field name="NUM">9</field>\n                              </shadow>\n                              <block type="read_details" id="+@_7@|pki`$1uawQ3_iX">\n                                <field name="DETAIL_INDEX">4</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <shadow type="math_number" id=")jX`/LO6=BsP|]0OKor{">\n                            <field name="NUM">1</field>\n                          </shadow>\n                          <block type="math_number" id="}m`JU=)s*kvx?VYf#2WC">\n                            <field name="NUM">1</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="controls_if" id="`oeP!dU:4+nnoV;1VGA$">\n                        <value name="IF0">\n                          <block type="logic_compare" id="Jn([^8a]cj[TG#^~R`%V">\n                            <field name="OP">GTE</field>\n                            <value name="A">\n                              <block type="math_single" id="%W($$-Cnx~So4GU.lKl?">\n                                <field name="OP">ABS</field>\n                                <value name="NUM">\n                                  <shadow type="math_number" id="K-_sHg6;OM=paRZ#Q{$p">\n                                    <field name="NUM">9</field>\n                                  </shadow>\n                                  <block type="read_details" id="f`BtuT~(iu0r{K6lzt!:">\n                                    <field name="DETAIL_INDEX">4</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="variables_get" id="vBB}!s1LQYzX3o#7;Rb8">\n                                <field name="VAR" id="W4$:ZQCmEz#8+=4ysv5Y">Loss</field>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="variables_set" id="_i42djwl-$7U^vgUG5;f">\n                            <field name="VAR" id="j}8O`Vs+RJljIwPu-_:_">Stake</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="!S!Er:A*Q;XaKz=X$tmA">\n                                <field name="VAR" id="%L?;380E6Lr^3b.%}t5Q">stake 2</field>\n                              </block>\n                            </value>\n                          </block>\n                        </statement>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="text_join" id="`D4g(yOc*Y]kFGXTw0$i">\n            <field name="VARIABLE" id="sPN]59oMSqJG=Bl1Y0rm">text2</field>\n            <statement name="STACK">\n              <block type="text_statement" id="Fga:zle?#ttJ+=m.(!Vu">\n                <value name="TEXT">\n                  <shadow type="text" id="(bG8XmK@84qHRnu;4g8y">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="^493,2i!Q90}`Lk_1T+Z">\n                    <field name="TEXT">Total Profit: </field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="-=D*QYmfoZ@2T{r_ytw2">\n                    <value name="TEXT">\n                      <shadow type="text" id="Ld^o|~O~~)U0?-+P5N(0">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="total_profit" id="Scsv)8!82aBpi/LYvn0G"></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id="iWv4rP[JTP1[QX/`zS1N">\n                <field name="NOTIFICATION_TYPE">info</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <block type="variables_get" id="E1#}%D*I?C_qSU:{9huI">\n                    <field name="VAR" id="sPN]59oMSqJG=Bl1Y0rm">text2</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="tW_AysZ#8r9u@$C*4Y?p">\n                    <mutation xmlns="http://www.w3.org/1999/xhtml" else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_compare" id="k@vPre[(EUg1(0tiIn=V">\n                        <field name="OP">LT</field>\n                        <value name="A">\n                          <block type="total_profit" id="q5:0B(3U_-bzQ)ot+~vG"></block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="~@Ez/?uk}h5~D0):iHP!">\n                            <field name="VAR" id="mXtFswo{p,|%W1:V-$+r">Target Profit</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="trade_again" id=";={?N?WP46D(]o*:.Cj+"></block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="text_join" id="}WPY(Ob=EFvRd{IyZX,a">\n                        <field name="VARIABLE" id="mmIhG6S^lc[ib}^5pLH,">text3</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id=",N.LYOB[u/R0YJ@gt;n/">\n                            <value name="TEXT">\n                              <shadow type="text" id=":ABhOVqX/7|w##-,y;g@">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="text" id="7fVYzH4%5{EcB[)b!7,b">\n                                <field name="TEXT">Profits hit successfully </field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="|1J6[p+J5Npbkh2CM6JX">\n                                <value name="TEXT">\n                                  <shadow type="text" id=")bRy]$%9j#h|mOP=YVCg">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="total_profit" id="Cp$,c(?ArU~L22~qc=:s"></block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="text_print" id="2R}7)~h1K3G2fMi@uzQT">\n                            <value name="TEXT">\n                              <shadow type="text" id="|5I:FJSX.3O$O[O^%0Ku">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="variables_get" id="Qa;DwSR;^/gwl[f-qG,t">\n                                <field name="VAR" id="mmIhG6S^lc[ib}^5pLH,">text3</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="xUDy~VJYPoSh4Gi0W~w:" collapsed="true" deletable="false" x="0" y="908">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="purchase" id="/9S8$/JFmD@%TrQm3#Zo">\n        <field name="PURCHASE_LIST">DIGITOVER</field>\n      </block>\n    </statement>\n  </block>\n  <block type="math_number" id="ghxdP*i3AnG_akqUAUp!" disabled="true" x="0" y="1796">\n    <field name="NUM">5</field>\n  </block>\n  <block type="text" id="_8T}G9)aOD%q4Zyo~5cU" collapsed="true" disabled="true" x="0" y="1884">\n    <field name="TEXT">Expert  Speed Bot</field>\n  </block>\n</xml>',
          },
          {
            id: 4,
            name: "Last Digit List Blue Red",
            xml: '<xml xmlns="http://www.w3.org/1999/xhtml" collection="false">\n  <variables>\n    <variable type="" id="sCFkUVF?8P]?V7MsKD?L">LastStake</variable>\n    <variable type="" id="N^Pi$3n{)|*d,C:5+{pe">stake</variable>\n    <variable type="" id="EDw=vY`9:#*b;Tvf;YxU">Signal</variable>\n    <variable type="" id="ezQ;f.dd)oyUjVawoY!O">SL</variable>\n    <variable type="" id="ooYkXX[t:Gs/Desl}e01">Stoploss</variable>\n    <variable type="" id="nKi^_ZLDa|;m_?-ya,c[">Takeprofit</variable>\n  </variables>\n  <block type="trade" id="xgH69|xFn9=70w.*3Vo@" x="0" y="0">\n    <field name="MARKET_LIST">synthetic_index</field>\n    <field name="SUBMARKET_LIST">random_index</field>\n    <field name="SYMBOL_LIST">R_100</field>\n    <field name="TRADETYPECAT_LIST">digits</field>\n    <field name="TRADETYPE_LIST">overunder</field>\n    <field name="TYPE_LIST">DIGITOVER</field>\n    <field name="CANDLEINTERVAL_LIST">60</field>\n    <field name="TIME_MACHINE_ENABLED">FALSE</field>\n    <field name="RESTARTONERROR">TRUE</field>\n    <statement name="INITIALIZATION">\n      <block type="text_print" id="b1ElQ4^G,,a+5~`sr3`h" collapsed="true">\n        <value name="TEXT">\n          <shadow type="text" id="CiVXR{CMjlOv]zisyJGV">\n            <field name="TEXT">Bot Courtesy of Ultimate Trading Scripts: T.me/binaryboss101 : Happy Auto Trading: Good Luck:</field>\n          </shadow>\n        </value>\n        <next>\n          <block type="variables_set" id="tJeN@_0Enou@sg+U`+E]">\n            <field name="VAR" id="N^Pi$3n{)|*d,C:5+{pe" variabletype="">stake</field>\n            <value name="VALUE">\n              <block type="text_prompt_ext" id="KYzo+D,L?5a,@bc7_Daw">\n                <mutation type="NUMBER"></mutation>\n                <field name="TYPE">NUMBER</field>\n                <value name="TEXT">\n                  <shadow type="text" id="%1-d}1@9{A-4^a@HDda4">\n                    <field name="TEXT">Input Stake</field>\n                  </shadow>\n                </value>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="Y%_`ZhrKgOaNSy!R(e9e">\n                <field name="VAR" id="ooYkXX[t:Gs/Desl}e01" variabletype="">Stoploss</field>\n                <value name="VALUE">\n                  <block type="text_prompt_ext" id="YC`8([kiNBvY4cXy@Z(O">\n                    <mutation type="NUMBER"></mutation>\n                    <field name="TYPE">NUMBER</field>\n                    <value name="TEXT">\n                      <shadow type="text" id=")jI}d+E,-_^4Oy$.?*aG">\n                        <field name="TEXT">Input Stoploss Level</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id=";gj5TvFEeHp9s%w8$.C0">\n                    <field name="VAR" id="nKi^_ZLDa|;m_?-ya,c[" variabletype="">Takeprofit</field>\n                    <value name="VALUE">\n                      <block type="text_prompt_ext" id="lQodA;:$Pi}0_KghnvuZ">\n                        <mutation type="NUMBER"></mutation>\n                        <field name="TYPE">NUMBER</field>\n                        <value name="TEXT">\n                          <shadow type="text" id="ADIkz|SN)lEe%xSlAf6h">\n                            <field name="TEXT">Input Take Profit</field>\n                          </shadow>\n                        </value>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="jtG=)Y@dW%R!cEC|9*Ev">\n                        <field name="VAR" id="ezQ;f.dd)oyUjVawoY!O" variabletype="">SL</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="tx(ocplvsP^B*hFFmH_X">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="(pKGDM#_iSle[4Ac(2V~">\n                            <field name="VAR" id="sCFkUVF?8P]?V7MsKD?L" variabletype="">LastStake</field>\n                            <value name="VALUE">\n                              <block type="variables_get" id="+*R?}]Cf7y5^x#Z2jI#g">\n                                <field name="VAR" id="N^Pi$3n{)|*d,C:5+{pe" variabletype="">stake</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="tradeOptions" id="x=V33~4Lb|(sLv`J[:Eb">\n        <field name="DURATIONTYPE_LIST">t</field>\n        <field name="CURRENCY_LIST">USD</field>\n        <field name="BARRIEROFFSETTYPE_LIST">+</field>\n        <field name="SECONDBARRIEROFFSETTYPE_LIST">-</field>\n        <value name="DURATION">\n          <shadow type="math_number" id="ZY9G|TbG[5ROzl4%UVI;">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n        <value name="AMOUNT">\n          <shadow type="math_number" id="ml)25~7^q}3I9}vjf:%K">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="[.VM-|SP(X=P4q*hUN6L">\n            <field name="VAR" id="sCFkUVF?8P]?V7MsKD?L" variabletype="">LastStake</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number" id="ETFZr_0IsrhjJo$fia-j">\n            <field name="NUM">1</field>\n          </shadow>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="i-CIx.(Onm4?ihxzA}Y]" collapsed="true" x="0" y="53">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="controls_if" id="_=,Pwov*5(QamG!0YW3m">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="check_direction" id="CSsQ9(SsWeg$ji1uZ9.U">\n            <field name="CHECK_DIRECTION">rise</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="i4U+RC4IV/T_Fg_zK_V!">\n            <field name="VAR" id="EDw=vY`9:#*b;Tvf;YxU" variabletype="">Signal</field>\n            <value name="VALUE">\n              <block type="text" id="@4dre%H0xv2~/Mti%E#B">\n                <field name="TEXT">BLUE</field>\n              </block>\n            </value>\n            <next>\n              <block type="notify" id="JTdO@F6Yk@.(NK-pS[c%">\n                <field name="NOTIFICATION_TYPE">info</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="EV`$.BL*CgoFrYjsKj`4">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text_join" id=".Bcv/l9hEH.udi_,7Yfs">\n                    <mutation items="5"></mutation>\n                    <value name="ADD0">\n                      <block type="text" id="usa!,hVB%Ef+VY@(YaNB">\n                        <field name="TEXT"> Last Digit List &gt;&gt; [</field>\n                      </block>\n                    </value>\n                    <value name="ADD1">\n                      <block type="last_digit" id="^Qa.|@d#BqQG`N-e3acM"></block>\n                    </value>\n                    <value name="ADD2">\n                      <block type="text" id="DxzYC!LUAmR!H~pw24wG">\n                        <field name="TEXT">] - [</field>\n                      </block>\n                    </value>\n                    <value name="ADD3">\n                      <block type="variables_get" id="[?$iy((Z|1abzps1a{vD">\n                        <field name="VAR" id="EDw=vY`9:#*b;Tvf;YxU" variabletype="">Signal</field>\n                      </block>\n                    </value>\n                    <value name="ADD4">\n                      <block type="text" id="zCPro][^|+:HeO_FdWin">\n                        <field name="TEXT">]</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="variables_set" id="[?cfqHG4@?}ntv,aeb3g">\n            <field name="VAR" id="EDw=vY`9:#*b;Tvf;YxU" variabletype="">Signal</field>\n            <value name="VALUE">\n              <block type="text" id="eV~L37K6@T$+A=+-6-ID">\n                <field name="TEXT">RED</field>\n              </block>\n            </value>\n            <next>\n              <block type="notify" id="}/f`JXtXN_8F@~Y,WpDz">\n                <field name="NOTIFICATION_TYPE">error</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <shadow type="text" id="EV`$.BL*CgoFrYjsKj`4">\n                    <field name="TEXT">abc</field>\n                  </shadow>\n                  <block type="text_join" id="cqcUkC`E0^Dv,B@uQsDM">\n                    <mutation items="5"></mutation>\n                    <value name="ADD0">\n                      <block type="text" id="BC:b^M]wQ@p[eKCyK0Yu">\n                        <field name="TEXT"> Last Digit List &gt;&gt; [</field>\n                      </block>\n                    </value>\n                    <value name="ADD1">\n                      <block type="last_digit" id="#ATm86NG3~Lg41{:pWKE"></block>\n                    </value>\n                    <value name="ADD2">\n                      <block type="text" id="YM5!1?bsU;17Fyt;h3vF">\n                        <field name="TEXT">] - [</field>\n                      </block>\n                    </value>\n                    <value name="ADD3">\n                      <block type="variables_get" id="a`AU)0[7+8}.tJQB:VX3">\n                        <field name="VAR" id="EDw=vY`9:#*b;Tvf;YxU" variabletype="">Signal</field>\n                      </block>\n                    </value>\n                    <value name="ADD4">\n                      <block type="text" id="3!F(2dZZ+2d|B%*:iuE6">\n                        <field name="TEXT">]</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="controls_if" id="#`+3iSOU-w]6LduPkq}S">\n            <value name="IF0">\n              <block type="logic_operation" id="CVRzP?Kdl}8w+9lMj:Lb">\n                <field name="OP">OR</field>\n                <value name="A">\n                  <block type="logic_operation" id="5WzG/$-P+k,KeS+Nxg,F">\n                    <field name="OP">AND</field>\n                    <value name="A">\n                      <block type="logic_compare" id="G(R0osvnq7.CnGSYpvr5">\n                        <field name="OP">EQ</field>\n                        <value name="A">\n                          <block type="last_digit" id="`6[[_Q51GBCRUza@+3]("></block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="4-_0sKQH)Cj}mJm0Tp+{">\n                            <field name="NUM">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="check_direction" id="},DbU82TH+CeIcybWB*]">\n                        <field name="CHECK_DIRECTION">rise</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n                <value name="B">\n                  <block type="logic_operation" id="v-fef!|/RO?yv.TZz])t">\n                    <field name="OP">AND</field>\n                    <value name="A">\n                      <block type="logic_compare" id=";OfA!hlGur6),;amRUBS">\n                        <field name="OP">EQ</field>\n                        <value name="A">\n                          <block type="last_digit" id="GgE4tsQs@p`)vSdc/B@/"></block>\n                        </value>\n                        <value name="B">\n                          <block type="math_number" id="}vcjkeLNKWk*GD}kmkn1">\n                            <field name="NUM">5</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <block type="check_direction" id="C7M$8wn$/uR}uU^YjMMx">\n                        <field name="CHECK_DIRECTION">rise</field>\n                      </block>\n                    </value>\n                  </block>\n                </value>\n              </block>\n            </value>\n            <statement name="DO0">\n              <block type="purchase" id="W6q#Z-I3q3d[d3-`S[dS">\n                <field name="PURCHASE_LIST">DIGITOVER</field>\n              </block>\n            </statement>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="D^Jz1^n=2vtZku1vBN@;" collapsed="true" x="0" y="106">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="hT[WkNUdD}o@,8yoy/*u">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="cPijyg*H[c6ugF,D)Lh|">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="variables_set" id="XV@W6){np9#U$)V0Fgby">\n            <field name="VAR" id="sCFkUVF?8P]?V7MsKD?L" variabletype="">LastStake</field>\n            <value name="VALUE">\n              <block type="variables_get" id=",D,Pxb}zY~t%?aIG,ikW">\n                <field name="VAR" id="N^Pi$3n{)|*d,C:5+{pe" variabletype="">stake</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="53H.u9B)eTa~TrnL?([t">\n                <field name="VAR" id="ezQ;f.dd)oyUjVawoY!O" variabletype="">SL</field>\n                <value name="VALUE">\n                  <block type="math_number" id="=_o^t9aoiRdO)9##bi3t">\n                    <field name="NUM">0</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="kwF$3jpP):oa:KBfn5Ah">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_compare" id="C!l{2Af]NpDYaeM3O@}D">\n                        <field name="OP">GTE</field>\n                        <value name="A">\n                          <block type="total_profit" id="wke5;KlTR;=XK.e=f2v5"></block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="!*7qS,2Ch7WaPzZQE2%a">\n                            <field name="VAR" id="nKi^_ZLDa|;m_?-ya,c[" variabletype="">Takeprofit</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="text_print" id="zXFp%[2NL/5F9V.e7Kfn">\n                        <value name="TEXT">\n                          <shadow type="text" id="hdRcI5/2|mWUPD@072^(">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="text_join" id="5?`1R)W#lE/pP;I!-#X:">\n                            <mutation items="2"></mutation>\n                            <value name="ADD0">\n                              <block type="text" id="1LP@QB:eTDe_DsEfcub7">\n                                <field name="TEXT">Target Profit Reached!!</field>\n                              </block>\n                            </value>\n                            <value name="ADD1">\n                              <block type="total_profit" id="(jh@7qfS4#2,]S5Nvevw"></block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="trade_again" id=";a(dD8]AOmY1I}5XmqOm"></block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="math_change" id="R0-(NlAM@1wd+hcJjRvC">\n            <field name="VAR" id="ezQ;f.dd)oyUjVawoY!O" variabletype="">SL</field>\n            <value name="DELTA">\n              <shadow type="math_number" id="o(q%2b+dn-)wh-kr.rrw">\n                <field name="NUM">1</field>\n              </shadow>\n            </value>\n            <next>\n              <block type="math_change" id="*_067Z:+MLa_Idgwgr^k">\n                <field name="VAR" id="sCFkUVF?8P]?V7MsKD?L" variabletype="">LastStake</field>\n                <value name="DELTA">\n                  <shadow type="math_number" id="c@86]i+U?E0H$^}E2^,[">\n                    <field name="NUM">1</field>\n                  </shadow>\n                  <block type="math_arithmetic" id="MNyrmq4)3~5u}m6S=,a9">\n                    <field name="OP">MULTIPLY</field>\n                    <value name="A">\n                      <shadow type="math_number" id="g{qW*[Vm@)Y[PZXB{B;_">\n                        <field name="NUM">1</field>\n                      </shadow>\n                      <block type="math_single" id="eielRIvE_S*/phZZHJ~{">\n                        <field name="OP">ABS</field>\n                        <value name="NUM">\n                          <shadow type="math_number" id="J(:GBy1;xI:?z4r)bv*O">\n                            <field name="NUM">9</field>\n                          </shadow>\n                          <block type="read_details" id="W];9{~~}tUTxXc3|?w%G">\n                            <field name="DETAIL_INDEX">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <value name="B">\n                      <shadow type="math_number" id="u8VH}rK3liD0n`GT8T:X">\n                        <field name="NUM">5.3</field>\n                      </shadow>\n                    </value>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="DSCLXCNu+?[=OsiQGJPG">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_compare" id="yckXTz{zp}@HMioeyubo">\n                        <field name="OP">GTE</field>\n                        <value name="A">\n                          <block type="variables_get" id="2-@y1!~N?MA+L_Y=RZ:$">\n                            <field name="VAR" id="ezQ;f.dd)oyUjVawoY!O" variabletype="">SL</field>\n                          </block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="[Y/k3:(NBra;r4-`kNv8">\n                            <field name="VAR" id="ooYkXX[t:Gs/Desl}e01" variabletype="">Stoploss</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="text_print" id="%~r42$siFI-sp@Tl*8d2">\n                        <value name="TEXT">\n                          <shadow type="text" id="hdRcI5/2|mWUPD@072^(">\n                            <field name="TEXT">abc</field>\n                          </shadow>\n                          <block type="text_join" id="hgOQ#XM+,eST|^);1;0R">\n                            <mutation items="2"></mutation>\n                            <value name="ADD0">\n                              <block type="text" id="8^fa7rb{]NaooE#SzX80">\n                                <field name="TEXT">stop loss reached!!</field>\n                              </block>\n                            </value>\n                            <value name="ADD1">\n                              <block type="total_profit" id="ID=fut[5{?4sEPb.?8Um"></block>\n                            </value>\n                          </block>\n                        </value>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="trade_again" id="c)S|KjoQdXc8l#J@5z3P"></block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n      </block>\n    </statement>\n  </block>\n</xml>',
          },
          {
            id: 5,
            name: "\uD83D\uDCB5LOSKIE\uD83E\uDD16AI\uD83D\uDCB8PRIME⚡",
            xml: '<xml xmlns="http://www.w3.org/1999/xhtml" is_dbot="true" collection="false">\n  <variables>\n    <variable type="" id="6o_9Nu#$3m#.?zV=ahjK" islocal="false" iscloud="false">Deixar em 8 ou 9</variable>\n    <variable type="" id="rUPB[)tUi3we;byHr`7]" islocal="false" iscloud="false">1 ou 2 segundos</variable>\n    <variable type="" id="RHgF*C%#h{|Ha5u;#5j?" islocal="false" iscloud="false">Entrada Inicial</variable>\n    <variable type="" id="4+UcGJ_mE@7^Z8-d@JaJ" islocal="false" iscloud="false">N\xfamero de loss ( N\xe3o Alterar )</variable>\n    <variable type="" id="kQ+Ke(]*eQpM[qgfd~+g" islocal="false" iscloud="false">Contador</variable>\n    <variable type="" id="FlX%77!9AMWGEu#,)Nme" islocal="false" iscloud="false">Parar com perda de</variable>\n    <variable type="" id="(obU$~2J]hr/k0`hgX8/" islocal="false" iscloud="false">ENTRADA AO VENCER</variable>\n    <variable type="" id="a?$LW}C4v+XX:Lc%6-OS" islocal="false" iscloud="false">LUCRO DESEJADO</variable>\n    <variable type="" id="MgsL8H;~`;r/^Tuh1)y=" islocal="false" iscloud="false">Gale</variable>\n    <variable type="" id="N5h(uF)6G2cql)h{ZR;h" islocal="false" iscloud="false">text</variable>\n    <variable type="" id=")-9T~6%gxe29l#C#)qts" islocal="false" iscloud="false">text1</variable>\n    <variable type="" id="LN}r@t3f(x%mM[7-P|ft" islocal="false" iscloud="false">text2</variable>\n    <variable type="" id="^3d~6DUQ!o8XQTn.XB!c" islocal="false" iscloud="false">text3</variable>\n  </variables>\n  <block type="trade_definition" id="|,wpfgCRK_O,JHE[$xte" deletable="false" x="0" y="0">\n    <statement name="TRADE_OPTIONS">\n      <block type="trade_definition_market" id="dqYC5Hzv(BU~|R.^0oBf" deletable="false" movable="false">\n        <field name="MARKET_LIST">synthetic_index</field>\n        <field name="SUBMARKET_LIST">random_index</field>\n        <field name="SYMBOL_LIST">1HZ100V</field>\n        <next>\n          <block type="trade_definition_tradetype" id="R%UeAWK76$}y,1vTBL9J" deletable="false" movable="false">\n            <field name="TRADETYPECAT_LIST">digits</field>\n            <field name="TRADETYPE_LIST">overunder</field>\n            <next>\n              <block type="trade_definition_contracttype" id="JfVv3q5!6HG+a{Z;UcT~" deletable="false" movable="false">\n                <field name="TYPE_LIST">both</field>\n                <next>\n                  <block type="trade_definition_candleinterval" id="=.C+ze:~jIzo%`@vmpxG" deletable="false" movable="false">\n                    <field name="CANDLEINTERVAL_LIST">60</field>\n                    <next>\n                      <block type="trade_definition_restartbuysell" id="-[*XT*?4Y.x*GF[i_*9?" deletable="false" movable="false">\n                        <field name="TIME_MACHINE_ENABLED">FALSE</field>\n                        <next>\n                          <block type="trade_definition_restartonerror" id="gLmQYbPhRZTP;$NyXRfF" deletable="false" movable="false">\n                            <field name="RESTARTONERROR">FALSE</field>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="INITIALIZATION">\n      <block type="variables_set" id="$*k6w0w?HoW%@WJ[CQ[G">\n        <field name="VAR" id="6o_9Nu#$3m#.?zV=ahjK" variabletype="">Deixar em 8 ou 9</field>\n        <value name="VALUE">\n          <block type="math_number" id="32Y!`!Hso?aG%-1Uy8(b">\n            <field name="NUM">9</field>\n          </block>\n        </value>\n        <next>\n          <block type="variables_set" id="5#2ZirLJF@(|:)/2$qkw">\n            <field name="VAR" id="rUPB[)tUi3we;byHr`7]" variabletype="">1 ou 2 segundos</field>\n            <value name="VALUE">\n              <block type="math_number" id=":N}6E]-XIDi$;w[B!qq}">\n                <field name="NUM">1</field>\n              </block>\n            </value>\n            <next>\n              <block type="variables_set" id="gOH1q(Lqj,Kv4+[K|s=-">\n                <field name="VAR" id="4+UcGJ_mE@7^Z8-d@JaJ" variabletype="">N\xfamero de loss ( N\xe3o Alterar )</field>\n                <value name="VALUE">\n                  <block type="math_number" id="t`]#Z4#DVjSp^{RXbqGP">\n                    <field name="NUM">2</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="0!#{3_;P@j;~oXkHmGY|">\n                    <field name="VAR" id="FlX%77!9AMWGEu#,)Nme" variabletype="">Parar com perda de</field>\n                    <value name="VALUE">\n                      <block type="math_number" id="49t$ms:#8*kc6Uer8#](">\n                        <field name="NUM">1000</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="rY9MYKWTV39sxDv;+kdr">\n                        <field name="VAR" id="a?$LW}C4v+XX:Lc%6-OS" variabletype="">LUCRO DESEJADO</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="4cF?LqK#AJV6Jx.44($6">\n                            <field name="NUM">85</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="i,bH`bnP@u(WV|7i!Sz`">\n                            <field name="VAR" id="RHgF*C%#h{|Ha5u;#5j?" variabletype="">Entrada Inicial</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="7B-XT,+7XN#v|1Aa($uz">\n                                <field name="NUM">0.36</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="IxCR1Na7WMsp2@803{L+">\n                                <field name="VAR" id="(obU$~2J]hr/k0`hgX8/" variabletype="">ENTRADA AO VENCER</field>\n                                <value name="VALUE">\n                                  <block type="math_number" id="JCmZC^lr+W)d!Wm0(~pL">\n                                    <field name="NUM">0.36</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="variables_set" id="CpM6_k*o?xE[xaZ[Q@_-">\n                                    <field name="VAR" id="MgsL8H;~`;r/^Tuh1)y=" variabletype="">Gale</field>\n                                    <value name="VALUE">\n                                      <block type="math_number" id="`2(cyquM9#yV^pDqZ`gJ">\n                                        <field name="NUM">0.53</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n    <statement name="SUBMARKET">\n      <block type="trade_definition_tradeoptions" id="Kszy$t;dmMnU=/jxC1]D">\n        <mutation has_first_barrier="false" has_second_barrier="false" has_prediction="true"></mutation>\n        <field name="DURATIONTYPE_LIST">t</field>\n        <value name="DURATION">\n          <block type="variables_get" id="7a8:-3ae0d--8A)@0h[z">\n            <field name="VAR" id="rUPB[)tUi3we;byHr`7]" variabletype="">1 ou 2 segundos</field>\n          </block>\n        </value>\n        <value name="AMOUNT">\n          <block type="variables_get" id="IuC0}Qm@Z=mX]d}3?w(3">\n            <field name="VAR" id="RHgF*C%#h{|Ha5u;#5j?" variabletype="">Entrada Inicial</field>\n          </block>\n        </value>\n        <value name="PREDICTION">\n          <shadow type="math_number_positive" id="v.=8NeLzY(C6th2eE#$l">\n            <field name="NUM">1</field>\n          </shadow>\n          <block type="variables_get" id="+:eFWwjF^q~1G=PBd)#q">\n            <field name="VAR" id="6o_9Nu#$3m#.?zV=ahjK" variabletype="">Deixar em 8 ou 9</field>\n          </block>\n        </value>\n      </block>\n    </statement>\n  </block>\n  <block type="after_purchase" id="tv^t?%1u*:W4IT%pX|zi" collapsed="true" x="670" y="0">\n    <statement name="AFTERPURCHASE_STACK">\n      <block type="controls_if" id="sJy=W27to^xWtEfx^!In">\n        <mutation else="1"></mutation>\n        <value name="IF0">\n          <block type="contract_check_result" id="f]tjuq1|sUj(]nr6M7kS">\n            <field name="CHECK_RESULT">win</field>\n          </block>\n        </value>\n        <statement name="DO0">\n          <block type="text_join" id="0S$z$|5B/gB6]hVHfFNe">\n            <field name="VARIABLE" id="N5h(uF)6G2cql)h{ZR;h" variabletype="">text</field>\n            <statement name="STACK">\n              <block type="text_statement" id="X%Gq.^p$,4upbkB:6uG6">\n                <value name="TEXT">\n                  <shadow type="text" id="wR[F5j:j}_}AIHKj`/@]">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="ofXQ2#?`|+.v^e{h7qwK">\n                    <field name="TEXT">B20 Bruno Trader VIT\xd2RIA +</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="712]i{I(V{L6i9.Wc?T^">\n                    <value name="TEXT">\n                      <shadow type="text" id="4M~2JZK-6NWn8_tB%Lfz">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="read_details" id="ntYjAA|;7owvxr2YL!M;">\n                        <field name="DETAIL_INDEX">4</field>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id=".`1tJfY^10WASKPQ$J_~">\n                <field name="NOTIFICATION_TYPE">success</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <block type="variables_get" id="P:a_6!^X|`N-X~g:PrFP">\n                    <field name="VAR" id="N5h(uF)6G2cql)h{ZR;h" variabletype="">text</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="variables_set" id="$qa*:ge{6Bl[W~fx545#">\n                    <field name="VAR" id="RHgF*C%#h{|Ha5u;#5j?" variabletype="">Entrada Inicial</field>\n                    <value name="VALUE">\n                      <block type="variables_get" id="Gkvu^[]/3G:cW|lCmedw">\n                        <field name="VAR" id="(obU$~2J]hr/k0`hgX8/" variabletype="">ENTRADA AO VENCER</field>\n                      </block>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="?wi*6(=={p4QrTE?E`2~">\n                        <field name="VAR" id="kQ+Ke(]*eQpM[qgfd~+g" variabletype="">Contador</field>\n                        <value name="VALUE">\n                          <block type="math_number" id="Yq%a{YtZLKX!w;j1RXP?">\n                            <field name="NUM">0</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="6[t)pQa;ZT2W@-@9v[$u">\n                            <field name="VAR" id="6o_9Nu#$3m#.?zV=ahjK" variabletype="">Deixar em 8 ou 9</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="q2_E,aeD4j$(0ZpBYdbz">\n                                <field name="NUM">8</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="variables_set" id="MQ=0$V5s(xkFcK*yxOA_">\n                                <field name="VAR" id="rUPB[)tUi3we;byHr`7]" variabletype="">1 ou 2 segundos</field>\n                                <value name="VALUE">\n                                  <block type="variables_get" id="ENK7$E3PQkxTYfCWa`QH">\n                                    <field name="VAR" id="rUPB[)tUi3we;byHr`7]" variabletype="">1 ou 2 segundos</field>\n                                  </block>\n                                </value>\n                                <next>\n                                  <block type="trade_again" id="cw].p*FJWZBupT$eqR!M"></block>\n                                </next>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <statement name="ELSE">\n          <block type="text_join" id=":4hsJB@ruUmH-fJS,4m0">\n            <field name="VARIABLE" id=")-9T~6%gxe29l#C#)qts" variabletype="">text1</field>\n            <statement name="STACK">\n              <block type="text_statement" id="u9XqKYD#Vai.X-[`,uso">\n                <value name="TEXT">\n                  <shadow type="text" id="y/YHKw_5m-@Kf^i`(yRS">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id="MiNQ+-d*C683iU0`o4md">\n                    <field name="TEXT">B20 Perda -</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Do5M]Ky9%Gr{(pV#Cz/5">\n                    <value name="TEXT">\n                      <shadow type="text" id="vmMsInvTJ-hw~JKi6lWx">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="math_single" id="?fQk@]behN#[bIF{rF[7">\n                        <field name="OP">ABS</field>\n                        <value name="NUM">\n                          <shadow type="math_number" id="9~o+DI$6c3rP,K3E2x%|">\n                            <field name="NUM">9</field>\n                          </shadow>\n                          <block type="read_details" id="0SbR!Yt]O*F2Cb4A+|lS">\n                            <field name="DETAIL_INDEX">4</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id="F)C~I.3[,jjDu_F;ICpi">\n                <field name="NOTIFICATION_TYPE">warn</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <block type="variables_get" id="px#T3t]nmR@pu-!CQe;#">\n                    <field name="VAR" id=")-9T~6%gxe29l#C#)qts" variabletype="">text1</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="math_change" id="0c)nVxs6Nrk$QLnPk)w:">\n                    <field name="VAR" id="kQ+Ke(]*eQpM[qgfd~+g" variabletype="">Contador</field>\n                    <value name="DELTA">\n                      <shadow type="math_number" id="*qO$Mp_db8_!D8g#XKBP">\n                        <field name="NUM">1</field>\n                      </shadow>\n                    </value>\n                    <next>\n                      <block type="variables_set" id="2F,Ffs8?a5dKUilg%@i[">\n                        <field name="VAR" id="rUPB[)tUi3we;byHr`7]" variabletype="">1 ou 2 segundos</field>\n                        <value name="VALUE">\n                          <block type="variables_get" id="3FZHSh;f4e.sAFJ1A`}=">\n                            <field name="VAR" id="rUPB[)tUi3we;byHr`7]" variabletype="">1 ou 2 segundos</field>\n                          </block>\n                        </value>\n                        <next>\n                          <block type="variables_set" id="C?C4r`^,0v,D9e*(h^Iw">\n                            <field name="VAR" id="6o_9Nu#$3m#.?zV=ahjK" variabletype="">Deixar em 8 ou 9</field>\n                            <value name="VALUE">\n                              <block type="math_number" id="Hj6D[]Ga/fY{~w/5@TCh">\n                                <field name="NUM">4</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="controls_if" id="6L?zK,]Qws.xo?*(GemE">\n                                <value name="IF0">\n                                  <block type="logic_compare" id="P)iuYC-KN0]}(W?=;)H+">\n                                    <field name="OP">GTE</field>\n                                    <value name="A">\n                                      <block type="variables_get" id="BS1Kb/,`O@y}{9Od4rV5">\n                                        <field name="VAR" id="kQ+Ke(]*eQpM[qgfd~+g" variabletype="">Contador</field>\n                                      </block>\n                                    </value>\n                                    <value name="B">\n                                      <block type="variables_get" id="@L`XIY~OfzFLV?E~`X~Q">\n                                        <field name="VAR" id="4+UcGJ_mE@7^Z8-d@JaJ" variabletype="">N\xfamero de loss ( N\xe3o Alterar )</field>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <statement name="DO0">\n                                  <block type="math_change" id="R7QtsoT2WFk`*MK0_fy*">\n                                    <field name="VAR" id="RHgF*C%#h{|Ha5u;#5j?" variabletype="">Entrada Inicial</field>\n                                    <value name="DELTA">\n                                      <shadow type="math_number" id="h(2BZh#T.]odF-bqQKcd">\n                                        <field name="NUM">1</field>\n                                      </shadow>\n                                      <block type="math_arithmetic" id="Gl2+IAN)5b!-?RayfW3W">\n                                        <field name="OP">MULTIPLY</field>\n                                        <value name="A">\n                                          <shadow type="math_number" id="3J6xZNy/`wRJZUYz4DLX">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="math_single" id="Dnw,PYK`H_I-M2voTUTl">\n                                            <field name="OP">ABS</field>\n                                            <value name="NUM">\n                                              <shadow type="math_number" id="F8ts_dw*D9O8R7_^C/Mq">\n                                                <field name="NUM">9</field>\n                                              </shadow>\n                                              <block type="read_details" id="cj527u@:f[5O%EPU/jOk">\n                                                <field name="DETAIL_INDEX">4</field>\n                                              </block>\n                                            </value>\n                                          </block>\n                                        </value>\n                                        <value name="B">\n                                          <shadow type="math_number" id=");k~+=ZUM,8V7ovDrIH/">\n                                            <field name="NUM">1</field>\n                                          </shadow>\n                                          <block type="variables_get" id="Z~)63Nf5@3llDqm$7(xT">\n                                            <field name="VAR" id="MgsL8H;~`;r/^Tuh1)y=" variabletype="">Gale</field>\n                                          </block>\n                                        </value>\n                                      </block>\n                                    </value>\n                                  </block>\n                                </statement>\n                              </block>\n                            </next>\n                          </block>\n                        </next>\n                      </block>\n                    </next>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </statement>\n        <next>\n          <block type="text_join" id="fS~U8K1ETkV}kGezbOad">\n            <field name="VARIABLE" id="LN}r@t3f(x%mM[7-P|ft" variabletype="">text2</field>\n            <statement name="STACK">\n              <block type="text_statement" id="0.hK03^|s./];j4,8F0#">\n                <value name="TEXT">\n                  <shadow type="text" id="INApBo@yKFM/;3@?@643">\n                    <field name="TEXT"></field>\n                  </shadow>\n                  <block type="text" id=";pRO7vFM;D,$uWpJQ7lz">\n                    <field name="TEXT">B20 LUCRO  +</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="text_statement" id="Mdm6aP_wz;NLoG8Tg,5F">\n                    <value name="TEXT">\n                      <shadow type="text" id="-id||!ljv_ck6p],Hr3Y">\n                        <field name="TEXT"></field>\n                      </shadow>\n                      <block type="total_profit" id="g?#o-:15|FA^3)X?~EV["></block>\n                    </value>\n                  </block>\n                </next>\n              </block>\n            </statement>\n            <next>\n              <block type="notify" id="eb[Y2^{r2HB9GDtlA1lb">\n                <field name="NOTIFICATION_TYPE">info</field>\n                <field name="NOTIFICATION_SOUND">silent</field>\n                <value name="MESSAGE">\n                  <block type="variables_get" id=":elwQ?kI@R)@Hga*[Fn{">\n                    <field name="VAR" id="LN}r@t3f(x%mM[7-P|ft" variabletype="">text2</field>\n                  </block>\n                </value>\n                <next>\n                  <block type="controls_if" id="FLa][VYobXnlFN$6x]O#">\n                    <mutation else="1"></mutation>\n                    <value name="IF0">\n                      <block type="logic_compare" id="P3aB~_;AV$cEuSque9+m">\n                        <field name="OP">LT</field>\n                        <value name="A">\n                          <block type="total_profit" id="rFO7]5)Jjs9$+b2SUSPi"></block>\n                        </value>\n                        <value name="B">\n                          <block type="variables_get" id="7I/|[$VXtY-)v_kHw=1T">\n                            <field name="VAR" id="a?$LW}C4v+XX:Lc%6-OS" variabletype="">LUCRO DESEJADO</field>\n                          </block>\n                        </value>\n                      </block>\n                    </value>\n                    <statement name="DO0">\n                      <block type="controls_if" id="([L*WBMg~O565fbH|+*?">\n                        <mutation else="1"></mutation>\n                        <value name="IF0">\n                          <block type="logic_operation" id=":XEl)hs$uy/s?bvYCc0F">\n                            <field name="OP">AND</field>\n                            <value name="A">\n                              <block type="math_number_property" id="C38hi(S8$HDRG{A8,X$$">\n                                <mutation divisor_input="false"></mutation>\n                                <field name="PROPERTY">NEGATIVE</field>\n                                <value name="NUMBER_TO_CHECK">\n                                  <shadow type="math_number" id="nUOBSl#cC[ZI/+spB7wR">\n                                    <field name="NUM">0</field>\n                                  </shadow>\n                                  <block type="total_profit" id="Oe]K,lj}NJFWB2MWDd6^"></block>\n                                </value>\n                              </block>\n                            </value>\n                            <value name="B">\n                              <block type="logic_compare" id="rw*[bmNBySP];v-H$~W*">\n                                <field name="OP">GTE</field>\n                                <value name="A">\n                                  <block type="math_single" id="l9S0Z`^8|s{V9{7OgBPr">\n                                    <field name="OP">ABS</field>\n                                    <value name="NUM">\n                                      <shadow type="math_number" id="TcnDT+bnC{BD.]cZB32f">\n                                        <field name="NUM">9</field>\n                                      </shadow>\n                                      <block type="total_profit" id="iKiJ.QGJrpE8@DN1TZ:8"></block>\n                                    </value>\n                                  </block>\n                                </value>\n                                <value name="B">\n                                  <block type="variables_get" id="3,3+c=7xscv63o!sg+|7">\n                                    <field name="VAR" id="FlX%77!9AMWGEu#,)Nme" variabletype="">Parar com perda de</field>\n                                  </block>\n                                </value>\n                              </block>\n                            </value>\n                          </block>\n                        </value>\n                        <statement name="DO0">\n                          <block type="text_print" id="Az*o2P=-$tl_JI#(Ppn}">\n                            <value name="TEXT">\n                              <shadow type="text" id="xfPeIzBSRfDoK%u-*`*?">\n                                <field name="TEXT">Stop Loss</field>\n                              </shadow>\n                            </value>\n                          </block>\n                        </statement>\n                        <statement name="ELSE">\n                          <block type="timeout" id="W`$Um/y[eJMUFV~[k2q,">\n                            <statement name="TIMEOUTSTACK">\n                              <block type="trade_again" id="ZP/%[]2Z][ypf^N]KtdN"></block>\n                            </statement>\n                            <value name="SECONDS">\n                              <shadow type="math_number" id="AZ%nLTP@%x4,M2_ao[:Y">\n                                <field name="NUM">0</field>\n                              </shadow>\n                            </value>\n                          </block>\n                        </statement>\n                      </block>\n                    </statement>\n                    <statement name="ELSE">\n                      <block type="text_join" id="hJC6;.1VNm:|+k^!YHkZ">\n                        <field name="VARIABLE" id="^3d~6DUQ!o8XQTn.XB!c" variabletype="">text3</field>\n                        <statement name="STACK">\n                          <block type="text_statement" id="2,rW;qA:(lJ,DC]3|3.9">\n                            <value name="TEXT">\n                              <shadow type="text" id="^HSAwEMu*cN@f)x?[znV">\n                                <field name="TEXT"></field>\n                              </shadow>\n                              <block type="text" id="dkaG*J8K^vbB[W9:3{Dy">\n                                <field name="TEXT">B20_DIGITS_UNDER</field>\n                              </block>\n                            </value>\n                            <next>\n                              <block type="text_statement" id="[.-J|u^m}oG9-~tv@9NT">\n                                <value name="TEXT">\n                                  <shadow type="text" id="q+:H%Y=!J~C/YZV^_iBH">\n                                    <field name="TEXT"></field>\n                                  </shadow>\n                                  <block type="total_profit" id="7E3THS+!(5Cb3Wu-j5#K"></block>\n                                </value>\n                              </block>\n                            </next>\n                          </block>\n                        </statement>\n                        <next>\n                          <block type="text_print" id=".FvHuk5.bw.pyf8G*b57">\n                            <value name="TEXT">\n                              <shadow type="text" id="L{thT}[kyuD~x%2xR7`E">\n                                <field name="TEXT">abc</field>\n                              </shadow>\n                              <block type="variables_get" id="=M9cG}jNv`EDYOmL)x$0">\n                                <field name="VAR" id="^3d~6DUQ!o8XQTn.XB!c" variabletype="">text3</field>\n                              </block>\n                            </value>\n                          </block>\n                        </next>\n                      </block>\n                    </statement>\n                  </block>\n                </next>\n              </block>\n            </next>\n          </block>\n        </next>\n      </block>\n    </statement>\n  </block>\n  <block type="before_purchase" id="_P/][8`46qGCyQ$AvmG!" collapsed="true" deletable="false" x="0" y="936">\n    <statement name="BEFOREPURCHASE_STACK">\n      <block type="purchase" id="U]c~],9#*VpiiX^=R!M1">\n        <field name="PURCHASE_LIST">DIGITUNDER</field>\n      </block>\n    </statement>\n  </block>\n</xml>',
          },
        ];
        class tu {
          async initWorkspace(e, t, i, a, o) {
            await tl(o);
            let s = await (0, te.WN)();
            this.interpreter = e4();
            var r = this;
            return (
              (window.Blockly.Blocks.trade_definition_tradetype.onchange =
                function (e) {
                  if (
                    !this.workspace ||
                    window.Blockly.derivWorkspace.isFlyoutVisible ||
                    this.workspace.isDragging()
                  )
                    return;
                  this.enforceLimitations();
                  let { name: t, type: n } = e;
                  if (n === window.Blockly.Events.BLOCK_CHANGE) {
                    let n = "SYMBOL_LIST" === t,
                      o = "TRADETYPECAT_LIST" === t;
                    if (n || o) {
                      var i, a;
                      let { contracts_for: t } =
                          (null === c.Z || void 0 === c.Z
                            ? void 0
                            : c.Z.instance) ?? {},
                        s = this.getTopParent().getChildByType(
                          "trade_definition_market"
                        ),
                        l = s.getFieldValue("MARKET_LIST"),
                        d = s.getFieldValue("SUBMARKET_LIST"),
                        u = s.getFieldValue("SYMBOL_LIST"),
                        h = this.getFieldValue("TRADETYPECAT_LIST"),
                        p = this.getFieldValue("TRADETYPE_LIST");
                      if (("accumulator" !== p && (0, ti.wd)(r), n)) {
                        if (
                          (null == t ||
                            null === (i = t.getTradeTypeCategories) ||
                            void 0 === i ||
                            i.call(t, l, d, u).then((t) => {
                              let n = this.getField("TRADETYPECAT_LIST");
                              n &&
                                n.updateOptions(t, {
                                  default_value: h,
                                  should_pretend_empty: !0,
                                  event_group: e.group,
                                });
                            }),
                          (r.symbol = u),
                          !r.is_bot_running &&
                            r.interpreter &&
                            !this.workspace.options.readOnly &&
                            u !== r.interpreter.bot.tradeEngine.symbol)
                        ) {
                          let e = document.querySelector(
                            "#db-animation__run-button"
                          );
                          e && (e.disabled = !0),
                            r.interpreter
                              .unsubscribeFromTicksService()
                              .then(async () => {
                                var e;
                                await (null === (e = r.interpreter) ||
                                void 0 === e
                                  ? void 0
                                  : e.bot.tradeEngine.watchTicks(u));
                              });
                        }
                      } else
                        o &&
                          e.blockId === this.id &&
                          (null == t ||
                            null === (a = t.getTradeTypes) ||
                            void 0 === a ||
                            a.call(t, l, d, u, h).then((t) => {
                              this.getField("TRADETYPE_LIST").updateOptions(t, {
                                default_value: p,
                                should_pretend_empty: !0,
                                event_group: e.group,
                              });
                            }));
                    }
                  }
                }),
              new Promise((o, r) => {
                (n.p = e), c.Z.setInstance(i), J.Z.setInstance(t);
                let d = window.innerWidth;
                try {
                  let e = 0.7,
                    { handleFileChange: t } = J.Z.instance;
                  if (d < 1640) {
                    if (a) e = 0.6;
                    else {
                      var u;
                      let t =
                        null === (u = document.getElementById("scratch_div")) ||
                        void 0 === u
                          ? void 0
                          : u.offsetWidth;
                      e = t / d / 1.5;
                    }
                  }
                  let n = document.getElementById("scratch_div");
                  if (!n) return;
                  (this.workspace = window.Blockly.inject(n, {
                    media: "assets/media/",
                    renderer: "zelos",
                    trashcan: !a,
                    zoom: { wheel: !0, startScale: e },
                    scrollbars: !0,
                    theme: window.Blockly.Themes.zelos_renderer,
                  })),
                    (this.workspace.RTL = (0, tt.rK)()),
                    (this.workspace.cached_xml = { main: tn.default }),
                    (this.workspace.dollar_cached_xml = tc),
                    this.workspace.addChangeListener(
                      this.valueInputLimitationsListener.bind(this)
                    ),
                    this.workspace.addChangeListener((e) =>
                      (0, td.P_)(this.workspace, e)
                    ),
                    this.workspace.addChangeListener((e) =>
                      this.workspace.dispatchBlockEventEffects(e)
                    ),
                    this.workspace.addChangeListener((e) => {
                      if (
                        ("drag" === e.type && !e.isStart && !a && (0, td.Y2)(),
                        e.type == window.Blockly.Events.BLOCK_CHANGE)
                      ) {
                        let t = this.workspace.getBlockById(e.blockId);
                        a &&
                          t &&
                          "collapsed" == e.element &&
                          (t.contextMenu = !1);
                      }
                    }),
                    (window.Blockly.derivWorkspace = this.workspace);
                  let i = new window.Blockly.Names("window");
                  (i.variableMap =
                    window.Blockly.derivWorkspace.getVariableMap()),
                    (window.Blockly.JavaScript.variableDB_ = i),
                    this.addBeforeRunFunction(this.unselectBlocks.bind(this)),
                    this.addBeforeRunFunction(
                      this.disableStrayBlocks.bind(this)
                    ),
                    this.addBeforeRunFunction(
                      this.checkForErroredBlocks.bind(this)
                    ),
                    this.addBeforeRunFunction(
                      this.checkForRequiredBlocks.bind(this)
                    ),
                    (this.workspace.current_strategy_id =
                      window.Blockly.utils.idGenerator.genUid()),
                    (window.Blockly.derivWorkspace.strategy_to_load =
                      tn.default),
                    (window.Blockly.getMainWorkspace().strategy_to_load =
                      tn.default),
                    (window.Blockly.getMainWorkspace().RTL = (0, tt.rK)());
                  let r = (0, l.v)().default_file_name;
                  if (s && s.length) {
                    let e = s[0];
                    (window.Blockly.derivWorkspace.strategy_to_load = e.xml),
                      (window.Blockly.getMainWorkspace().strategy_to_load =
                        e.xml),
                      (r = e.name),
                      (window.Blockly.derivWorkspace.current_strategy_id =
                        e.id),
                      (window.Blockly.getMainWorkspace().current_strategy_id =
                        e.id);
                  }
                  let c = `dbot-load${Date.now()}`;
                  window.Blockly.Events.setGroup(c),
                    window.Blockly.Xml.domToWorkspace(
                      window.Blockly.utils.xml.textToDom(
                        window.Blockly.derivWorkspace.strategy_to_load
                      ),
                      this.workspace
                    );
                  let { save_modal: h } = J.Z.instance;
                  h.updateBotName(r),
                    this.workspace.cleanUp(0, a ? 60 : 56),
                    this.workspace.clearUndo(),
                    window.dispatchEvent(new Event("resize")),
                    window.addEventListener("dragover", tu.handleDragOver),
                    window.addEventListener("drop", (e) =>
                      tu.handleDropOver(e, t)
                    ),
                    (n.parentNode.style.overflow = "hidden"),
                    o();
                } catch (e) {
                  throw (r(e), e);
                }
              })
            );
          }
          isStrategyUpdated(e, t) {
            if (t && t.length) {
              var n;
              let i =
                null ===
                  (n = t.filter((e) => {
                    var t;
                    return (
                      (null == e ? void 0 : e.id) ===
                      (null === (t = this.workspace) || void 0 === t
                        ? void 0
                        : t.current_strategy_id)
                    );
                  })) || void 0 === n
                  ? void 0
                  : n[0];
              if (null == i ? void 0 : i.xml) {
                let t = null == i ? void 0 : i.xml,
                  n = window.Blockly.Xml.domToText(e);
                if ((0, e7.dY)(t, n)) return !1;
              }
            }
            return !0;
          }
          async saveRecentWorkspace() {
            var e, t;
            let n = (null === this || void 0 === this ? void 0 : this.workspace)
              ? null === (t = Blockly) || void 0 === t
                ? void 0
                : null === (e = t.Xml) || void 0 === e
                ? void 0
                : e.workspaceToDom(this.workspace)
              : null;
            try {
              let e = await (0, te.WN)();
              n &&
                this.isStrategyUpdated(n, e) &&
                (await (0, te.l5)(n, r.Rg.UNSAVED));
            } catch (e) {
              e7.Pi.emit("Error", e), await (0, te.l5)(n, r.Rg.UNSAVED);
            }
          }
          addBeforeRunFunction(e) {
            this.before_run_funcs.push(e);
          }
          shouldRunBot() {
            return this.before_run_funcs.every((e) => !!e());
          }
          async initializeInterpreter() {
            this.interpreter && (await this.interpreter.terminateSession()),
              (this.interpreter = e4());
          }
          runBot() {
            if (!d.DO.is_stopping)
              try {
                d.DO.is_stopping = !1;
                let e = this.generateCode();
                !this.interpreter.bot.tradeEngine.checkTicksPromiseExists() &&
                  (this.interpreter = e4()),
                  (this.is_bot_running = !0),
                  d.DO.setIsRunning(!0),
                  this.interpreter.run(e).catch((e) => {
                    e7.Pi.emit("Error", e), this.stopBot();
                  });
              } catch (e) {
                e7.Pi.emit("Error", e), this.interpreter && this.stopBot();
              }
          }
          generateCode() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            return `
            var BinaryBotPrivateInit;
            var BinaryBotPrivateStart;
            var BinaryBotPrivateBeforePurchase; 
            var BinaryBotPrivateDuringPurchase;
            var BinaryBotPrivateAfterPurchase;
            var BinaryBotPrivateLastTickTime;
            var BinaryBotPrivateTickAnalysisList = [];
            var BinaryBotPrivateHasCalledTradeOptions = false;

           
            function recursiveList(list, final_list){
                for(var i=0; i < list.length; i++){
                    if(typeof(list[i]) === 'object'){
                        recursiveList(list[i], final_list);
                    }
                    if(typeof(list[i]) == 'number'){
                        final_list.push(list[i]);   
                                  
                    }
                }
                return final_list;
            }

            function BinaryBotPrivateRun(f, arg) {
                if (f) return f(arg);
                return false;
            }
            function BinaryBotPrivateTickAnalysis() {
                var currentTickTime = Bot.getLastTick(true);
                while (currentTickTime === 'MarketIsClosed') {
                    sleep(5);
                    currentTickTime = Bot.getLastTick(true);
                }
                currentTickTime = currentTickTime.epoch;
                if (currentTickTime === BinaryBotPrivateLastTickTime) {
                    return;
                }
                BinaryBotPrivateLastTickTime = currentTickTime;
                for (var BinaryBotPrivateI = 0; BinaryBotPrivateI < BinaryBotPrivateTickAnalysisList.length; BinaryBotPrivateI++) {
                    BinaryBotPrivateRun(BinaryBotPrivateTickAnalysisList[BinaryBotPrivateI]);
                }
            }
            var BinaryBotPrivateLimitations = ${JSON.stringify(e)};
            ${window.Blockly.JavaScript.javascriptGenerator.workspaceToCode(
              this.workspace
            )}
            BinaryBotPrivateRun(BinaryBotPrivateInit);
            while (true) {
                BinaryBotPrivateTickAnalysis();
                BinaryBotPrivateRun(BinaryBotPrivateStart);
                if (!BinaryBotPrivateHasCalledTradeOptions) {
                    sleep(1);
                    continue;
                }
                while (watch('before')) {
                    BinaryBotPrivateTickAnalysis();
                    BinaryBotPrivateRun(BinaryBotPrivateBeforePurchase);
                }
                while (watch('during')) {
                    BinaryBotPrivateTickAnalysis();
                    BinaryBotPrivateRun(BinaryBotPrivateDuringPurchase);
                }
                BinaryBotPrivateTickAnalysis();
                if (!BinaryBotPrivateRun(BinaryBotPrivateAfterPurchase)) {
                    break;
                }
            }
            
            `;
          }
          async stopBot() {
            !d.DO.is_stopping &&
              (d.DO.setIsRunning(!1),
              await this.interpreter.stop(),
              (this.is_bot_running = !1),
              (this.interpreter = null),
              (this.interpreter = e4()),
              await this.interpreter.bot.tradeEngine.watchTicks(this.symbol),
              (0, ti.wd)(this));
          }
          async terminateBot() {
            this.interpreter &&
              (await this.interpreter.terminateSession(),
              (this.interpreter = null),
              (this.interpreter = e4()),
              await this.interpreter.bot.tradeEngine.watchTicks(this.symbol));
          }
          unselectBlocks() {
            return (
              window.Blockly.getSelected() &&
                window.Blockly.getSelected().unselect(),
              !0
            );
          }
          disableStrayBlocks() {
            return (
              this.workspace.getTopBlocks().forEach((e) => {
                !e.isMainBlock() &&
                  !e.isIndependentBlock() &&
                  this.disableBlocksRecursively(e);
              }),
              !0
            );
          }
          disableBlocksRecursively(e) {
            var t;
            e.setDisabled(!0),
              (null === (t = e.nextConnection) || void 0 === t
                ? void 0
                : t.targetConnection) &&
                this.disableBlocksRecursively(
                  e.nextConnection.targetConnection.sourceBlock_
                );
          }
          checkForErroredBlocks() {
            this.valueInputLimitationsListener({}, !0);
            let e = this.workspace
              .getAllBlocks(!0)
              .filter((e) => e.is_error_highlighted && !e.disabled)
              .filter(
                (e, t, n) =>
                  t === n.findIndex((t) => t.error_message === e.error_message)
              );
            return (
              !e.length ||
              (this.workspace.centerOnBlock(e[0].id),
              e.forEach((e) => {
                e7.Pi.emit("ui.log.error", e.error_message);
              }),
              !1)
            );
          }
          centerAndHighlightBlock(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
              n = this.workspace.getBlockById(e);
            if (!!n)
              this.workspace
                .getAllBlocks()
                .forEach((e) => e.setErrorHighlighted(!1)),
                t && n.blink(),
                n.setErrorHighlighted(!0),
                this.workspace.centerOnBlock(n.id);
          }
          unHighlightAllBlocks() {
            var e;
            null === (e = this.workspace) ||
              void 0 === e ||
              e.getAllBlocks().forEach((e) => e.setErrorHighlighted(!1));
          }
          checkForRequiredBlocks() {
            return (0, td.nf)(this.workspace);
          }
          valueInputLimitationsListener(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (!t && (!this.workspace || this.workspace.isDragging())) return;
            window.Blockly.JavaScript.javascriptGenerator.init(this.workspace),
              t && window.Blockly.hideChaff(!1);
            let n = () =>
                e.type === window.Blockly.Events.BLOCK_DRAG && !e.isStart,
              i = () => e.type === window.Blockly.Events.BLOCK_DELETE,
              a = () => e.type === window.Blockly.Events.BLOCK_CREATE,
              o = () =>
                e.type === window.Blockly.Events.UI &&
                ("click" === e.element || "selected" === e.element),
              s = (t) =>
                e.type === window.Blockly.Events.BLOCK_CHANGE &&
                e.blockId === t.id,
              r = (t) =>
                e.type === window.Blockly.Events.BLOCK_CHANGE &&
                t.inputList.some((t) => {
                  if (t.connection) {
                    let n = t.connection.targetBlock();
                    return n && e.blockId === n.id;
                  }
                  return !1;
                }),
              l = (t) => {
                if (
                  e.type === window.Blockly.Events.BLOCK_CHANGE &&
                  "disabled" === e.element
                ) {
                  let n = t.getParent();
                  for (; null !== n; ) {
                    if (n.id === e.blockId) return !0;
                    n = n.getParent();
                  }
                }
                return !1;
              };
            this.workspace.getAllBlocks(!0).forEach((e) => {
              if (t || n() || i() || a() || o() || s(e) || r(e) || l(e)) {
                if (e.disabled) {
                  let t = (e) => {
                    e.forEach((e) => {
                      e.setErrorHighlighted(!1), t(e.getChildren());
                    });
                  };
                  t([e]);
                  return;
                }
                if (!e.getRequiredValueInputs) return;
                let n = e.getRequiredValueInputs(),
                  i = Object.keys(n).some((t) => {
                    let i = window.Blockly.getSelected() === e,
                      a = e.disabled || e.getInheritedDisabled();
                    if (i || a) return !1;
                    if (e.isCollapsed() && e.hasErrorHighlightedDescendant())
                      return !0;
                    let o = e.getInput(t);
                    if (o || e.domToMutation) {
                      if (o.connection) {
                        let i =
                            window.Blockly.JavaScript.javascriptGenerator
                              .ORDER_ATOMIC,
                          a =
                            window.Blockly.JavaScript.javascriptGenerator.valueToCode(
                              e,
                              t,
                              i
                            ),
                          o = n[t];
                        return "function" == typeof o ? !!o(a) : !a;
                      }
                    } else
                      console.warn("Detected a non-existent required input.", {
                        input_name: t,
                        type: e.type,
                      });
                    return !0;
                  });
                if (
                  (i && e.removeSelect(),
                  e.setErrorHighlighted(i, e.error_message || void 0),
                  t &&
                    (e.is_error_highlighted ||
                      e.hasErrorHighlightedDescendant()))
                ) {
                  let t = e;
                  for (; t; ) t.setCollapsed(!1), (t = t.getParent());
                }
              }
            });
          }
          getStrategySounds() {
            let e = this.workspace
                .getAllBlocks()
                .filter((e) => "notify" === e.type),
              t = [];
            return (
              e.forEach((e) => {
                let n = e.inputList[0].fieldRow[3].value_;
                "silent" !== n && t.push(n);
              }),
              t
            );
          }
          static handleDragOver(e) {
            e.stopPropagation(),
              e.preventDefault(),
              (e.dataTransfer.dropEffect = "copy");
          }
          static handleDropOver(e, t) {
            let n = document.getElementById("scratch_div"),
              i = document.getElementById("load-strategy__local-dropzone-area");
            n.contains(e.target)
              ? t(e)
              : i && i.contains(e.target)
              ? t(e, !1)
              : (e.stopPropagation(),
                e.preventDefault(),
                (e.dataTransfer.effectAllowed = "none"),
                (e.dataTransfer.dropEffect = "none"));
          }
          constructor() {
            (0, s._)(this, "terminateConnection", () => {
              d.DO.terminate();
            }),
              (this.interpreter = null),
              (this.workspace = null),
              (this.before_run_funcs = []),
              (this.symbol = null),
              (this.is_bot_running = !1);
          }
        }
        let th = new tu();
      },
      8813: function (e, t, n) {
        "use strict";
        n.d(t, {
          O: function () {
            return a;
          },
        });
        let i = () => {
            let e = Blockly;
            (e.Colours.RootBlock = {
              colour: "#064e72",
              colourSecondary: "#064e72",
              colourTertiary: "#6d7278",
            }),
              (e.Colours.Base = {
                colour: "#e5e5e5",
                colourSecondary: "#ffffff",
                colourTertiary: "#6d7278",
              }),
              (e.Colours.Special1 = {
                colour: "#e5e5e5",
                colourSecondary: "#ffffff",
                colourTertiary: "#6d7278",
              }),
              (e.Colours.Special2 = {
                colour: "#e5e5e5",
                colourSecondary: "#ffffff",
                colourTertiary: "#6d7278",
              }),
              (e.Colours.Special3 = {
                colour: "#e5e5e5",
                colourSecondary: "#ffffff",
                colourTertiary: "#6d7278",
              }),
              (e.Colours.Special4 = {
                colour: "#e5e5e5",
                colourSecondary: "#000000",
                colourTertiary: "#0e0e0e",
              });
          },
          a = () => i();
      },
      1560: function (e, t, n) {
        "use strict";
        n.d(t, {
          M: function () {
            return r;
          },
          p: function () {
            return s;
          },
        });
        var i = n(93162),
          a = n.n(i),
          o = n(47962);
        let s = (e) => {
            let { data: t, filename: n, type: i } = e,
              o = new Blob([t], { type: i });
            a().saveAs(o, n);
          },
          r = (e, t) => {
            let n = (0, o.v)().opposites[t.toUpperCase()];
            if (!n) return (0, o.v)().NOT_AVAILABLE_DROPDOWN_OPTIONS;
            let i = n.map((e) => Object.entries(e)[0].reverse());
            return "both" !== e ? i.filter((t) => t[1] === e) : i;
          };
      },
      2776: function (e, t, n) {
        "use strict";
        n.d(t, {
          zD: () => A,
          oG: () => D,
          Z3: () => Z,
          a1: () => N,
          yW: () => F,
          NW: () => en,
          P_: () => X,
          Hh: () => C,
          ox: () => v,
          Y2: () => T,
          UR: () => V,
          zJ: () => Y,
          $9: () => G,
          j3: () => Q,
          ei: () => K,
          dd: () => g,
          Tj: () => y,
          AA: () => ee,
          TU: () => et,
          cM: () => W,
          nf: () => j,
        });
        var i = n("64736"),
          a = n("59462"),
          o = n("66175"),
          s = n("48059"),
          r = n("47962"),
          l = n("51434"),
          d = n("55967"),
          c = n("66345"),
          u = n("65464"),
          h = n("26855"),
          p = n("13604"),
          m = n("94576");
        class _ {
          getConversions() {
            var e = this;
            let t = (e, t, n, i) => {
                let a = this.workspace.newBlock(t),
                  o = Array.from(e.children),
                  s = o.find((e) => "mutation" === e.tagName.toLowerCase());
                if (s) {
                  let e = parseInt(s.getAttribute("items")) || 0;
                  if (e > 0) {
                    for (let t = 0; t < e; t++) a.onIconClick();
                    o.filter(
                      (e) => "value" === e.tagName.toLowerCase()
                    ).forEach((e) => {
                      let t = parseInt(
                        e.getAttribute("name").replace(/[^0-9]+/g, "")
                      );
                      Array.from(e.children).forEach((e) => {
                        let n = this.convertBlockNode(e, a);
                        a.getBlocksInStatement("STACK")
                          .find((e, n) => t === n)
                          .getInput(i)
                          .connection.connect(n.outputConnection);
                      });
                      let n = e.parentNode;
                      n &&
                        e &&
                        (null == n ? void 0 : n.contains(e)) &&
                        (null == n || n.removeChild(e));
                    });
                  }
                }
                let r = this.generateUniqueVariable(n),
                  l = this.workspace.newBlock("variables_get");
                return (
                  l.setFieldValue(r.getId(), "VAR"),
                  a.setFieldValue(r.getId(), "VARIABLE"),
                  { block_to_attach: l, statement_blocks: [a] }
                );
              },
              n = (e, t, n) => {
                let i = this.workspace.newBlock(t),
                  a = {
                    input_list: [{ old: "INPUT", new: "INPUT_LIST" }],
                    period: [{ old: "PERIOD", new: "PERIOD" }],
                    fast_ema_period: [
                      { old: "FAST_EMA_PERIOD", new: "FAST_EMA_PERIOD" },
                    ],
                    signal_ema_period: [
                      { old: "SMA_PERIOD", new: "SIGNAL_EMA_PERIOD" },
                      { old: "SIGNAL_EMA_PERIOD", new: "SIGNAL_EMA_PERIOD" },
                    ],
                    slow_ema_period: [
                      { old: "SLOW_EMA_PERIOD", new: "SLOW_EMA_PERIOD" },
                    ],
                    std_dev_multiplier_up: [
                      { old: "UPMULTIPLIER", new: "UPMULTIPLIER" },
                    ],
                    std_dev_multiplier_down: [
                      { old: "DOWNMULTIPLIER", new: "DOWNMULTIPLIER" },
                    ],
                  };
                switch (t) {
                  case "bb_statement":
                  case "bba_statement": {
                    let t = i.getField("BBRESULT_LIST");
                    t && t.setValue(this.getFieldValue(e, "BBRESULT_LIST"));
                    break;
                  }
                  case "macda_statement": {
                    let t = i.getField("MACDFIELDS_LIST");
                    t && t.setValue(this.getFieldValue(e, "MACDFIELDS_LIST"));
                  }
                }
                (i.required_child_blocks || []).forEach((e) => {
                  let t = this.workspace.newBlock(e);
                  i.getLastConnectionInStatement("STATEMENT").connect(
                    t.previousConnection
                  );
                }),
                  i.getBlocksInStatement("STATEMENT").forEach((t) => {
                    let n = a[t.type];
                    n &&
                      n.forEach((n) => {
                        let a = e.querySelector(`value[name="${n.old}"]`);
                        if (a) {
                          let e = t.getInput(n.new);
                          Array.from(a.children).forEach((t) => {
                            let n = this.convertBlockNode(t, i);
                            "shadow" === t.tagName.toLowerCase() &&
                              n.setShadow(!0),
                              e.connection.connect(n.outputConnection);
                          });
                          let s = null == a ? void 0 : a.parentNode;
                          if (s && a && (null == s ? void 0 : s.contains(a))) {
                            var o;
                            null == a ||
                              null === (o = a.parentNode) ||
                              void 0 === o ||
                              o.removeChild(a);
                          }
                        }
                      });
                  });
                let o = this.generateUniqueVariable(n),
                  s = this.workspace.newBlock("variables_get");
                return (
                  s.setFieldValue(o.getId(), "VAR"),
                  i.setFieldValue(o.getId(), "VARIABLE"),
                  { block_to_attach: s, statement_blocks: [i] }
                );
              },
              i = function (t) {
                let n =
                    arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1],
                  i = e.workspace.newBlock("trade_definition_tradeoptions");
                if (n) return !1;
                let a = Array.from(t.children),
                  o = 0,
                  s = !1;
                return (
                  a
                    .filter((e) => "value" === e.tagName.toLowerCase())
                    .forEach((e) => {
                      let t = e.getAttribute("name");
                      "BARRIEROFFSET" === t || "SECONDBARRIEROFFSET" === t
                        ? o++
                        : "PREDICTION" === t && (s = !0);
                    }),
                  o > 0 &&
                    i.createBarrierInputs({
                      allow_both_types: !0,
                      values: [1, -1],
                    }),
                  s && i.createPredictionInput([0]),
                  [
                    "DURATIONTYPE_LIST",
                    "CURRENCY_LIST",
                    "BARRIEROFFSETTYPE_LIST",
                    "SECONDBARRIEROFFSETTYPE_LIST",
                  ].forEach((n) => {
                    let a = i.getField(n);
                    a && a.setValue(e.getFieldValue(t, n));
                  }),
                  { block_to_attach: i }
                );
              };
            return {
              bb: (e) => n(e, "bb_statement", "bb"),
              bba: (e) => n(e, "bba_statement", "bba"),
              ema: (e) => n(e, "ema_statement", "ema"),
              emaa: (e) => n(e, "emaa_statement", "emaa"),
              lists_create_with: (e) =>
                t(e, "lists_create_with", (0, s.NC)("list"), "VALUE"),
              macda: (e) => n(e, "macda_statement", "macda"),
              market: (e) => ((this.has_market_block = !0), i(e)),
              rsi: (e) => n(e, "rsi_statement", "rsi"),
              rsia: (e) => n(e, "rsia_statement", "rsia"),
              sma: (e) => n(e, "sma_statement", "sma"),
              smaa: (e) => n(e, "smaa_statement", "smaa"),
              text_join: (e) => t(e, "text_join", (0, s.NC)("text"), "TEXT"),
              trade: (e) => {
                let t = this.workspace.newBlock("trade_definition"),
                  n = {
                    trade_definition_market: [
                      "MARKET_LIST",
                      "SUBMARKET_LIST",
                      "SYMBOL_LIST",
                    ],
                    trade_definition_tradetype: [
                      "TRADETYPECAT_LIST",
                      "TRADETYPE_LIST",
                    ],
                    trade_definition_contracttype: ["TYPE_LIST"],
                    trade_definition_candleinterval: ["CANDLEINTERVAL_LIST"],
                    trade_definition_restartbuysell: ["TIME_MACHINE_ENABLED"],
                    trade_definition_restartonerror: ["RESTARTONERROR"],
                  },
                  i = {};
                return (
                  Object.keys(n).forEach((t) => {
                    let a = this.workspace.newBlock(t);
                    n[t].forEach((t) => {
                      a.setFieldValue(this.getFieldValue(e, t), t);
                    }),
                      (i[t] = a);
                  }),
                  Object.values(i).forEach((e) => {
                    t.getLastConnectionInStatement("TRADE_OPTIONS").connect(
                      e.previousConnection
                    );
                  }),
                  { block_to_attach: t }
                );
              },
              tradeOptions: i,
            };
          }
          getIllegalBlocks() {
            var e;
            let t = [],
              { active_symbols: n } = (null === p.Z || void 0 === p.Z
                ? void 0
                : null === (e = p.Z.instance) || void 0 === e
                ? void 0
                : e.active_symbols) ?? { active_symbols: [] },
              { opposites: i } = (0, r.v)();
            return (
              n.forEach((e) => {
                let n = e.symbol.toLowerCase();
                !t.includes(n) && t.push(n);
              }),
              Object.keys(i).forEach((e) => t.push(e)),
              t
            );
          }
          createWorkspace() {
            let e = new window.Blockly.Options({ media: "assets/images" }),
              t = new DocumentFragment();
            return window.Blockly.createVirtualWorkspace_(t, e, !1, !1);
          }
          getFieldValue(e, t) {
            let n = e.querySelector(`field[name="${t}"]`);
            return n ? n.textContent : "";
          }
          getFirstBlockInStack(e) {
            let t = e.previousConnection,
              n = e.getPreviousBlock();
            if (!t) return e;
            for (; n && n !== e.getSurroundParent(); ) {
              (t = n.previousConnection), (n = n.getPreviousBlock());
            }
            return t.sourceBlock_;
          }
          updateRenamedFields(e) {
            let t = {
              MARKET_LIST: { volidx: "synthetic_index" },
              TRADETYPECAT_LIST: {
                endsinout: "inout",
                staysinout: "inout",
                callputequal: "callput",
              },
              TRADETYPE_LIST: {
                risefall: "callput",
                risefallequals: "callputequal",
              },
            };
            return (
              Object.keys(t).forEach((n) => {
                let i = e.querySelector(`field[name="${n}"]`);
                if (i) {
                  let e = i.innerText;
                  Object.keys(t[n]).forEach((a) => {
                    e === a && (i.innerText = t[n][a]);
                  });
                }
              }),
              e
            );
          }
          naivelyFixLegacyStrategyAfterConversion() {
            var e;
            let t =
                null === (e = this.workspace) || void 0 === e
                  ? void 0
                  : e.getTradeDefinitionBlock(),
              n =
                (null == t
                  ? void 0
                  : t.getBlocksInStatement("INITIALIZATION").length) > 0;
            t &&
              t.getBlocksInStatement("SUBMARKET").forEach((e) => {
                if (
                  "trade_definition_tradeoptions" !== e.type &&
                  this.has_market_block &&
                  !n
                ) {
                  let n = t.getLastConnectionInStatement("INITIALIZATION");
                  e.unplug(!0), n.connect(e.previousConnection);
                }
              });
          }
          generateUniqueVariable(e) {
            let t = e,
              n = 0;
            for (; Object.values(this.workspace_variables).includes(t); )
              t = e + ++n;
            let i = window.Blockly.Variables.getOrCreateVariablePackage(
              this.workspace,
              "",
              t,
              ""
            );
            return (this.workspace_variables[i.id_] = t), i;
          }
          convertStrategy(e, t) {
            window.Blockly.Events.disable();
            let n = this.updateRenamedFields(e);
            if (
              e.hasAttribute("is_dbot") &&
              "true" === e.getAttribute("is_dbot")
            )
              return window.Blockly.Events.enable(), n;
            if (
              this.getIllegalBlocks().some((e) => {
                if (!this.exception_blocks.includes(e))
                  return !!n.querySelector(`block[type="${e}"]`);
              })
            )
              return (
                t && t(),
                window.Blockly.Events.enable(),
                window.Blockly.utils.xml.textToDom("<xml />")
              );
            let i = [],
              a = [];
            Array.from(n.children).forEach((e) => {
              switch (e.nodeName.toLowerCase()) {
                case "block":
                case "shadow":
                  a.push(e);
                  break;
                case "variables":
                  i.push(...e.children);
              }
            });
            let o = (e) => {
              e.forEach((e) => {
                let t = e.getAttribute("id"),
                  n = e.textContent;
                if (!this.workspace_variables[t]) {
                  let e = window.Blockly.Variables.getOrCreateVariablePackage(
                    this.workspace,
                    t,
                    n,
                    ""
                  );
                  this.workspace_variables[e.id_] = e.name;
                }
              });
            };
            o(i),
              o(n.querySelectorAll('field[name="VAR"]')),
              a.forEach((e) => this.convertBlockNode(e)),
              Object.keys(this.blocks_pending_reconnect).forEach((e) => {
                let t = this.workspace.getBlockById(e),
                  n = this.blocks_pending_reconnect[e],
                  i = t.previousConnection;
                if (i) {
                  let e = i.targetConnection,
                    a = i;
                  if (
                    (n.reverse().forEach((e) => {
                      a.connect(e.nextConnection), (a = e.previousConnection);
                    }),
                    e)
                  ) {
                    let n = t.previousConnection,
                      i = t.getPreviousBlock();
                    for (; i && i !== i.getSurroundParent(); ) {
                      (n = i.previousConnection), (i = i.getPreviousBlock());
                    }
                    e.connect(n);
                  }
                }
              }),
              this.naivelyFixLegacyStrategyAfterConversion(),
              this.workspace.getAllBlocks(!0).forEach((e) => {
                e.initSvg(), e.renderEfficiently();
              }),
              this.workspace.cleanUp();
            let s = window.Blockly.Xml.workspaceToDom(this.workspace);
            return (
              (0, m.Xt)(s),
              (this.workspace = null),
              window.Blockly.Events.enable(),
              s
            );
          }
          convertBlockNode(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null,
              n = this.getConversions(),
              i = e.getAttribute("type"),
              a = Object.keys(n).includes(i),
              o = null,
              s =
                (e.getAttribute("collapsed") &&
                  "true" === e.getAttribute("collapsed")) ||
                !1,
              r =
                e.getAttribute("movable") &&
                "false" === e.getAttribute("movable"),
              l =
                e.getAttribute("deletable") &&
                "false" === e.getAttribute("deletable"),
              d =
                e.getAttribute("disabled") &&
                "true" === e.getAttribute("disabled"),
              c = (e) => {
                e.setCollapsed(s),
                  e.setMovable(!r),
                  e.setDeletable(!l),
                  e.setDisabled(d);
              };
            if (a) {
              let a = n[i](e);
              a.block_to_attach && c((o = a.block_to_attach)),
                t &&
                  a.statement_blocks &&
                  a.statement_blocks.forEach((e) => {
                    c(e);
                    let n = this.getClosestLegalPreviousConnection(t);
                    if (n) {
                      let t = n.sourceBlock_;
                      !this.blocks_pending_reconnect[t.id] &&
                        (this.blocks_pending_reconnect[t.id] = []),
                        this.blocks_pending_reconnect[t.id].push(e);
                    }
                  });
            } else if (
              Object.keys(window.Blockly.Blocks).includes(i) &&
              (c((o = this.workspace.newBlock(i))), o)
            ) {
              let t = Array.from(e.children).find(
                (e) => "mutation" === e.tagName.toLowerCase()
              );
              t && o.domToMutation && o.domToMutation(t);
            }
            return o
              ? (t && (o.conversion_parent = t),
                Array.from(e.children).forEach((e) => {
                  switch (e.tagName.toLowerCase()) {
                    case "field": {
                      let t = e.getAttribute("name"),
                        n = o.getField(t);
                      if (n) {
                        if (n instanceof window.Blockly.FieldVariable) {
                          let t = e.getAttribute("id"),
                            i = e.innerText.trim(),
                            a =
                              window.Blockly.Variables.getOrCreateVariablePackage(
                                this.workspace,
                                t,
                                i,
                                ""
                              );
                          (this.workspace_variables[a.id_] = i),
                            n.setValue(a.id_);
                        } else n.setValue(e.innerText);
                      }
                      break;
                    }
                    case "value":
                      this.processValueInputs(o, e);
                      break;
                    case "statement": {
                      let t = e.getAttribute("name");
                      this.processStatementInputs(o, t, e);
                      break;
                    }
                    case "next": {
                      let t = e.closest("statement");
                      if (t) {
                        let n = t.getAttribute("name");
                        this.processStatementInputs(
                          o,
                          n,
                          e,
                          o.conversion_parent
                        );
                      } else
                        o.nextConnection &&
                          Array.from(e.children).forEach((e) => {
                            let t = this.convertBlockNode(e);
                            o.nextConnection.connect(t.previousConnection);
                          });
                    }
                  }
                }),
                o)
              : (console.warn("Unrecognised block found.", i), !1);
          }
          processValueInputs(e, t) {
            let n = t.getAttribute("name"),
              i = e.getInput(n);
            if (!i) return console.warn("Unrecognised value input", n), !1;
            Array.from(t.children).forEach((t) => {
              let n = this.convertBlockNode(t, e);
              if (!n)
                return (
                  console.warn("Illegal child.", t.getAttribute("type")), !1
                );
              "shadow" === t.tagName.toLowerCase() && n.setShadow(!0),
                i.connection.connect(n.outputConnection);
            });
          }
          processStatementInputs(e, t, n) {
            let i =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : null,
              a = i || e;
            if (!a.getInput(t))
              return console.warn("Unrecognised statement input", t), !1;
            Array.from(n.children).forEach((e) => {
              let n = this.convertBlockNode(e, a);
              if (!n)
                return (
                  console.warn(
                    "Unrecognised child in statement",
                    e.getAttribute("type")
                  ),
                  !1
                );
              let i = a.getInput(t);
              i &&
                n.previousConnection &&
                i.connection.connect(n.previousConnection);
            });
          }
          getClosestLegalPreviousConnection(e) {
            if ((0, r.v)().procedureDefinitionBlocks.includes(e.type)) {
              if (0 === e.getBlocksInStatement("STACK").length) {
                let t = e.getInput("STACK"),
                  n = this.workspace.newBlock("useless_block");
                return (
                  t.connection.connect(n.previousConnection),
                  n.previousConnection
                );
              }
              return e.getInputTargetBlock("STACK").previousConnection;
            }
            let t = this.getFirstBlockInStack(e),
              n = this.isConnectedToProtectedStatementInput(t);
            for (; n; ) {
              let e = t.getParent();
              e &&
                ((t = e), (n = this.isConnectedToProtectedStatementInput(t)));
            }
            return t.previousConnection
              ? t.previousConnection
              : !!e.conversion_parent &&
                  this.getClosestLegalPreviousConnection(e.conversion_parent);
          }
          isConnectedToProtectedStatementInput(e) {
            let t = this.getFirstBlockInStack(e).previousConnection;
            if (t) {
              let e = t.targetConnection;
              if (e) {
                let t = e.sourceBlock_,
                  n = t.getInputWithConnection(e),
                  i = t.protected_statements || [];
                if (n && i.includes(n.name)) return !0;
              }
            }
            return !1;
          }
          constructor() {
            (this.blocks_pending_reconnect = {}),
              (this.workspace = this.createWorkspace()),
              (this.workspace_variables = {}),
              (this.has_market_block = !1),
              (this.exception_blocks = ["r_100"]);
          }
        }
        var f = n("85872"),
          b = n("1560");
        let y = {
            media: "assets/images/",
            zoom: {
              wheel: !0,
              startScale: (0, r.v)().workspaces.previewWorkspaceStartScale,
            },
            readOnly: !0,
            scrollbars: !0,
            renderer: "zelos",
          },
          v = (e) => {
            if (!window.Blockly) return;
            let { strategy_id: t, convertedDom: n, file_name: i, from: a } = e;
            window.Blockly.xmlValues = {
              ...window.Blockly.xmlValues,
              strategy_id: t,
              convertedDom: n,
              file_name: i,
              from: a,
            };
          },
          g = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : window.Blockly.derivWorkspace,
              t = e
                .getAllBlocks(!0)
                .find((e) => "trade_definition_tradetype" === e.type),
              n = null == t ? void 0 : t.getFieldValue("TRADETYPE_LIST"),
              i = "trade_definition_tradeoptions";
            return (
              "multiplier" === n && (i = "trade_definition_multiplier"),
              "accumulator" === n && (i = "trade_definition_accumulator"),
              i
            );
          },
          k = (e) => {
            let t = e.match(
              /translate\((-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)\)/
            );
            if (t && t.length > 2) {
              let e = parseFloat(t[1]);
              return { x: e, y: parseFloat(t[2]) };
            }
            return null;
          },
          w = () => {
            var e, t, n;
            let i = k(
              null === (n = window.Blockly) || void 0 === n
                ? void 0
                : null === (t = n.derivWorkspace) || void 0 === t
                ? void 0
                : null === (e = t.trashcan) || void 0 === e
                ? void 0
                : e.svgGroup.getAttribute("transform")
            );
            return (
              !i && u.P.emit("Error", "Invalid String"),
              { translate_X: i.x, translate_Y: i.y }
            );
          },
          T = () => {
            var e, t, n, i, a, o, s;
            let { translate_X: r, translate_Y: l } = w(),
              c =
                null === (e = window.Blockly.getSelected()) || void 0 === e
                  ? void 0
                  : e.getSvgRoot().getBoundingClientRect(),
              h = (null == c ? void 0 : c.left) || 0,
              p = (null == c ? void 0 : c.top) || 0,
              m = [g(), "trade_definition", "purchase", "before_purchase"];
            (null == m
              ? void 0
              : m.includes(
                  null === (n = window.Blockly) || void 0 === n
                    ? void 0
                    : null === (t = n.getSelected()) || void 0 === t
                    ? void 0
                    : t.type
                )) &&
              p >= l - 200 &&
              p <= l + 200 &&
              h >= r - 200 &&
              h <= r + 200 &&
              u.P.emit(
                "ui.log.error",
                null === d.T || void 0 === d.T
                  ? void 0
                  : null === (s = (0, d.T)()) || void 0 === s
                  ? void 0
                  : null ===
                      (i =
                        s[
                          null === (o = window.Blockly) || void 0 === o
                            ? void 0
                            : null === (a = o.getSelected()) || void 0 === a
                            ? void 0
                            : a.type
                        ]) || void 0 === i
                  ? void 0
                  : i.default
              );
          },
          C = () => {
            var e, t;
            if (!(null === f.Z || void 0 === f.Z ? void 0 : f.Z.instance))
              return;
            let { load_modal: n } = f.Z.instance,
              i =
                (null == n
                  ? void 0
                  : null === (t = n.dashboard_strategies) || void 0 === t
                  ? void 0
                  : null === (e = t[0]) || void 0 === e
                  ? void 0
                  : e.name) ?? (0, r.v)().default_file_name;
            if (document.title.indexOf("-") > -1) {
              let e = document.title.substr(document.title.indexOf("-")),
                t = document.title.replace(e, `- ${i}`);
              document.title = t;
            } else document.title += ` - ${i}`;
          },
          E = (e, t, n) => {
            let { clientX: i = 0, clientY: a = 0 } = t || {},
              o = n.getMetrics(),
              s = 1 / n.scale,
              r = o.absoluteLeft - o.viewLeft,
              l = document.body.offsetHeight - o.viewHeight - o.viewTop;
            n.cleanUp(i ? (i - r) * s : 0, a ? (a - l - 76) * s : 0, e);
          },
          N = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : "@deriv/bot",
              t =
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
              n = arguments.length > 2 ? arguments[2] : void 0;
            n.setAttribute("is_dbot", "true"),
              n.setAttribute("collection", t ? "true" : "false");
            let i = window.Blockly.Xml.domToPrettyText(n);
            (0, b.p)({
              data: i,
              type: "text/xml;charset=utf-8",
              filename: `${e}.xml`,
            });
          },
          x = (e) => new Promise((t) => setTimeout(t, e)),
          A = async (e) => {
            let t,
              {
                block_string: n,
                drop_event: o,
                file_name: r,
                strategy_id: d,
                from: p,
                workspace: m,
                showIncompatibleStrategyDialog: b,
              } = e;
            if (!(null === f.Z || void 0 === f.Z ? void 0 : f.Z.instance) || !m)
              return;
            let { setLoading: y, load_modal: g } = f.Z.instance,
              { setOpenButtonDisabled: k, setLoadedLocalFile: w } = g;
            y(!0), await x(100);
            let T = () => {
              w(null), (0, i.J)((0, a.xG)().invalid_xml), y(!1);
              let e = (0, s.NC)(
                "XML file contains unsupported elements. Please check or modify file."
              );
              return u.P.emit("ui.log.error", e), { error: e };
            };
            try {
              if (
                new DOMParser()
                  .parseFromString(n, "application/xml")
                  .getElementsByTagName("parsererror").length
              )
                return T();
            } catch (e) {
              return T();
            }
            try {
              t = window.Blockly.utils.xml.textToDom(n);
            } catch (e) {
              return T();
            }
            let C = (t = new _().convertStrategy(t, b)).querySelectorAll(
              "block"
            );
            if (
              !C.length ||
              Array.from(C).some((e) => {
                let t = e.getAttribute("type");
                return !Object.keys(window.Blockly.Blocks).includes(t);
              })
            )
              return T();
            try {
              let e =
                  t.hasAttribute("collection") &&
                  "true" === t.getAttribute("collection"),
                n = e
                  ? `load_collection${Date.now()}`
                  : `dbot-load${Date.now()}`;
              if (
                (window.Blockly.Events.setGroup(n),
                (0, h.kH)(
                  m,
                  Array.from(C).map((e) => e.getAttribute("type"))
                ),
                v({ strategy_id: d, convertedDom: t, file_name: r, from: p }),
                e)
              )
                S(t, o, n, m);
              else if (
                (await O(t, n, m), m === window.Blockly.derivWorkspace)
              ) {
                let { save_modal: e } = f.Z.instance;
                e.updateBotName(r),
                  m.clearUndo(),
                  (m.current_strategy_id =
                    d || window.Blockly.utils.idGenerator.genUid()),
                  await (0, c.l5)(t, p);
              }
              m.getAllBlocks().forEach((e) => {
                e.disabled && (e.is_user_disabled_state = !0);
              }),
                m === window.Blockly.derivWorkspace &&
                  u.P.emit("ui.log.success", { log_type: l.v9.LOAD_BLOCK });
            } catch (e) {
              return console.error(e), T();
            } finally {
              y(!1), k(!1);
            }
          },
          S = (e, t, n, i) => {
            window.Blockly.Events.setGroup(n);
            let a = window.Blockly.Xml.domToWorkspace(e, i).map((e) =>
              i.getBlockById(e)
            );
            t && 0 !== Object.keys(t).length ? E(a, t, i) : i.cleanUp();
          },
          O = async (e, t, n) => {
            window.Blockly.Events.setGroup(t),
              await n.asyncClear(),
              window.Blockly.Xml.clearWorkspaceAndLoadFromXml(e, n),
              n.cleanUp();
          },
          I = (e, t) =>
            new Promise((n, i) => {
              let a;
              try {
                a = window.Blockly.utils.xml.textToDom(e);
              } catch (e) {
                return i((0, s.NC)("Unrecognized file format"));
              }
              try {
                !(
                  a.hasAttribute("collection") &&
                  "true" === a.getAttribute("collection")
                ) &&
                  i((0, s.NC)("Remote blocks to load must be a collection.")),
                  R(a)
                    .then(() => {
                      Array.from(a.children).forEach((e) => L(e, t)), n();
                    })
                    .catch(() => {
                      i();
                    });
              } catch (e) {
                i((0, s.NC)("Unable to load the block file."));
              }
            }),
          D = (e) =>
            new Promise((t, n) => {
              let i = e.getFieldValue("URL");
              -1 === i.indexOf("http") && (i = `http://${i}`);
              let a = "/" === i.slice(-1)[0];
              if (!i.match(/[^/]*\.[a-zA-Z]{3}$/) && !a)
                return n((0, s.NC)("Target must be an XML file"));
              if ((a && (i += "index.xml"), e.isKnownUrl(i)))
                return (
                  e.setDisabled(!0), n((0, s.NC)("This URL is already loaded"))
                );
              let o = () =>
                n((0, s.NC)("An error occured while trying to load the URL"));
              fetch(i)
                .then((n) => {
                  n.ok
                    ? n.text().then((n) => {
                        I(n, e)
                          .then(() => t(e))
                          .catch(o);
                      })
                    : o();
                })
                .catch(o);
            }),
          R = (e) =>
            new Promise((t, n) => {
              let i = [];
              Array.from(e.children).forEach((e) => {
                if ("loader" === e.getAttribute("type")) {
                  e.remove();
                  let t = window.Blockly.Xml.domToBlock(
                    e,
                    window.Blockly.derivWorkspace
                  );
                  i.push(D(t));
                }
              }),
                i.length ? Promise.all(i).then(t, n) : t([]);
            }),
          L = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : null;
            if ("variables" === e.tagName.toLowerCase())
              return window.Blockly.Xml.domToVariables(
                e,
                window.Blockly.derivWorkspace
              );
            let n = e.getAttribute("type"),
              i = new _(),
              a = window.Blockly.Xml.blockToDom(i.convertBlockNode(e));
            Array.from(a.getElementsByTagName("arg")).forEach((e) => {
              e.hasAttribute("varid") &&
                e.setAttribute("varId", e.getAttribute("varid"));
            }),
              (0, h.kH)(window.Blockly.derivWorkspace, n);
            let o = window.Blockly.Xml.domToBlock(
              a,
              window.Blockly.derivWorkspace
            );
            return t && t.blocks_added_by_me.push(o), o;
          },
          P = (e, t) =>
            e.getAllBlocks().filter((e) => {
              if (t.includes(e.type))
                return (
                  (0 === e.childBlocks_.length && t.includes(e.category_)) ||
                  null === e.parentBlock_
                );
            }),
          B = (e, t) =>
            t.filter((t) => !e.getAllBlocks().some((e) => e.type === t)),
          U = (e) =>
            e.filter((e) => {
              let t =
                e.childBlocks_ && e.childBlocks_.some((e) => !0 === e.disabled);
              return !0 === e.disabled || t;
            }),
          M = (e, t) =>
            e.forEach((e) => {
              var n, i, a, o, s, r;
              if ("misplaced" === t && e)
                u.P.emit(
                  "ui.log.error",
                  null === d.T || void 0 === d.T
                    ? void 0
                    : null === (i = (0, d.T)()) || void 0 === i
                    ? void 0
                    : null === (n = i[null == e ? void 0 : e.type]) ||
                      void 0 === n
                    ? void 0
                    : n[t]
                );
              else if ("missing" === t && e)
                u.P.emit(
                  "ui.log.error",
                  null === d.T || void 0 === d.T
                    ? void 0
                    : null === (o = (0, d.T)()) || void 0 === o
                    ? void 0
                    : null === (a = o[e]) || void 0 === a
                    ? void 0
                    : a[t]
                );
              else if ("disabled" === t && e) {
                let n = !1,
                  i =
                    null === d.T || void 0 === d.T
                      ? void 0
                      : null === (r = (0, d.T)()) || void 0 === r
                      ? void 0
                      : null === (s = r[e.type]) || void 0 === s
                      ? void 0
                      : s[t];
                e.disabled && i
                  ? (u.P.emit("ui.log.error", i), (n = !0))
                  : !n &&
                    e.childBlocks_ &&
                    e.childBlocks_.forEach((e) => {
                      var n, i;
                      let a =
                        null === d.T || void 0 === d.T
                          ? void 0
                          : null === (i = (0, d.T)()) || void 0 === i
                          ? void 0
                          : null === (n = i[e.type]) || void 0 === n
                          ? void 0
                          : n[t];
                      a && u.P.emit("ui.log.error", a);
                    });
              }
            }),
          j = (e) => {
            if (!e) return !1;
            let t = g(e),
              { mandatoryMainBlocks: n } = (0, r.v)(),
              i = [t, ...n],
              a = P(e, i),
              o = B(e, i),
              s = U(a);
            return (
              o && M(o, "missing"),
              s && M(s, "disabled"),
              0 == [...o, ...s].length
            );
          },
          F = (e, t, n, i) => {
            var a, o, s, r, l, d, c, u, h;
            let p = e.getMetrics(),
              m = p.viewLeft - p.scrollLeft,
              _ = p.viewTop - p.scrollTop,
              b = _;
            if (
              (n
                ? ((m += i ? t : -t), !f.Z.instance.is_mobile && (b += -20))
                : ((m += -20), (b += i ? t : -t)),
              e.RTL)
            ) {
              m = t;
              let n =
                null === (s = document.getElementById("gtm-toolbox")) ||
                void 0 === s
                  ? void 0
                  : null === (o = s.getBoundingClientRect()) || void 0 === o
                  ? void 0
                  : o.top;
              if (
                ((null === (l = e.svgBlockCanvas_) || void 0 === l
                  ? void 0
                  : null === (r = l.getBoundingClientRect()) || void 0 === r
                  ? void 0
                  : r.top) > n && (b = _),
                window.innerWidth < 768)
              ) {
                null == e ||
                  null === (d = e.scrollbar) ||
                  void 0 === d ||
                  d.set(0, b);
                let t =
                  (null === (c = e.svgBlockCanvas_) || void 0 === c
                    ? void 0
                    : c.getBoundingClientRect().width) -
                  (null === (u = e.svgBlockCanvas_) || void 0 === u
                    ? void 0
                    : u.getBoundingClientRect().left) +
                  60;
                null == e ||
                  null === (h = e.scrollbar) ||
                  void 0 === h ||
                  h.set(t, b);
                return;
              }
            }
            null == e ||
              null === (a = e.scrollbar) ||
              void 0 === a ||
              a.set(m, b);
          },
          V = (e, t, n) => {
            let i = (e && window.Blockly.Events.getGroup()) || n || !0;
            window.Blockly.Events.setGroup(i),
              t(),
              !e && window.Blockly.Events.setGroup(!1);
          },
          G = (e) => {
            let { recordUndo: t } = window.Blockly.Events;
            window.Blockly.Events.setRecordUndo(!1),
              e(),
              window.Blockly.Events.setRecordUndo(t ?? !0);
          },
          Y = (e) => {
            window.Blockly.Events.disable(),
              e(),
              window.Blockly.Events.enable();
          },
          X = (e, t) => {
            t.type === window.Blockly.Events.BLOCK_DRAG &&
              !t.isStart &&
              e.getAllBlocks().forEach((e) => {
                if (!e.getParent() || e.is_user_disabled_state) return;
                let n = e.restricted_parents || [];
                if (0 === n.length) return;
                let i = !n.some((t) => e.isDescendantOf(t));
                V(
                  !0,
                  () => {
                    e.setDisabled(i);
                  },
                  t.group
                ),
                  window.Blockly.Events.setGroup(!1);
              });
          },
          W = (e) => !e || "''" === e,
          H = () => {
            var e, t;
            let n =
                null === (t = window.Blockly) || void 0 === t
                  ? void 0
                  : null === (e = t.getSelected()) || void 0 === e
                  ? void 0
                  : e.svgGroup_,
              i = window.Blockly.Xml.domToPrettyText(n);
            (0, b.p)({
              data: i,
              type: "text/xml;charset=utf-8",
              filename: "block.xml",
            });
          },
          $ = () => ({
            text: (0, s.NC)("Download Block"),
            enabled: !0,
            callback: H,
          }),
          K = (e, t) => {
            for (let n = 0; n <= e.length - 1; n++) {
              let i = (0, s.NC)(e[n].text);
              t.includes(i) ? e.splice(n, 1) : (e[n].text = i);
            }
          },
          q = () => [
            (0, s.NC)("Duplicate"),
            (0, s.NC)("Add Comment"),
            (0, s.NC)("Remove Comment"),
            (0, s.NC)("Collapse Block"),
            (0, s.NC)("Expand Block"),
            (0, s.NC)("Disable Block"),
            (0, s.NC)("Enable Block"),
            (0, s.NC)("Download Block"),
          ],
          z = () => (0, s.NC)("Delete Block"),
          J = () => (0, s.NC)("Delete All Blocks"),
          Z = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : [];
            [$(), ...t].forEach((t) => {
              e.push({
                text: t.text,
                enabled: t.enabled,
                callback: t.callback,
              });
            });
            for (let t = 0; t < e.length; t++) {
              var n, i;
              let a =
                null === (i = e[t]) || void 0 === i
                  ? void 0
                  : null === (n = i.text) || void 0 === n
                  ? void 0
                  : n.toLowerCase();
              if (null == a ? void 0 : a.includes("delete"))
                a.includes("block") && !a.includes("blocks")
                  ? (e[t].text = z())
                  : (e[t].text = J());
              else {
                let n = (0, s.NC)(e[t].text);
                q().includes(n) && (e[t].text = n);
              }
            }
          },
          Q = (e) => {
            if (!e) return "invalid_input";
            try {
              let t = Function(`return ${e.trim()}`)();
              return isNaN(t) ? "invalid_input" : t;
            } catch (e) {
              return "invalid_input";
            }
          },
          ee = (e) => {
            try {
              var t, n;
              if (
                !(null == e ? void 0 : e.collapsed_) ||
                (null == e ? void 0 : e.getField(e.type))
              )
                return;
              let [i, a] =
                  (null == e
                    ? void 0
                    : null === (n = e.inputList) || void 0 === n
                    ? void 0
                    : null === (t = n[0]) || void 0 === t
                    ? void 0
                    : t.fieldRow.map((e) => e.value_)) || [],
                o =
                  null == e
                    ? void 0
                    : e.getField(Blockly.constants.COLLAPSED_FIELD_NAME),
                r =
                  null == e
                    ? void 0
                    : e.getInput(Blockly.constants.COLLAPSED_INPUT_NAME);
              if (r && o) {
                r.appendField(new Blockly.FieldImage(i, 25, 25, "", "")),
                  r.appendField(
                    new Blockly.FieldLabel(
                      a,
                      "blocklyTextRootBlockHeaderCollapsed"
                    )
                  );
                let t = `${
                    null == e ? void 0 : e.workspace.options.pathToMedia
                  }dropdown-arrow.svg`,
                  n = new Blockly.FieldImage(
                    t,
                    16,
                    16,
                    (0, s.NC)("Collapsed"),
                    () => (null == e ? void 0 : e.setCollapsed(!1))
                  );
                r.appendField(n, e.type),
                  (r.sourceBlock.width = 300),
                  o.setVisible(!1);
              }
            } catch (e) {
              u.P.emit("ui.log.error", e);
            }
          },
          et = (e) => {
            let t = e.getInput("_TEMP_COLLAPSED_INPUT");
            if (t && e.collapsed_ && !t.icon_added) {
              var n;
              t.icon_added = !0;
              let i = `${e.workspace.options.pathToMedia}dropdown-arrow.svg`,
                a = new Blockly.FieldImage(
                  i,
                  16,
                  16,
                  (0, s.NC)("Collapsed"),
                  () => e.setCollapsed(!1)
                ),
                o = e.getFieldValue("NAME"),
                r = ` (${
                  null == e
                    ? void 0
                    : null === (n = e.arguments) || void 0 === n
                    ? void 0
                    : n.join(", ")
                })`;
              t.appendField(new Blockly.FieldLabel((0, s.NC)("function"), ""))
                .appendField(new Blockly.FieldLabel(o + r, "header__title"))
                .appendField(a);
              ((e) => {
                var t, n;
                let i = e.fieldRow;
                null === (t = i[0]) || void 0 === t || t.setVisible(!1),
                  null === (n = i[0]) || void 0 === n || n.forceRerender();
              })(t);
            }
          },
          en = (e) => {
            let t = e.getField("CURRENCY_LIST"),
              { currency: n } = f.Z.instance.client;
            null == t || t.setValue((0, o.O$T)(n));
          };
      },
      87911: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return l;
          },
        });
        var i = n(27412),
          a = n(48059),
          o = n(47962),
          s = n(29265),
          r = n(79907);
        class l {
          async retrieveActiveSymbols() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            return (await this.trading_times.initialise(),
            !e && this.is_initialised)
              ? (await this.init_promise, this.active_symbols)
              : ((this.is_initialised = !0),
                r.DO.has_active_symbols || (await r.DO.active_symbols_promise),
                (this.active_symbols =
                  (null === r.DO || void 0 === r.DO
                    ? void 0
                    : r.DO.active_symbols) ?? []),
                (this.processed_symbols = this.processActiveSymbols()),
                (this.trading_times.onMarketOpenCloseChanged = (e) => {
                  Object.keys(e).forEach((t) => {
                    let n = this.active_symbols[t];
                    n && (n.exchange_is_open = e[t]);
                  }),
                    (this.changes = e),
                    this.processActiveSymbols();
                }),
                this.init_promise.resolve(),
                this.active_symbols);
          }
          processActiveSymbols() {
            return this.active_symbols.reduce((e, t) => {
              if (
                (0, o.v)().DISABLED_SYMBOLS.includes(t.symbol) ||
                (0, o.v)().DISABLED_SUBMARKETS.includes(t.submarket)
              )
                return e;
              let n = (e, n) =>
                -1 !== Object.keys(e).findIndex((e) => e === t[n]);
              !n(e, "market") &&
                (e[t.market] = {
                  display_name: t.market_display_name,
                  submarkets: {},
                });
              let { submarkets: i } = e[t.market];
              !n(i, "submarket") &&
                (i[t.submarket] = {
                  display_name: t.submarket_display_name,
                  symbols: {},
                });
              let { symbols: a } = i[t.submarket];
              return (
                !n(a, "symbol") &&
                  (a[t.symbol] = {
                    display_name: t.display_name,
                    pip_size: `${t.pip}`.length - 2,
                    is_active: !t.is_trading_suspended && t.exchange_is_open,
                  }),
                e
              );
            }, {});
          }
          getAllSymbols() {
            let e =
                arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
              t = [];
            return (
              Object.keys(this.processed_symbols).forEach((n) => {
                if (e && this.isMarketClosed(n)) return;
                let i = this.processed_symbols[n],
                  { submarkets: a } = i;
                Object.keys(a).forEach((e) => {
                  let o = a[e],
                    { symbols: s } = o;
                  Object.keys(s).forEach((a) => {
                    let r = s[a];
                    t.push({
                      market: n,
                      market_display: i.display_name,
                      submarket: e,
                      submarket_display: o.display_name,
                      symbol: a,
                      symbol_display: r.display_name,
                    });
                  });
                });
              }),
              this.getSymbolsForBot(),
              t
            );
          }
          getSymbolsForBot() {
            let { DISABLED: e } = (0, o.v)().QUICK_STRATEGY,
              t = [];
            return (
              Object.keys(this.processed_symbols).forEach((n) => {
                if (this.isMarketClosed(n)) return;
                let { submarkets: i } = this.processed_symbols[n];
                Object.keys(i).forEach((n) => {
                  if (e.SUBMARKETS.includes(n)) return;
                  let a = i[n],
                    { symbols: o } = a;
                  Object.keys(o).forEach((n) => {
                    if (e.SYMBOLS.includes(n)) return;
                    let i = o[n];
                    t.push({
                      group: a.display_name,
                      text: i.display_name,
                      value: n,
                    });
                  });
                });
              }),
              t
            );
          }
          getMarketDropdownOptions() {
            let e = [];
            if (
              (Object.keys(this.processed_symbols).forEach((t) => {
                let { display_name: n } = this.processed_symbols[t],
                  i =
                    n +
                    (this.isMarketClosed(t) ? ` ${(0, a.NC)("(Closed)")}` : "");
                e.push([i, t]);
              }),
              0 === e.length)
            )
              return (0, o.v)().NOT_AVAILABLE_DROPDOWN_OPTIONS;
            if (
              (e.sort((e) => ("synthetic_index" === e[1] ? -1 : 1)),
              e.some((e) => this.isMarketClosed(e[1])))
            ) {
              let t = this.sortDropdownOptions(e, this.isMarketClosed);
              return this.isMarketClosed("forex")
                ? t.sort((e) => ("synthetic_index" === e[1] ? -1 : 1))
                : t;
            }
            return e;
          }
          getSubmarketDropdownOptions(e) {
            let t = [],
              n = this.processed_symbols[e];
            if (n) {
              let { submarkets: e } = n;
              Object.keys(e).forEach((n) => {
                let { display_name: i } = e[n],
                  o =
                    i +
                    (this.isSubmarketClosed(n)
                      ? ` ${(0, a.NC)("(Closed)")}`
                      : "");
                t.push([o, n]);
              });
            }
            return 0 === t.length
              ? (0, o.v)().NOT_AVAILABLE_DROPDOWN_OPTIONS
              : ("synthetic_index" === e &&
                  t.sort((e) => ("random_index" === e[1] ? -1 : 1)),
                this.sortDropdownOptions(t, this.isSubmarketClosed));
          }
          getSymbolDropdownOptions(e) {
            let t = Object.keys(this.processed_symbols).reduce((t, n) => {
              let { submarkets: i } = this.processed_symbols[n];
              return (
                Object.keys(i).forEach((n) => {
                  if (n === e) {
                    let { symbols: e } = i[n];
                    Object.keys(e).forEach((n) => {
                      let { display_name: i } = e[n],
                        o =
                          i +
                          (this.isSymbolClosed(n)
                            ? ` ${(0, a.NC)("(Closed)")}`
                            : "");
                      t.push([o, n]);
                    });
                  }
                }),
                t
              );
            }, []);
            return 0 === t.length
              ? (0, o.v)().NOT_AVAILABLE_DROPDOWN_OPTIONS
              : this.sortDropdownOptions(t, this.isSymbolClosed);
          }
          isMarketClosed(e) {
            let t = this.processed_symbols[e];
            return (
              !t ||
              Object.keys(t.submarkets).every((e) => this.isSubmarketClosed(e))
            );
          }
          isSubmarketClosed(e) {
            let t = Object.keys(this.processed_symbols).find((t) =>
              Object.keys(this.processed_symbols[t].submarkets).includes(e)
            );
            if (!t) return !0;
            let n = this.processed_symbols[t].submarkets[e];
            if (!n) return !0;
            let { symbols: i } = n;
            return Object.keys(i).every((e) => this.isSymbolClosed(e));
          }
          isSymbolClosed(e) {
            return this.active_symbols.some(
              (t) =>
                t.symbol === e &&
                (!t.exchange_is_open || t.is_trading_suspended)
            );
          }
          constructor(e) {
            (0, i._)(this, "sortDropdownOptions", (e, t) => {
              let n = [...e];
              return (
                n.sort((e, n) => {
                  let i = t.call(this, e[1]),
                    a = t.call(this, n[1]);
                  return i && !a ? 1 : i === a ? 0 : -1;
                }),
                n
              );
            }),
              (this.active_symbols = []),
              (this.disabled_symbols = (0, o.v)().DISABLED_SYMBOLS),
              (this.disabled_submarkets = (0, o.v)().DISABLED_SUBMARKETS),
              (this.init_promise = new s.Z()),
              (this.is_initialised = !1),
              (this.processed_symbols = {}),
              (this.trading_times = e);
          }
        }
      },
      79907: function (e, t, n) {
        "use strict";
        n.d(t, {
          DO: function () {
            return u;
          },
          hL: function () {
            return h;
          },
        });
        var i = n(27412),
          a = n(65464),
          o = n(39338),
          s = n(89064),
          r = n(13604),
          l = n(87383),
          d = n(49243);
        class c {
          onsocketopen() {
            (0, s.bl)(s.cR.OPENED);
          }
          onsocketclose() {
            (0, s.bl)(s.cR.CLOSED), this.reconnectIfNotConnected();
          }
          async init() {
            var e, t, n, i;
            let a =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            this.toggleRunButton(!0),
              this.api && this.unsubscribeAllSubscriptions(),
              (!this.api ||
                (null === (e = this.api) || void 0 === e
                  ? void 0
                  : e.connection.readyState) !== 1 ||
                a) &&
                ((null === (t = this.api) || void 0 === t
                  ? void 0
                  : t.connection) &&
                  (r.Z.disposeInstance(),
                  (0, s.bl)(s.cR.CLOSED),
                  this.api.disconnect(),
                  this.api.connection.removeEventListener(
                    "open",
                    this.onsocketopen.bind(this)
                  ),
                  this.api.connection.removeEventListener(
                    "close",
                    this.onsocketclose.bind(this)
                  )),
                (this.api = (0, l.wL)()),
                null === (n = this.api) ||
                  void 0 === n ||
                  n.connection.addEventListener(
                    "open",
                    this.onsocketopen.bind(this)
                  ),
                null === (i = this.api) ||
                  void 0 === i ||
                  i.connection.addEventListener(
                    "close",
                    this.onsocketclose.bind(this)
                  )),
              !this.has_active_symbols &&
                (this.active_symbols_promise = this.getActiveSymbols()),
              this.initEventListeners(),
              this.time_interval && clearInterval(this.time_interval),
              (this.time_interval = null),
              (0, l.PO)() &&
                ((0, s.UM)(!0), await this.authorizeAndSubscribe()),
              d.Z.init(a);
          }
          async customInit() {
            var e, t, n, i;
            let a =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            this.api && this.unsubscribeAllSubscriptions(),
              (!this.api ||
                (null === (e = this.api) || void 0 === e
                  ? void 0
                  : e.connection.readyState) !== 1 ||
                a) &&
                ((null === (t = this.api) || void 0 === t
                  ? void 0
                  : t.connection) &&
                  (r.Z.disposeInstance(),
                  (0, s.bl)(s.cR.CLOSED),
                  this.api.disconnect(),
                  this.api.connection.removeEventListener(
                    "open",
                    this.onsocketopen.bind(this)
                  ),
                  this.api.connection.removeEventListener(
                    "close",
                    this.onsocketclose.bind(this)
                  )),
                (this.api = (0, l.wL)()),
                null === (n = this.api) ||
                  void 0 === n ||
                  n.connection.addEventListener(
                    "open",
                    this.onsocketopen.bind(this)
                  ),
                null === (i = this.api) ||
                  void 0 === i ||
                  i.connection.addEventListener(
                    "close",
                    this.onsocketclose.bind(this)
                  )),
              this.initEventListeners(),
              this.getTime(),
              this.time_interval && clearInterval(this.time_interval),
              (this.time_interval = null);
          }
          getTime() {
            this.api &&
              (this.time_interval2 = setInterval(() => {
                this.api.send({ time: 1 });
              }, 15e3));
          }
          getConnectionStatus() {
            var e;
            if (
              null === (e = this.api) || void 0 === e ? void 0 : e.connection
            ) {
              let e = this.api.connection.readyState;
              return o.Px[e] || "Unknown";
            }
            return "Socket not initialized";
          }
          terminate() {
            this.api && this.api.disconnect();
          }
          initEventListeners() {
            window &&
              (window.addEventListener("online", this.reconnectIfNotConnected),
              window.addEventListener("focus", this.reconnectIfNotConnected));
          }
          async createNewInstance(e) {
            this.account_id !== e && (await this.init());
          }
          async authorizeAndSubscribe() {
            let e = (0, l.PO)();
            if (e) {
              if (
                ((this.token = e),
                (this.account_id = (0, l.Bc)() ?? ""),
                !this.api)
              )
                return;
              try {
                let { authorize: e, error: t } = await this.api.authorize(
                  this.token
                );
                if (t) return t;
                this.has_active_symbols
                  ? this.toggleRunButton(!1)
                  : (this.active_symbols_promise = this.getActiveSymbols()),
                  (this.account_info = e),
                  (0, s.Ii)(e.account_list),
                  (0, s.A3)(e),
                  (0, s.Zc)(!0),
                  (this.is_authorized = !0),
                  this.subscribe(),
                  this.getSelfExclusion();
              } catch (e) {
                (this.is_authorized = !1), (0, s.Zc)(!1), a.P.emit("Error", e);
              } finally {
                (0, s.UM)(!1);
              }
            }
          }
          async authorize_3(e) {
            await this.api.authorize(e);
            let { authorize: t, error: n } = await this.api.expectResponse(
              "authorize"
            );
            return { authorize: t, error: n };
          }
          async getSelfExclusion() {
            this.api &&
              this.is_authorized &&
              (await this.api.getSelfExclusion());
          }
          async subscribe() {
            await Promise.all(
              ["balance", "transaction", "proposal_open_contract"].map((e) =>
                (0, o.l6)(
                  () => {
                    var t;
                    let n =
                      null === (t = this.api) || void 0 === t
                        ? void 0
                        : t.send({
                            [e]: 1,
                            subscribe: 1,
                            ...("balance" === e ? { account: "all" } : {}),
                          });
                    return n && this.current_auth_subscriptions.push(n), n;
                  },
                  [],
                  this
                )
              )
            );
          }
          setIsRunning() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            this.is_running = e;
          }
          pushSubscription(e) {
            this.subscriptions.push(e);
          }
          clearSubscriptions() {
            this.subscriptions.forEach((e) => e.unsubscribe()),
              (this.subscriptions = []),
              (a.P.getState("global_timeouts") ?? []).forEach((e, t) => {
                clearTimeout(t);
              });
          }
          constructor() {
            (0, i._)(this, "api", null),
              (0, i._)(this, "token", ""),
              (0, i._)(this, "account_id", ""),
              (0, i._)(this, "pip_sizes", {}),
              (0, i._)(this, "account_info", {}),
              (0, i._)(this, "is_running", !1),
              (0, i._)(this, "subscriptions", []),
              (0, i._)(this, "time_interval", null),
              (0, i._)(this, "time_interval2", null),
              (0, i._)(this, "has_active_symbols", !1),
              (0, i._)(this, "is_stopping", !1),
              (0, i._)(this, "active_symbols", []),
              (0, i._)(this, "current_auth_subscriptions", []),
              (0, i._)(this, "is_authorized", !1),
              (0, i._)(this, "active_symbols_promise", null),
              (0, i._)(this, "common_store", void 0),
              (0, i._)(this, "landing_company", null),
              (0, i._)(this, "unsubscribeAllSubscriptions", () => {
                var e;
                null === (e = this.current_auth_subscriptions) ||
                  void 0 === e ||
                  e.forEach((e) => {
                    e.then((e) => {
                      let { subscription: t } = e;
                      if (null == t ? void 0 : t.id) {
                        var n;
                        null === (n = this.api) ||
                          void 0 === n ||
                          n.send({ forget: t.id });
                      }
                    });
                  }),
                  (this.current_auth_subscriptions = []);
              }),
              (0, i._)(this, "reconnectIfNotConnected", () => {
                var e, t, n, i, a, o;
                console.log(
                  "connection state: ",
                  null === (t = this.api) || void 0 === t
                    ? void 0
                    : null === (e = t.connection) || void 0 === e
                    ? void 0
                    : e.readyState
                ),
                  (null === (i = this.api) || void 0 === i
                    ? void 0
                    : null === (n = i.connection) || void 0 === n
                    ? void 0
                    : n.readyState) &&
                    (null === (o = this.api) || void 0 === o
                      ? void 0
                      : null === (a = o.connection) || void 0 === a
                      ? void 0
                      : a.readyState) > 1 &&
                    (console.log(
                      "Info: Connection to the server was closed, trying to reconnect."
                    ),
                    this.init(!0));
              }),
              (0, i._)(this, "getActiveSymbols", async () => {
                await (0, o.l6)(
                  () => {
                    var e;
                    return null === (e = this.api) || void 0 === e
                      ? void 0
                      : e.send({ active_symbols: "brief" });
                  },
                  [],
                  this
                ).then((e) => {
                  let { active_symbols: t = [], error: n = {} } = e,
                    i = {};
                  return (
                    t.length && (this.has_active_symbols = !0),
                    t.forEach((e) => {
                      let { symbol: t, pip: n } = e;
                      i[t] = +(+n).toExponential().substring(3);
                    }),
                    (this.pip_sizes = i),
                    this.toggleRunButton(!1),
                    (this.active_symbols = t),
                    t || n
                  );
                });
              }),
              (0, i._)(this, "toggleRunButton", (e) => {
                let t = document.querySelector("#db-animation__run-button");
                t && (t.disabled = e);
              });
          }
        }
        let u = new c();
        new c();
        let h = new c();
        new c();
      },
      13604: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => d });
        var i = n("27412");
        class a {
          getStakePayoutLimits() {
            let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : "AUD",
              t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : "svg",
              n = arguments.length > 2 ? arguments[2] : void 0;
            return this.ws.send({ landing_company_details: t }).then((t) => {
              var i;
              let a =
                null == t
                  ? void 0
                  : null === (i = t.landing_company_details) || void 0 === i
                  ? void 0
                  : i.currency_config[n];
              return a ? a[e] : {};
            });
          }
          constructor(e) {
            this.ws = e.ws;
          }
        }
        var o = n("87911"),
          s = n("48867"),
          r = n("30231");
        class l {
          static disposeInstance() {
            this.singleton = null;
          }
          static setInstance(e) {
            return (
              !this.singleton && (this.singleton = new l(e)), this.instance
            );
          }
          static get instance() {
            return this.singleton;
          }
          constructor(e) {
            (this.trading_times = new r.Z(e)),
              (this.contracts_for = new s.Z(e)),
              (this.active_symbols = new o.Z(this.trading_times)),
              (this.account_limits = new a(e));
          }
        }
        (0, i._)(l, "singleton", null);
        let d = l;
      },
      87383: function (e, t, n) {
        "use strict";
        n.d(t, {
          Ke: () => h,
          LP: () => _,
          wl: () => f,
          Bc: () => m,
          PO: () => p,
          wL: () => u,
        });
        var i = n("66175"),
          a = n("33304"),
          o = n("66000"),
          s = n.n(o),
          r = n("48059"),
          l = n("27412");
        let d = [
            "active_symbols",
            "authorize",
            "balance",
            "buy",
            "proposal",
            "proposal_open_contract",
            "transaction",
            "ticks_history",
            "history",
          ],
          c = class e {
            constructor(e) {
              (0, l._)(this, "getRequestType", (e) => {
                let t;
                return (
                  d.forEach((n) => {
                    n in e && !t && (t = n);
                  }),
                  t
                );
              }),
                (0, l._)(this, "defineMeasure", (e) => {
                  if (e) {
                    let t;
                    return (
                      "history" === e
                        ? (performance.mark("ticks_history_end"),
                          (t = performance.measure(
                            "ticks_history",
                            "ticks_history_start",
                            "ticks_history_end"
                          )))
                        : (performance.mark(`${e}_end`),
                          (t = performance.measure(
                            `${e}`,
                            `${e}_start`,
                            `${e}_end`
                          ))),
                      (t.startTimeDate = new Date(Date.now() - t.startTime))
                    );
                  }
                  return !1;
                }),
                (0, l._)(this, "sendIsCalled", (e) => {
                  let {
                      response_promise: t,
                      args: [n],
                    } = e,
                    i = this.getRequestType(n);
                  return (
                    i && performance.mark(`${i}_start`),
                    t
                      .then((e) => {
                        let t = this.getRequestType(e);
                        t && this.defineMeasure(t);
                      })
                      .catch(() => {}),
                    t
                  );
                }),
                (this.config = e),
                (this.debounced_calls = {});
            }
          },
          u = () => {
            var e, t;
            let n = (0, i.wmM)().replace(/[^a-zA-Z0-9.]/g, ""),
              o =
                (null === (t = (0, i.rhL)()) || void 0 === t
                  ? void 0
                  : null === (e = t.replace) || void 0 === e
                  ? void 0
                  : e.call(t, /[^a-zA-Z0-9]/g, "")) ?? (0, i.rhL)(),
              l = new WebSocket(
                `wss://${n}/websockets/v3?app_id=${o}&l=${(0,
                r.Jb)()}&brand=${a.F0.toLowerCase()}`
              );
            return new (s())({ connection: l, middleware: new c({}) });
          },
          h = () => {
            let e = localStorage.getItem("active_loginid");
            return e && "null" !== e ? e : null;
          },
          p = () => {
            let e = localStorage.getItem("authToken");
            return e && "null" !== e ? e : null;
          },
          m = () => {
            let e = p();
            if (!e) return null;
            let t = JSON.parse(localStorage.getItem("accountsList"));
            return t && "null" !== t
              ? Object.keys(t).find((n) => t[n] === e)
              : null;
          },
          _ = () => {
            let e = h(),
              t = JSON.parse(localStorage.getItem("accountsList")) ?? void 0;
            return {
              token: ((t && t[e]) || {}) ?? void 0,
              account_id: e ?? void 0,
            };
          },
          f = () => {
            let e = JSON.parse(localStorage.getItem("accountsList")) ?? {},
              t = Object.keys(e).find((e) => e.includes("CR"));
            return {
              token: (t ? e[t] : {}) ?? void 0,
              account_id: t ?? void 0,
            };
          };
      },
      49243: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return o;
          },
        });
        var i = n(27412),
          a = n(87383);
        let o = new (class e {
          onsocketclose() {
            this.reconnectIfNotConnected();
          }
          getTime() {
            !this.time_interval &&
              (this.time_interval = setInterval(() => {
                this.api.send({ time: 1 });
              }, 3e4));
          }
          constructor() {
            var e = this;
            (0, i._)(this, "api", void 0),
              (0, i._)(this, "init", async function () {
                let t =
                  arguments.length > 0 &&
                  void 0 !== arguments[0] &&
                  arguments[0];
                if (!e.api || t) {
                  var n, i;
                  (null === (n = e.api) || void 0 === n
                    ? void 0
                    : n.connection) &&
                    (e.api.disconnect(),
                    e.api.connection.removeEventListener(
                      "close",
                      e.onsocketclose.bind(e)
                    )),
                    (e.api = await (0, a.wL)()),
                    null === (i = e.api) ||
                      void 0 === i ||
                      i.connection.addEventListener(
                        "close",
                        e.onsocketclose.bind(e)
                      );
                }
                (0, a.Ke)() && (await e.api.authorize((0, a.LP)().token)),
                  e.getTime();
              }),
              (0, i._)(this, "reconnectIfNotConnected", () => {
                var e, t, n, i, a, o;
                console.log(
                  "chart connection state: ",
                  null === (t = this.api) || void 0 === t
                    ? void 0
                    : null === (e = t.connection) || void 0 === e
                    ? void 0
                    : e.readyState
                ),
                  (null === (i = this.api) || void 0 === i
                    ? void 0
                    : null === (n = i.connection) || void 0 === n
                    ? void 0
                    : n.readyState) &&
                    (null === (o = this.api) || void 0 === o
                      ? void 0
                      : null === (a = o.connection) || void 0 === a
                      ? void 0
                      : a.readyState) > 1 &&
                    (console.log(
                      "Info: Chart connection to the server was closed, trying to reconnect."
                    ),
                    this.init(!0));
              });
          }
        })();
      },
      48867: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return r;
          },
        });
        var i = n(27412),
          a = n(47962),
          o = n(29265),
          s = n(79907);
        class r {
          async getBarriers(e, t, n, i) {
            let o = { values: [] };
            if (!(0, a.v)().BARRIER_TRADE_TYPES.includes(t)) return o;
            let s = ["high_barrier", "low_barrier"],
              r = await this.getContractsByTradeType(e, t),
              l = await this.getDurations(e, t, !1),
              d = /^[-|+]([0-9]+.[0-9]+)$/,
              c = (e) => e && d.test(e.toString()),
              u = !0;
            return (
              r.length > 0 &&
                (i.forEach((e, h) => {
                  let p = ["+", "-"].includes(e),
                    m = this.getContractCategoryByTradeType(t),
                    _ = r.find((e) => {
                      let { BARRIER_CATEGORIES: i } = (0, a.v)(),
                        o = Object.keys(i).find((e) => i[e].includes(t)),
                        r = e.contract_category === m,
                        d = -1 !== l.findIndex((e) => e.unit === n),
                        u = e.barrier_category === o,
                        _ =
                          (p && c(e.barrier || e[s[h]])) ||
                          (!p && !c(e.barrier || e[s[h]]));
                      return r && d && u && _;
                    });
                  if (
                    (!_ &&
                      (_ = r
                        .filter((e) => e.barrier || e.high_barrier)
                        .sort((e, t) => {
                          let n = e.barrier || e.high_barrier,
                            i = t.barrier || t.high_barrier;
                          return parseFloat(n) - parseFloat(i);
                        })
                        .shift()) &&
                      !p &&
                      (u = !1),
                    _)
                  ) {
                    let t = 1 === _.barriers ? "barrier" : s[h];
                    if (_[t]) {
                      let e = `${_[t]}`.match(d);
                      o.values[h] = e ? e[1] : _[t];
                    }
                    Object.assign(o, {
                      allow_both_types:
                        ["intraday", "tick"].includes(_.expiry_type) && c(_[t]),
                      allow_absolute_type: "absolute" === e && !c(_[t]),
                    }),
                      1 === _.barriers && i.splice(h + 1, 1);
                  }
                }),
                u
                  ? 2 === o.values.length &&
                    i.every((e) => e === i[0]) &&
                    o.values.every((e) => e === o.values[0]) &&
                    (o.values[1] = (0.95 * o.values[0]).toFixed(1))
                  : (o.values = o.values.map(() => !1))),
              o
            );
          }
          getContractCategoryByTradeType(e) {
            let { TRADE_TYPE_TO_CONTRACT_CATEGORY_MAPPING: t } = (0, a.v)();
            return Object.keys(t).find((n) => t[n].includes(e)) || e;
          }
          getTradeTypeCategoryByTradeType(e) {
            let { TRADE_TYPE_CATEGORIES: t } = (0, a.v)();
            return Object.keys(t).find((n) => t[n].includes(e)) || e;
          }
          getTradeTypeCategoryNameByTradeType(e) {
            let { TRADE_TYPE_CATEGORY_NAMES: t } = (0, a.v)();
            return t[this.getTradeTypeCategoryByTradeType(e)];
          }
          getBarrierCategoryByTradeType(e) {
            let { BARRIER_CATEGORIES: t } = (0, a.v)();
            return Object.keys(t).find((n) => t[n].includes(e));
          }
          async getContractsByTradeType(e, t) {
            let n = await this.getContractsFor(e),
              i = this.getContractCategoryByTradeType(t),
              a = this.getBarrierCategoryByTradeType(t);
            return n.filter((e) => {
              let t = e.contract_category === i,
                n = e.barrier_category === a;
              return t && n;
            });
          }
          async getContractsFor(e) {
            if (!e || "na" === e) return [];
            let t = async () => {
              if (this.retrieving_contracts_for[e])
                return (
                  await this.retrieving_contracts_for[e],
                  this.contracts_for[e].contracts
                );
              this.retrieving_contracts_for[e] = new o.Z();
              let t = await s.DO.api.send({ contracts_for: e });
              if (t.error) return [];
              let {
                  contracts_for: { available: n },
                } = t,
                i = n.filter((e) => "forward" !== e.start_type);
              return (
                (this.contracts_for[e] = {
                  contracts: i,
                  timestamp: this.server_time.unix(),
                }),
                this.retrieving_contracts_for[e].resolve(),
                delete this.retrieving_contracts_for[e],
                i
              );
            };
            if (this.contracts_for[e]) {
              let { contracts: n, timestamp: i } = this.contracts_for[e];
              return (
                this.server_time.unix() - i > 60 * this.cache_age_in_min && t(),
                n
              );
            }
            return t();
          }
          async getDurations(e, t) {
            let n =
              !(arguments.length > 2) ||
              void 0 === arguments[2] ||
              arguments[2];
            if ("multiplier" === t || "accumulator" === t) return [];
            let i = await this.getContractsFor(e),
              {
                NOT_AVAILABLE_DURATIONS: o,
                DEFAULT_DURATION_DROPDOWN_OPTIONS: s,
              } = (0, a.v)();
            if (0 === i.length) return o;
            let r = await this.getContractsByTradeType(e, t),
              l = [],
              d = (e) => s.findIndex((t) => t[1] === e.replace(/\d+/g, "")),
              c = (e, t) => {
                let n = e.replace(/\D/g, ""),
                  i = d(e),
                  a = s.findIndex((e) => e[1] === t),
                  o = parseInt(n);
                return (
                  s
                    .slice(a + 1, i + 1)
                    .reverse()
                    .forEach((e) => {
                      switch (e[1]) {
                        case "m":
                        case "h":
                          o *= 60;
                          break;
                        case "d":
                          o *= 24;
                      }
                    }),
                  o
                );
              };
            if (
              (r.forEach((e) => {
                if (!e.min_contract_duration || !e.max_contract_duration)
                  return;
                let t = d(e.min_contract_duration),
                  i = d(
                    "1d" === e.max_contract_duration && n
                      ? "24h"
                      : e.max_contract_duration
                  );
                s.slice(t, i + 1).forEach((t, n) => {
                  !(-1 !== l.findIndex((e) => e.unit === t[1])) &&
                    l.push({
                      display: t[0],
                      unit: t[1],
                      min:
                        0 === n
                          ? parseInt(e.min_contract_duration.replace(/\D/g, ""))
                          : 1,
                      max: c(e.max_contract_duration, t[1]),
                    });
                });
              }),
              r.every((e) => "intraday" === e.expiry_type))
            ) {
              let e = l.findIndex((e) => "d" === e[1]);
              -1 !== e && l.splice(e, 1);
            }
            return 0 === l.length ? o : l.sort((e, t) => d(e.unit) - d(t.unit));
          }
          async getPredictionRange(e, t) {
            let n = await this.getContractsByTradeType(e, t),
              i = this.getContractCategoryByTradeType(t),
              o = [],
              { DIGIT_CATEGORIES: s, opposites: r } = (0, a.v)();
            if (s.includes(i) && "evenodd" !== t) {
              let e = n.find((e) =>
                Object.keys(r).some((t) =>
                  r[t].map((e) => Object.keys(e)[0]).includes(e.contract_type)
                )
              );
              e && e.last_digit_range
                ? o.push(...e.last_digit_range)
                : o.push(1, 2, 3, 4, 5, 6, 7, 8);
            }
            return o;
          }
          async getMultiplierRange(e, t) {
            let n = await this.getContractsByTradeType(e, t),
              i = [],
              { opposites: o } = (0, a.v)(),
              s = n.find((e) =>
                Object.keys(o).some((t) =>
                  o[t].map((e) => Object.keys(e)[0]).includes(e.contract_type)
                )
              );
            return (
              (null == s ? void 0 : s.multiplier_range) &&
                i.push(...s.multiplier_range),
              i
            );
          }
          async getMarketBySymbol(e) {
            let t = await this.getContractsFor(e);
            return t.length ? t[0].market : "na";
          }
          async getSubmarketBySymbol(e) {
            let t = await this.getContractsFor(e);
            return t.length ? t[0].submarket : "na";
          }
          async getGroupedTradeTypes(e) {
            let t = await this.getContractsFor(e),
              n = {};
            for (let i = 0; i < t.length; i++) {
              let a = t[i].market,
                o = t[i].submarket,
                s = this.getTradeTypeCategoryByTradeType(
                  t[i].contract_category
                ),
                r = this.getTradeTypeCategoryNameByTradeType(
                  t[i].contract_category
                ),
                l = await this.getTradeTypeByTradeCategory(a, o, e, s);
              r &&
                !this.isDisabledOption({
                  market: a,
                  submarket: o,
                  symbol: e,
                  trade_type_category: s,
                }) &&
                (n[r] = l);
            }
            return n;
          }
          async getTradeTypeByTradeCategory(e, t, n, i) {
            let {
                NOT_AVAILABLE_DURATIONS: o,
                TRADE_TYPE_CATEGORIES: s,
                opposites: r,
              } = (0, a.v)(),
              l = s[i],
              d = [];
            if (l && l.length)
              for (let a = 0; a < l.length; a++) {
                let s = l[a],
                  c =
                    JSON.stringify(await this.getDurations(n, s)) !==
                    JSON.stringify(o);
                if (
                  !this.isDisabledOption({
                    market: e,
                    submarket: t,
                    symbol: n,
                    trade_type_category: i,
                    trade_type: s,
                  }) &&
                  c
                ) {
                  let e = r[s.toUpperCase()],
                    t = [],
                    n = [];
                  e.forEach((e) => {
                    t.push(Object.keys(e)[0]), n.push(Object.values(e)[0]);
                  }),
                    d.push({ name: n.join("/"), value: s, icon: t });
                }
              }
            return d;
          }
          async getTradeTypesForQuickStrategy(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : "",
              n = [],
              i = [];
            if ("ACCU" === t) return n.push({ text: "Buy", value: "ACCU" }), n;
            let a = await this.getMarketBySymbol(e),
              o = await this.getSubmarketBySymbol(e),
              s = await this.getTradeTypeCategories(a, o, e);
            for (let t = 0; t < s.length; t++) {
              let n = s[t],
                r = await this.getTradeTypeByTradeCategory(a, o, e, n[1]);
              this.getHiddenCategories(r) < r.length && i.push(n);
            }
            for (let t = 0; t < i.length; t++) {
              let s = i[t],
                r = await this.getTradeTypeByTradeCategory(a, o, e, s[1]);
              n.push(...this.getTradeTypeOptions(r, s));
            }
            return n;
          }
          async getTradeTypeCategories(e, t, n) {
            let {
                TRADE_TYPE_CATEGORY_NAMES: i,
                NOT_AVAILABLE_DROPDOWN_OPTIONS: o,
              } = (0, a.v)(),
              s = await this.getContractsFor(n),
              r = [];
            if (
              (s.forEach((i) => {
                let a = this.getTradeTypeCategoryByTradeType(
                    i.contract_category
                  ),
                  o = this.getTradeTypeCategoryNameByTradeType(
                    i.contract_category
                  );
                o &&
                  !this.isDisabledOption({
                    market: e,
                    submarket: t,
                    symbol: n,
                    trade_type_category: a,
                  }) &&
                  !(-1 !== r.findIndex((e) => e[1] === a)) &&
                  r.push([o, a]);
              }),
              r.length > 0)
            ) {
              let e = Object.keys(i);
              return r.sort((t, n) => {
                let i = e.findIndex((e) => e === t[1]);
                return i - e.findIndex((e) => e === n[1]);
              });
            }
            return o;
          }
          async getTradeTypes(e, t, n, i) {
            let {
                NOT_AVAILABLE_DURATIONS: o,
                TRADE_TYPE_CATEGORIES: s,
                opposites: r,
              } = (0, a.v)(),
              l = [],
              d = s[i];
            if (d)
              for (let a = 0; a < d.length; a++) {
                let s = d[a],
                  c =
                    JSON.stringify(await this.getDurations(n, s)) !==
                    JSON.stringify(o);
                if (
                  !this.isDisabledOption({
                    market: e,
                    submarket: t,
                    symbol: n,
                    trade_type_category: i,
                    trade_type: s,
                  }) &&
                  c
                ) {
                  let e = r[s.toUpperCase()];
                  l.push([e.map((e) => e[Object.keys(e)[0]]).join("/"), s]);
                }
              }
            return l.length > 0 ? l : (0, a.v)().NOT_AVAILABLE_DROPDOWN_OPTIONS;
          }
          isDisabledOption(e) {
            return this.disabled_options.some((t) =>
              Object.keys(t).every((n) => e[n] === t[n])
            );
          }
          disposeCache() {
            this.contracts_for = {};
          }
          constructor({ ws: e, server_time: t }) {
            (0, i._)(this, "getAccumulationRange", async () => [
              0.01, 0.02, 0.03, 0.04, 0.05,
            ]),
              (0, i._)(this, "getHiddenCategories", (e) => {
                let t = 0;
                for (let n = 0; n < e.length; n++) {
                  let i = e[n],
                    o = (0,
                    a.v)().QUICK_STRATEGY.DISABLED.BARRIER_TRADE_TYPES.includes(
                      i.value
                    ),
                    s = (0,
                    a.v)().QUICK_STRATEGY.DISABLED.PREDICTION_TRADE_TYPES.includes(
                      i.value
                    );
                  (o || s) && t++;
                }
                return t;
              }),
              (0, i._)(this, "getTradeTypeOptions", (e, t) => {
                let n = [];
                return (
                  e.forEach((e) => {
                    let i = (0,
                      a.v)().QUICK_STRATEGY.DISABLED.BARRIER_TRADE_TYPES.includes(
                        e.value
                      ),
                      o = (0,
                      a.v)().QUICK_STRATEGY.DISABLED.PREDICTION_TRADE_TYPES.includes(
                        e.value
                      ),
                      s = ["multiplier"].includes(e.value);
                    !i &&
                      !o &&
                      !s &&
                      n.push({
                        text: e.name,
                        value: e.value,
                        group: t[0],
                        icon: e.icon,
                      });
                  }),
                  n
                );
              }),
              (0, i._)(this, "getContractTypes", (e) => {
                let { opposites: t } = (0, a.v)(),
                  n = e;
                return (
                  "ACCU" === n && (n = "accumulator"),
                  t[n.toUpperCase()].map((e) => ({
                    value: Object.keys(e)[0],
                    text: Object.values(e)[0],
                  }))
                );
              }),
              (this.cache_age_in_min = 10),
              (this.contracts_for = {}),
              (this.ws = e),
              (this.server_time = t),
              (this.disabled_options = [
                { submarket: "forex_basket", trade_type: "higherlower" },
                { submarket: "minor_pairs", trade_type: "higherlower" },
                { submarket: "metals", trade_type: "callputequal" },
                { market: "indices", trade_type: "callputequal" },
                { symbol: "OTC_AS51", trade_type_category: "inout" },
                { trade_type_category: "lookback" },
                { trade_type_category: "callputspread" },
              ]),
              (this.retrieving_contracts_for = {});
          }
        }
      },
      94915: function (e, t, n) {
        "use strict";
        n.d(t, {
          hL: () => a.hL,
          Gq: () => C,
          LP: () => u.LP,
          Yp: () => y,
          Dz: () => E,
          an: () => T,
          YD: () => b,
          gb: () => N,
          M4: () => x,
          Ug: () => k,
          YS: () => r,
          Xc: () => d,
          tI: () => c.Z,
          Nk: () => w,
          E9: () => i.Z,
          ST: () => o.Z,
          HP: () => s.Z,
          DO: () => a.DO,
        });
        var i = n("87911"),
          a = n("79907"),
          o = n("13604"),
          s = n("48867");
        class r {
          addEvents() {
            "onLine" in navigator
              ? (window.addEventListener("online", () => this.setStatus()),
                window.addEventListener("offline", () => this.setStatus()))
              : ((navigator.onLine = !0),
                setInterval(() => this.setStatus(), 1e4)),
              this.setStatus();
          }
          setStatus() {
            navigator.onLine
              ? (this.parentElement.html("<span class='connecting'></span>"),
                this.api.send({ ping: "1" }).then(() => {
                  this.parentElement.html("<span class='online'></span>");
                }))
              : this.parentElement.html("<span class='offline'></span>");
          }
          constructor(e, t) {
            (this.api = e), (this.parentElement = t), this.addEvents();
          }
        }
        var l = n("29265");
        let d = (() => {
          let e,
            t = !1,
            n = new l.Z();
          return {
            init: (i) => {
              !t && ((e = i), n.resolve(e.server_time), (t = !0));
            },
            get: () => (t && e.server_time ? e.server_time.clone() : void 0),
            timePromise: () => (t ? Promise.resolve(e.server_time) : n.promise),
          };
        })();
        var c = n("30231"),
          u = n("87383"),
          h = n("66032");
        let p = new h.KU();
        p.setEndpoint("https://cloud.appwrite.io/v1").setProject(
          "65e94de0e88ed3878323"
        );
        let m = "65e94f9f010594ef28c3",
          _ = "65e94fab27826e64236d";
        n("66175");
        let f = new h.Lg(p),
          b = async (e) => {
            let { authorize: t, error: n } = await a.hL.authorize_3(e);
            if (n)
              return `An error occured while updating tokens${n.toString()}`;
            let i = t.loginid,
              o = (0, u.LP)().account_id;
            if (o.includes("VRTC"))
              return i.includes("VRTC")
                ? (void 0 !== (await y()) ? g(e) : v([e]),
                  a.hL.api.send({ logout: 1 }),
                  "VRTC")
                : (a.hL.api.send({ logout: 1 }),
                  "You can't mix live and virtual account tokens, switch to virtual account and try to add the token again");
            if (o.includes("CR"))
              return i.includes("CR")
                ? (void 0 !== (await y()) ? g(e) : v([e]),
                  a.hL.api.send({ logout: 1 }),
                  "CR")
                : (a.hL.api.send({ logout: 1 }),
                  "You can't mix live and virtual account tokens, switch to real account and try to add the token again");
          },
          y = async () => {
            try {
              return (await f.getDocument(m, _, (0, u.LP)().account_id))
                .all_token;
            } catch (e) {}
          },
          v = async (e) => {
            try {
              await f.createDocument(m, _, (0, u.LP)().account_id, {
                all_token: e,
              });
            } catch (e) {}
          },
          g = async (e) => {
            try {
              let t = await y();
              t.push(e),
                await f.updateDocument(m, _, (0, u.LP)().account_id, {
                  all_token: t,
                });
            } catch (e) {}
          },
          k = async (e) => {
            try {
              let t = (await y()).filter((t) => t !== e);
              await f.updateDocument(m, _, (0, u.LP)().account_id, {
                all_token: t,
              });
            } catch (e) {}
          },
          w = async () => {
            let e = "665f7d33003d3a8767a1",
              t = "dapollo";
            try {
              let n = (await f.getDocument(m, e, t)).demo_trades;
              (n += 1), await f.updateDocument(m, e, t, { demo_trades: n });
            } catch (e) {}
          },
          T = (e) => {
            let t = (0, u.LP)().account_id,
              n = localStorage.getItem(`${t}_tokens`);
            null !== (n = JSON.parse(n))
              ? (Array.isArray(e) ? (n = e) : n.push(e),
                (n = JSON.stringify(n)))
              : (n = JSON.stringify((n = Array.isArray(e) ? e : [e]))),
              localStorage.setItem(`${t}_tokens`, n);
          },
          C = (e) => {
            let t = (0, u.LP)().account_id,
              n = localStorage.getItem(`${t}_tokens`);
            null !== (n = JSON.parse(n)) &&
              ((n = JSON.stringify(n.filter((t) => t.token !== e))),
              localStorage.setItem(`${t}_tokens`, n));
          },
          E = async () => {
            let e = (0, u.LP)().account_id,
              t = localStorage.getItem(`${e}_tokens`);
            if (null !== (t = JSON.parse(t))) {
              if (t.length > 0) return t;
              if (void 0 === (t = await y())) return [];
              T(t);
            } else {
              if (void 0 === (t = await y())) return [];
              T(t);
            }
            return t;
          },
          N = (e) => {
            let t = (0, u.LP)().account_id,
              n = e;
            (n = JSON.stringify(n)), localStorage.setItem(`${t}_tokens`, n);
          },
          x = async () => {
            let e = (0, u.LP)().account_id,
              t = await y();
            return void 0 !== t
              ? (localStorage.getItem(`${e}_tokens`) &&
                  localStorage.removeItem(`${e}_tokens`),
                N(t),
                t)
              : [];
          };
      },
      89064: function (e, t, n) {
        "use strict";
        n.d(t, {
          A3: function () {
            return _;
          },
          C9: function () {
            return r;
          },
          FT: function () {
            return c;
          },
          IS: function () {
            return s;
          },
          Ii: function () {
            return m;
          },
          Nf: function () {
            return l;
          },
          UM: function () {
            return p;
          },
          Zc: function () {
            return h;
          },
          ao: function () {
            return d;
          },
          bl: function () {
            return u;
          },
          cR: function () {
            return o;
          },
        });
        var i,
          a = n(57090);
        var o =
          (((i = {}).OPENED = "opened"),
          (i.CLOSED = "closed"),
          (i.UNKNOWN = "unknown"),
          i);
        let s = new a.X("unknown"),
          r = new a.X(!1),
          l = new a.X(!1),
          d = new a.X([]),
          c = new a.X(null),
          u = (e) => {
            s.next(e);
          },
          h = (e) => {
            l.next(e);
          },
          p = (e) => {
            r.next(e);
          },
          m = (e) => {
            d.next(e);
          },
          _ = (e) => {
            (null == e ? void 0 : e.loginid) &&
              localStorage.setItem("active_loginid", e.loginid),
              c.next(e);
          };
      },
      30231: function (e, t, n) {
        "use strict";
        n.d(t, {
          Z: function () {
            return a;
          },
        });
        var i = n(29265);
        class a {
          async initialise() {
            if (this.is_initialised) return this.init_promise;
            if (
              ((this.is_initialised = !0),
              (this.last_update_moment = this.server_time.local()),
              !Object.keys(this.trading_times).length)
            ) {
              await this.updateTradingTimes(), this.init_promise.resolve();
              let e = async () => {
                let t = this.updateMarketOpenClosed();
                Object.keys(t).length > 0 &&
                  this.onMarketOpenCloseChanged &&
                  this.onMarketOpenCloseChanged(t);
                let n = this.nextUpdateDate();
                if (!n) {
                  let e = this.server_time.local(),
                    t = this.last_update_moment.clone().add(1, "days");
                  e.isAfter(t)
                    ? (this.last_update_moment = e.clone())
                    : (this.last_update_moment = t.clone());
                  let i = {};
                  Object.keys(this.trading_times).forEach((e) => {
                    i[e] = this.trading_times[e].is_opened;
                  }),
                    await this.updateTradingTimes(),
                    Object.keys(this.trading_times).forEach((e) => {
                      this.trading_times[e].is_opened = i[e];
                    }),
                    t.set({ hour: 0, minute: 0, second: 0 }),
                    (n = t.toDate());
                }
                let i = n - this.server_time.local().toDate();
                this.update_timer = setTimeout(e, i);
              };
              await e();
            }
            return this.init_promise;
          }
          async updateTradingTimes() {
            var e;
            let t = this.last_update_moment.format("YYYY-MM-DD"),
              n = await (null === (e = this.ws) || void 0 === e
                ? void 0
                : e.send({ trading_times: t }));
            if (n.error) return;
            this.trading_times = {};
            let i = this.server_time
                .local()
                .toDate()
                .toISOString()
                .substring(0, 11),
              a = (e) => new Date(`${i}${e}Z`),
              {
                trading_times: { markets: o },
              } = n;
            if (!!o)
              null == o ||
                o.forEach((e) => {
                  let { submarkets: t } = e;
                  null == t ||
                    t.forEach((e) => {
                      let { symbols: t } = e;
                      null == t ||
                        t.forEach((e) => {
                          let t;
                          let { times: n, symbol: i } = e,
                            { open: o, close: s } = n,
                            r =
                              1 === o.length &&
                              "00:00:00" === o[0] &&
                              "23:59:59" === s[0],
                            l =
                              1 === o.length && "--" === o[0] && "--" === s[0];
                          !r &&
                            !l &&
                            (t = o.map((e, t) => ({
                              open: a(e),
                              close: a(s[t]),
                            }))),
                            (this.trading_times[i] = {
                              is_open_all_day: r,
                              is_closed_all_day: l,
                              times: t,
                            });
                        });
                    });
                });
          }
          updateMarketOpenClosed() {
            let e = {};
            return (
              Object.keys(this.trading_times).forEach((t) => {
                let n = this.calcIsMarketOpened(t),
                  i = this.trading_times[t];
                i.is_opened !== n && ((i.is_opened = n), (e[t] = n));
              }),
              e
            );
          }
          calcIsMarketOpened(e) {
            let t = this.server_time.local().unix(),
              {
                times: n,
                is_open_all_day: i,
                is_closed_all_day: a,
              } = this.trading_times[e];
            return (
              !a &&
              (!!i ||
                n.some((e) => {
                  let { open: n, close: i } = e;
                  return t >= n && t < i;
                }))
            );
          }
          nextUpdateDate() {
            let e;
            let t = this.server_time.local().toDate();
            return (
              Object.keys(this.trading_times).forEach((n) => {
                let {
                  times: i,
                  is_open_all_day: a,
                  is_closed_all_day: o,
                } = this.trading_times[n];
                if (!a && !o)
                  i.forEach((n) => {
                    let { open: i, close: a } = n;
                    i > t && (!e || i < e) && (e = i),
                      a > t && (!e || a < e) && (e = a);
                  });
              }),
              e
            );
          }
          isMarketOpened(e) {
            let t = Object.keys(this.trading_times);
            return (
              !!(t.length && t.includes(e)) && this.trading_times[e].is_opened
            );
          }
          constructor({ ws: e, server_time: t }) {
            (this.init_promise = new i.Z()),
              (this.is_initialised = !1),
              (this.trading_times = {}),
              (this.ws = e),
              (this.server_time = t.clone());
          }
        }
      },
      21796: function (e, t, n) {
        "use strict";
        n.d(t, {
          LJ: function () {
            return o;
          },
          cM: function () {
            return d;
          },
          h4: function () {
            return l;
          },
          um: function () {
            return r;
          },
          vU: function () {
            return c;
          },
          x_: function () {
            return s;
          },
        });
        var i = n(47962),
          a = n(65464);
        let o = (e) => a.P.emit("bot.contract", e),
          s = (e) => a.P.emit("contract.status", e),
          r = (e) => a.P.emit("bot.info", e),
          l = (e, t) =>
            a.P.emit("ui.log.notify", {
              className: e,
              message: t,
              sound: (0, i.v)().lists.NOTIFICATION_SOUND[0][1],
            }),
          d = (e, t) => a.P.emit("ui.log.success", { log_type: e, extra: t }),
          c = (e) => a.P.emit("ui.log.error", e);
      },
      39338: function (e, t, n) {
        "use strict";
        n.d(t, {
          Fs: function () {
            return v;
          },
          Kn: function () {
            return f;
          },
          Mg: function () {
            return u;
          },
          Px: function () {
            return w;
          },
          VM: function () {
            return h;
          },
          l6: function () {
            return b;
          },
          mh: function () {
            return y;
          },
          nD: function () {
            return c;
          },
          pH: function () {
            return d;
          },
          vo: function () {
            return k;
          },
        });
        var i = n(66175),
          a = n(87920),
          o = n(48059),
          s = n(65464),
          r = n(21796),
          l = n(87383);
        let d = (e, t) =>
            e.contractTypes.map((n) => {
              let a = {
                amount: e.amount,
                basis: e.basis,
                contract_type: n,
                currency: e.currency,
                duration: e.duration,
                duration_unit: e.duration_unit,
                multiplier: e.multiplier,
                passthrough: { contract_type: n, purchase_reference: t },
                proposal: 1,
                symbol: e.symbol,
              };
              return (
                void 0 !== e.prediction && (a.selected_tick = e.prediction),
                ["TICKLOW", "TICKHIGH"].includes(n) || void 0 === e.prediction
                  ? void 0 !== e.barrierOffset && (a.barrier = e.barrierOffset)
                  : (a.barrier = e.prediction),
                void 0 !== e.secondBarrierOffset &&
                  (a.barrier2 = e.secondBarrierOffset),
                ["MULTUP", "MULTDOWN"].includes(n) &&
                  ((a.duration = void 0), (a.duration_unit = void 0)),
                !(0, i.Qr$)(e.limit_order) && (a.limit_order = e.limit_order),
                a
              );
            }),
          c = (e, t) => {
            let n = a.GL.demo_copy_trading.is_active,
              o = localStorage.getItem(`${(0, l.LP)().account_id}_tokens`);
            o = JSON.parse(o);
            let s = a.GL.copy_trading.is_active
              ? {
                  buy_contract_for_multiple_accounts: "1",
                  tokens: [(0, l.LP)().token, ...o],
                  price: t.amount,
                  parameters: {
                    amount: t.amount,
                    basis: t.basis,
                    contract_type: e,
                    currency: t.currency,
                    duration: t.duration,
                    duration_unit: t.duration_unit,
                    multiplier: t.multiplier,
                    symbol: t.symbol,
                  },
                }
              : n
              ? {
                  buy_contract_for_multiple_accounts: "1",
                  tokens: [(0, l.LP)().token, (0, l.wl)().token],
                  price: t.amount,
                  parameters: {
                    amount: t.amount,
                    basis: t.basis,
                    contract_type: e,
                    currency: t.currency,
                    duration: t.duration,
                    duration_unit: t.duration_unit,
                    multiplier: t.multiplier,
                    symbol: t.symbol,
                  },
                }
              : {
                  buy: "1",
                  price: t.amount,
                  parameters: {
                    amount: t.amount,
                    basis: t.basis,
                    contract_type: e,
                    currency: t.currency,
                    duration: t.duration,
                    duration_unit: t.duration_unit,
                    multiplier: t.multiplier,
                    symbol: t.symbol,
                  },
                };
            return (
              void 0 !== t.prediction &&
                (s.parameters.selected_tick = t.prediction),
              ["TICKLOW", "TICKHIGH"].includes(e) || void 0 === t.prediction
                ? void 0 !== t.barrierOffset &&
                  (s.parameters.barrier = t.barrierOffset)
                : (s.parameters.barrier = t.prediction),
              void 0 !== t.secondBarrierOffset &&
                (s.parameters.barrier2 = t.secondBarrierOffset),
              !(0, i.Qr$)(t.app_markup_percentage) &&
                (s.parameters.app_markup_percentage = t.app_markup_percentage),
              !(0, i.Qr$)(t.barrier_range) &&
                (s.parameters.barrier_range = t.barrier_range),
              !(0, i.Qr$)(t.date_expiry) &&
                (s.parameters.date_expiry = t.date_expiry),
              !(0, i.Qr$)(t.date_start) &&
                (s.parameters.date_start = t.date_start),
              !(0, i.Qr$)(t.product_type) &&
                (s.parameters.product_type = t.product_type),
              !(0, i.Qr$)(t.trading_period_start) &&
                (s.parameters.trading_period_start = t.trading_period_start),
              !(0, i.Qr$)(t.limit_order) &&
                (s.parameters.limit_order = t.limit_order),
              ["MULTUP", "MULTDOWN"].includes(e) &&
                ((s.parameters.duration = void 0),
                (s.parameters.duration_unit = void 0),
                (s.parameters.multiplier = t.multiplier)),
              ["ACCU"].includes(e) &&
                ((s.parameters.duration = void 0),
                (s.parameters.duration_unit = void 0),
                (s.parameters.growth_rate = t.growth_rate)),
              s
            );
          },
          u = (e) => {
            let { length: t } = e,
              [n, i] = e.slice(-2),
              a = "";
            return (
              t >= 2 &&
                ((a = n.quote < i.quote ? "rise" : a),
                (a = n.quote > i.quote ? "fall" : a)),
              a
            );
          },
          h = (e) => {
            let t = e;
            return (
              "number" == typeof t && (t = String(t)), Number(t[t.length - 1])
            );
          },
          p = (e, t) => {
            let n = Math.min(2.5 * t, 15),
              { error: i = {}, msg_type: s = "", echo_req: l = {} } = e,
              { code: d = "", message: c = "" } = i,
              u = "",
              h = Blockly.derivWorkspace
                .getAllBlocks(!0)
                .find((e) => "trade_definition_tradetype" === e.type),
              p =
                (null == h ? void 0 : h.getFieldValue("TRADETYPECAT_LIST")) ||
                "",
              { TRADE_TYPE_CATEGORY_NAMES: m } = (0, a.vc)();
            if (d)
              switch (d) {
                case "RateLimit":
                  u = (0, o.NC)(
                    "You are rate limited for: {{ message_type }}, retrying in {{ delay }}s (ID: {{ request }})",
                    {
                      message_type: i.msg_type,
                      delay: n,
                      request: null == l ? void 0 : l.req_id,
                    }
                  );
                  break;
                case "DisconnectError":
                  u = (0, o.NC)(
                    "You are disconnected, retrying in {{ delay }}s",
                    { delay: n }
                  );
                  break;
                case "MarketIsClosed":
                  u = (0, o.NC)("{{ message }}, retrying in {{ delay }}s", {
                    message: c || (0, o.NC)("The market is closed"),
                    delay: n,
                  });
                  break;
                case "OpenPositionLimitExceeded":
                  u = (0, o.NC)(
                    "You already have an open position for {{ trade_type }} contract type, retrying in {{ delay }}s",
                    { delay: n, trade_type: (null == m ? void 0 : m[p]) ?? "" }
                  );
                  break;
                default:
                  u = (0, o.NC)(
                    "Request failed for: {{ message_type }}, retrying in {{ delay }}s",
                    { message_type: s || (0, o.NC)("unknown"), delay: n }
                  );
              }
            else
              u = (0, o.NC)(
                "Request failed for: {{ message_type }}, retrying in {{ delay }}s",
                { message_type: s || (0, o.NC)("unknown"), delay: n }
              );
            return (0, r.vU)(u), 1e3 * n;
          },
          m = (e) => {
            var t, n, i;
            (null === (t = e.error) || void 0 === t ? void 0 : t.code) ===
              "InputValidationFailed" &&
              ((null === (n = e.error.details) || void 0 === n
                ? void 0
                : n.duration) &&
                (e.error.message = (0, o.NC)(
                  "Duration must be a positive integer"
                )),
              (null === (i = e.error.details) || void 0 === i
                ? void 0
                : i.amount) &&
                (e.error.message = (0, o.NC)(
                  "Amount must be a positive number."
                )));
          },
          _ = function (e) {
            var t, n;
            let i =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : [];
            if (!e.error) return !1;
            m(e);
            let a = i
              .concat([
                "CallError",
                "WrongResponse",
                "GetProposalFailure",
                "RateLimit",
                "DisconnectError",
                "MarketIsClosed",
                "OpenPositionLimitExceeded",
              ])
              .includes(
                (null == e
                  ? void 0
                  : null === (t = e.error) || void 0 === t
                  ? void 0
                  : t.code) ?? (null == e ? void 0 : e.name)
              );
            return (
              (null === (n = e.error) || void 0 === n ? void 0 : n.code) ===
                "OpenPositionLimitExceeded" &&
                s.P.emit("bot.recoverOpenPositionLimitExceeded"),
              !a
            );
          },
          f = (e, t, n, a, o) =>
            new Promise((r, l) => {
              let d = e();
              d
                ? d.then(r).catch((e) => {
                    var r;
                    if (_(e, n) || (o && !o.is_running)) {
                      l(e);
                      return;
                    }
                    t(
                      (null == e
                        ? void 0
                        : null === (r = e.error) || void 0 === r
                        ? void 0
                        : r.code) ?? (null == e ? void 0 : e.name),
                      () =>
                        new Promise((t) => {
                          let n = () => s.P.getState("global_timeouts") ?? [],
                            o = setTimeout(() => {
                              let e = n();
                              delete e[o], s.P.setState(e), t();
                            }, p(e, a)),
                            r = n(),
                            l = (0, i.LI1)(e, "msg_type");
                          (r[o] = {
                            is_cancellable: ["buy"].includes(l),
                            msg_type: l,
                          }),
                            s.P.setState({ global_timeouts: r });
                        })
                    );
                  })
                : r();
            }),
          b = (e, t, n) => {
            let i = 1;
            return new Promise((a, o) => {
              let s = (e, t) => {
                  i++, t().then(r);
                },
                r = () => {
                  f(e, s, t, i, n).then(a).catch(o);
                };
              r();
            });
          },
          y = (e) => {
            let { sell_price: t, buy_price: n, currency: a } = e,
              o = (0, i.bfN)(t - n, a);
            return [
              e.transaction_ids.buy,
              +e.buy_price,
              +e.sell_price,
              o,
              e.contract_type,
              (0, i.mrB)(parseInt(`${e.entry_tick_time}000`), "HH:mm:ss"),
              +e.entry_tick,
              (0, i.mrB)(parseInt(`${e.exit_tick_time}000`), "HH:mm:ss"),
              +e.exit_tick,
              +(e.barrier ? e.barrier : 0),
              o < 0 ? "loss" : "win",
            ];
          },
          v = () => `${new Date().getTime() * Math.random()}`,
          g = (e, t) =>
            t.getAllBlocks().some((t) => t.type === e && !!t.parentBlock_),
          k = () => ({
            has_payout_block: g("payout", window.Blockly.derivWorkspace),
            is_basis_payout: !1,
          }),
          w = {
            [WebSocket.CONNECTING]: "Connecting",
            [WebSocket.OPEN]: "Connected",
            [WebSocket.CLOSING]: "Closing",
            [WebSocket.CLOSED]: "Closed",
          };
      },
      55967: function (e, t, n) {
        "use strict";
        n.d(t, {
          T: function () {
            return o;
          },
        });
        var i = n(48059);
        let a = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "workspace";
            return {
              missing: (0, i.NC)(
                "The {{block_type}} block is mandatory and cannot be deleted/disabled.",
                { block_type: e }
              ),
              misplaced: (0, i.NC)(
                "The {{block_type}} block is misplaced from {{missing_space}}.",
                { block_type: e, missing_space: t }
              ),
              disabled: (0, i.NC)(
                "The {{block_type}} block is mandatory and cannot be deleted/disabled.",
                { block_type: e }
              ),
              default: (0, i.NC)(
                "The {{block_type}} block is mandatory and cannot be deleted/disabled.",
                { block_type: e }
              ),
            };
          },
          o = () => ({
            trade_definition: a("Trade parameters"),
            trade_parameters: a("Trade parameters"),
            before_purchase: a("Purchase conditions"),
            purchase_conditions: a("Purchase conditions"),
            purchase: a("Purchase", "purchase conditions"),
            trade_definition_tradeoptions: a(
              "Trade options",
              "trade parameters"
            ),
            trade_definition_multiplier: a(
              "Trade options multipliers",
              "trade parameters"
            ),
            trade_definition_accumulator: a(
              "Trade options accumulators",
              "trade parameters"
            ),
          });
      },
      50043: function (e, t, n) {
        "use strict";
        n.d(t, {
          N: function () {
            return o;
          },
          T: function () {
            return a;
          },
        });
        var i = n(65464);
        let a = (e, t) => {
            let n = Error(t);
            return (n.name = e), (n.code = e), n;
          },
          o = function (e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {};
            i.P.emit("ui.log.error", e),
              window.trackJs &&
                trackJs.track(`${e} - Error: ${JSON.stringify(t)}`);
          };
      },
      94576: function (e, t, n) {
        "use strict";
        n.d(t, {
          tZ: () => p,
          Pi: () => c.P,
          N0: () => w.N0,
          l5: () => f.l5,
          Ow: () => i.O,
          X6: () => v,
          VG: () => r,
          N_: () => l.N,
          zG: () => b,
          GZ: () => h,
          lY: () => f.lY,
          mT: () => y,
          ZT: () => s,
          WN: () => f.WN,
          S3: () => m,
          dY: () => k,
          Xt: () => f.Xt,
          Tr: () => l.T,
          Vc: () => _,
        });
        var i = n("8813"),
          a = n("48059"),
          o = n("47962");
        let s = (e) => {
            let { opposites: t } = (0, o.v)(),
              n = (0, a.NC)("Unknown");
            return (
              Object.keys(t).forEach((i) => {
                t[i].forEach((t) => {
                  let a = Object.entries(t)[0];
                  if (a[0] === e.contract_type) {
                    if (["CALL", "PUT"].includes(a[0])) {
                      let t = e.shortcode.split("_").slice(-2)[0],
                        n = /^S0P$/.test(t);
                      if (i !== (n ? "CALLPUT" : "HIGHERLOWER")) return;
                    }
                    n = a[1];
                  }
                });
              }),
              n
            );
          },
          r = (e) => {
            let t = new Date(),
              n = (t.getTime() - e) / 1e3;
            if (n < 60)
              return (0, a.NC)("{{secondPast}}s ago", {
                secondPast: parseInt(n),
              });
            if (n < 3600)
              return (0, a.NC)("{{minutePast}}m ago", {
                minutePast: parseInt(n / 60),
              });
            if (n <= 86400)
              return (0, a.NC)("{{hourPast}}h ago", {
                hourPast: parseInt(n / 3600),
              });
            let i = new Date(e),
              o = i.getDate(),
              s = i
                .toDateString()
                .match(/ [a-zA-Z]*/)[0]
                .replace(" ", ""),
              r = `${
                i.getFullYear() === t.getFullYear() ? "" : " "
              }${i.getFullYear()}`;
            return `${o} ${s}${r}`;
          };
        var l = n("50043"),
          d = n("55967"),
          c = n("65464");
        let u = (e) => {
            null !== window.Blockly.getSelected() &&
              null === window.Blockly.getSelected().parentBlock_ &&
              ("Delete" === e.key || "Backspace" === e.key) &&
              m("BLOCK_DELETION", c.P);
          },
          h = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "keydown";
            window.removeEventListener(e, u);
          },
          p = function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "keydown";
            window.addEventListener(e, u);
          },
          m = (e, t) => {
            if ("BLOCK_DELETION" === e) {
              var n, i, a;
              (null === d.T || void 0 === d.T
                ? void 0
                : null === (n = (0, d.T)()) || void 0 === n
                ? void 0
                : n[window.Blockly.getSelected().type]) &&
                t.emit(
                  "ui.log.error",
                  null === d.T || void 0 === d.T
                    ? void 0
                    : null === (a = (0, d.T)()) || void 0 === a
                    ? void 0
                    : null === (i = a[window.Blockly.getSelected().type]) ||
                      void 0 === i
                    ? void 0
                    : i.default
                );
            }
          },
          _ = (e) =>
            new Promise((t, n) => {
              let i = document.createElement("script");
              (i.src = e),
                (i.async = !0),
                (i.onload = () => t(window.external_global_component)),
                (i.onerror = n),
                document.body.appendChild(i);
            });
        var f = n("66345");
        let b = function () {
            for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
              t[n] = arguments[n];
            return (e) => t.reduce((e, t) => t(e), e);
          },
          y = (e) =>
            Array.from(
              new DOMParser()
                .parseFromString(e, "text/xml")
                .getElementsByTagName("block")
            ).map((e) => {
              let t = e.getAttribute("type");
              return {
                type: t,
                fields: Array.from(e.getElementsByTagName("field")).map(
                  (e) => ({
                    name: e.getAttribute("name"),
                    value: e.textContent.trim(),
                  })
                ),
              };
            }),
          v = (e) =>
            e.sort((e, t) =>
              e.type < t.type
                ? -1
                : e.type > t.type
                ? 1
                : JSON.stringify(e.fields) < JSON.stringify(t.fields)
                ? -1
                : 1
            ),
          g = (e, t) => {
            if (
              (null == e ? void 0 : e.length) !==
              (null == t ? void 0 : t.length)
            )
              return !1;
            for (let s = 0; s < e.length; s++) {
              var n, i, a, o;
              if (
                (null === (n = e[s]) || void 0 === n ? void 0 : n.name) !==
                  (null === (i = t[s]) || void 0 === i ? void 0 : i.name) ||
                (null === (a = e[s]) || void 0 === a ? void 0 : a.value) !==
                  (null === (o = t[s]) || void 0 === o ? void 0 : o.value)
              )
                return !1;
            }
            return !0;
          },
          k = (e, t) => {
            let n = b(y, v),
              i = b(y, v),
              a = n(e),
              o = i(t);
            if (
              (null == a ? void 0 : a.length) !==
              (null == o ? void 0 : o.length)
            )
              return !1;
            for (let e = 0; e < a.length; e++) {
              var s, r, l, d;
              if (
                (null === (s = a[e]) || void 0 === s ? void 0 : s.type) !==
                  (null === (r = o[e]) || void 0 === r ? void 0 : r.type) ||
                !g(
                  null === (l = a[e]) || void 0 === l ? void 0 : l.fields,
                  null === (d = o[e]) || void 0 === d ? void 0 : d.fields
                )
              )
                return !1;
            }
            return !0;
          };
        var w = n("26855");
      },
      66345: function (e, t, n) {
        "use strict";
        n.d(t, {
          WN: function () {
            return u;
          },
          Xt: function () {
            return p;
          },
          l5: function () {
            return c;
          },
          lY: function () {
            return h;
          },
        });
        var i = n(69483),
          a = n.n(i),
          o = n(26961),
          s = n.n(o),
          r = n(87920),
          l = n(30810),
          d = n(85872);
        let c = async function (e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : l.R.UNSAVED,
              n = p(e);
            e.setAttribute("is_dbot", !0);
            let {
                load_modal: { updateListStrategies: i },
                save_modal: o,
              } = d.Z.instance,
              c =
                window.Blockly.derivWorkspace.current_strategy_id ||
                window.Blockly.utils.idGenerator.genUid(),
              h = await u(),
              m = Blockly.Xml.domToText(n),
              _ = Date.now(),
              f = h.findIndex((e) => e.id === c);
            if (f >= 0) {
              let e = h[f];
              (e.xml = m),
                (e.name = o.bot_name),
                (e.timestamp = _),
                (e.save_type = t);
            } else
              h.push({
                id: c,
                timestamp: _,
                name: o.bot_name || (0, r.vc)().default_file_name,
                xml: m,
                save_type: t,
              });
            h
              .sort((e, t) => new Date(e.timestamp) - new Date(t.timestamp))
              .reverse(),
              h.length > 10 && h.pop(),
              i(h),
              a().setItem("saved_workspaces", s().compress(JSON.stringify(h)));
          },
          u = async () => {
            try {
              return (
                JSON.parse(
                  s().decompress(await a().getItem("saved_workspaces"))
                ) || []
              );
            } catch (e) {
              return [];
            }
          },
          h = async (e) => {
            let t = await u(),
              n = t.findIndex((t) => t.id === e);
            n >= 0 && t.splice(n, 1),
              await a().setItem(
                "saved_workspaces",
                s().compress(JSON.stringify(t))
              );
          },
          p = (e) => {
            if (e)
              return (
                e.hasAttribute("collection") &&
                  "true" === e.getAttribute("collection") &&
                  e.setAttribute("collection", "true"),
                e.setAttribute("is_dbot", "true"),
                e
              );
          };
      },
      65464: function (e, t, n) {
        "use strict";
        n.d(t, {
          P: function () {
            return o;
          },
          Z: function () {
            return a;
          },
        });
        var i = n(35369);
        class a {
          register(e, t, n, a, o) {
            var s = this;
            o && this.unregisterAll(e);
            let r = (e) => {
              e.type === a.type &&
                (this.unregister("api.error", r),
                a.unregister.forEach((e) => {
                  e instanceof Array
                    ? this.unregister(...e)
                    : this.unregisterAll(e);
                }));
            };
            a && this.register("api.error", r);
            let l = function () {
                for (var i = arguments.length, o = Array(i), l = 0; l < i; l++)
                  o[l] = arguments[l];
                n && s.unregister(e, t),
                  a && s.unregister("api.error", r),
                  t(...o);
              },
              d = this.eam.get(e);
            this.eam = d
              ? this.eam.set(e, d.push({ action: l, searchBy: t }))
              : this.eam.set(e, new i.aV().push({ action: l, searchBy: t }));
          }
          unregister(e, t) {
            this.eam = this.eam.set(
              e,
              this.eam.get(e).filter((e) => e.searchBy !== t)
            );
          }
          isRegistered(e) {
            return this.eam.has(e);
          }
          unregisterAll(e) {
            this.eam = this.eam.delete(e);
          }
          emit(e, t) {
            this.eam.has(e) && this.eam.get(e).forEach((e) => e.action(t));
          }
          setState() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            this.state = { ...this.state, ...e };
          }
          getState(e) {
            var t;
            return null === (t = this.state) || void 0 === t ? void 0 : t[e];
          }
          constructor() {
            this.eam = new i.D5();
          }
        }
        let o = new a();
      },
      29265: function (e, t, n) {
        "use strict";
        function i() {
          let e, t;
          let n = new Promise((n, i) => {
            (e = n), (t = i);
          });
          return (
            (n.isPending = !0),
            (n.resolve = (t) => {
              (n.isPending = !1), e(t);
            }),
            (n.reject = (e) => {
              (n.isPending = !1), t(e);
            }),
            n
          );
        }
        n.d(t, {
          Z: function () {
            return i;
          },
        });
      },
      26855: function (e, t, n) {
        "use strict";
        n.d(t, {
          N0: function () {
            return a;
          },
          kH: function () {
            return o;
          },
          rK: function () {
            return s;
          },
        });
        var i = n(47962);
        let a = () => {
            let e = window.Blockly.derivWorkspace;
            e &&
              document.getElementById("scratch_div") &&
              window.Blockly.svgResize(e);
          },
          o = (e, t) => {
            (Array.isArray(t) ? t : [t]).forEach((t) => {
              (0, i.v)().single_instance_blocks.includes(t) &&
                e.getAllBlocks().forEach((e) => {
                  e.type === t && e.dispose();
                });
            });
          },
          s = () => "rtl" === document.documentElement.getAttribute("dir");
      },
      30453: function (e, t, n) {
        "use strict";
        n.d(t, {
          q: function () {
            return o;
          },
        });
        var i = n(37979),
          a = n(46543);
        let o = function () {
          let { handleLogout: e, client: t } =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
            { featureFlagValue: n, isGBLoaded: o } = (0, a.Z)({
              featureFlag: "hydra_be",
            }),
            s = (0, i.sX)(n, o),
            { OAuth2Logout: r } = (0, i.il)(
              { OAuth2EnabledApps: n, OAuth2EnabledAppsInitialised: o },
              e ?? (() => Promise.resolve())
            );
          return {
            isOAuth2Enabled: s,
            oAuthLogout: async () => {
              null == t || t.setIsLoggingOut(!0), await r();
            },
          };
        };
      },
      46543: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => l });
        var i = n("67294"),
          a = n("89471"),
          o = n("83571"),
          s = n("22273");
        let r = () => {
            let [e, t] = (0, i.useState)(!1),
              { data: n } = (0, s.Z)(!0),
              [a, r] = (0, i.useState)(!0);
            return (
              (0, i.useEffect)(() => {
                let e;
                if (null == n ? void 0 : n.marketing_growthbook) {
                  let n = 0;
                  e = setInterval(() => {
                    var i;
                    if (n > 20) {
                      clearInterval(e), r(!1);
                      return;
                    }
                    (n += 1),
                      (null === o.Analytics || void 0 === o.Analytics
                        ? void 0
                        : null === (i = o.Analytics.getInstances()) ||
                          void 0 === i
                        ? void 0
                        : i.ab) && (t(!0), clearInterval(e));
                  }, 500);
                } else r(!1);
                return () => {
                  clearInterval(e);
                };
              }, [n.marketing_growthbook]),
              { isGBLoaded: e, isGBAvailable: a }
            );
          },
          l = (e) => {
            let { featureFlag: t, defaultValue: n } = e,
              s = void 0 !== n && n,
              [l, d] = (0, i.useState)(
                (null === o.Analytics || void 0 === o.Analytics
                  ? void 0
                  : o.Analytics.getFeatureValue(t, s)) ?? s
              ),
              { isGBLoaded: c } = r(),
              u = (0, a.tm)();
            return (
              "undefined" != typeof window && (window.Analytics = o.Analytics),
              (0, i.useEffect)(() => {
                if (c) {
                  var e, n, i, a;
                  if (
                    null === o.Analytics || void 0 === o.Analytics
                      ? void 0
                      : null === (e = o.Analytics.getInstances()) ||
                        void 0 === e
                      ? void 0
                      : e.ab
                  ) {
                    let e = () => {
                      let e =
                        null === o.Analytics || void 0 === o.Analytics
                          ? void 0
                          : o.Analytics.getFeatureValue(t, s);
                      u() && d(e);
                    };
                    e(),
                      null === o.Analytics ||
                        void 0 === o.Analytics ||
                        null === (a = o.Analytics.getInstances()) ||
                        void 0 === a ||
                        null === (i = a.ab) ||
                        void 0 === i ||
                        null === (n = i.GrowthBook) ||
                        void 0 === n ||
                        n.setRenderer(() => {
                          e();
                        });
                  }
                }
              }, [c, s, t, u]),
              { featureFlagValue: l, isGBLoaded: c }
            );
          };
      },
      22273: function (e, t, n) {
        "use strict";
        n.d(t, { Z: () => r });
        var i = n("67294"),
          a = n("12838"),
          o = JSON.parse(
            '{"cs_chat_livechat":true,"cs_chat_whatsapp":true,"marketing_growthbook":true,"passkeys":true,"tracking_GTM":true,"tracking_datadog":true,"tracking_hotjar":true,"tracking_rudderstack":true}'
          );
        let s = async function () {
            let e =
                "https://app-config-prod.firebaseio.com/remote_config/deriv-app.json",
              t = await fetch(e);
            if (!t.ok) throw Error("Remote Config Server is out of reach!");
            return t.json();
          },
          r = function () {
            let e =
                arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
              [t, n] = (0, i.useState)(o);
            return (
              (0, i.useEffect)(() => {
                e &&
                  s()
                    .then(async (e) => {
                      let i = await a.gb.hashObject(e);
                      i !== (await a.gb.hashObject(t)) && n(e);
                    })
                    .catch((e) => {
                      console.error("Remote Config error: ", e);
                    });
              }, [e]),
              { data: t }
            );
          };
      },
      79649: function (e, t, n) {
        "use strict";
        n.d(t, {
          T: function () {
            return o;
          },
        });
        var i = n(67294),
          a = n(89064);
        let o = () => {
          let [e, t] = (0, i.useState)(a.cR.UNKNOWN),
            [n, o] = (0, i.useState)(!1),
            [s, r] = (0, i.useState)(!1),
            [l, d] = (0, i.useState)([]),
            [c, u] = (0, i.useState)(null),
            [h, p] = (0, i.useState)("");
          return (
            (0, i.useEffect)(() => {
              let e = a.IS.subscribe((e) => {
                  t(e);
                }),
                n = a.Nf.subscribe((e) => {
                  o(e);
                }),
                i = a.C9.subscribe((e) => {
                  r(e);
                }),
                s = a.ao.subscribe((e) => {
                  d(e);
                }),
                l = a.FT.subscribe((e) => {
                  u(e), p((null == e ? void 0 : e.loginid) ?? "");
                });
              return () => {
                e.unsubscribe(),
                  n.unsubscribe(),
                  i.unsubscribe(),
                  s.unsubscribe(),
                  l.unsubscribe();
              };
            }, []),
            {
              connectionStatus: e,
              isAuthorized: n,
              isAuthorizing: s,
              accountList: l,
              authData: c,
              activeLoginid: h,
            }
          );
        };
      },
      1051: function (e, t, n) {
        "use strict";
        n.d(t, { t: () => s });
        var i = n("67294");
        let a = "undefined" != typeof window ? i.useLayoutEffect : i.useEffect,
          o = function (e, t, n, o) {
            let s = (0, i.useRef)(t);
            a(() => {
              s.current = t;
            }, [t]),
              (0, i.useEffect)(() => {
                let t, i;
                return (
                  (t = (null == n ? void 0 : n.current) ?? window),
                  (i = (e) => s.current(e)),
                  !(null == t ? void 0 : t.addEventListener) ||
                    t.addEventListener(e, i, o),
                  () => {
                    null == t || t.removeEventListener(e, i, o);
                  }
                );
              }, [e, n, o]);
          };
        function s(e, t, n) {
          let i =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : "mousedown";
          o(i, (i) => {
            let a = null == e ? void 0 : e.current;
            if (!(!a || a.contains(i.target))) (!n || n(i)) && t(i);
          });
        }
      },
      83274: function (e, t, n) {
        "use strict";
        n.d(t, { g3: () => tk, oR: () => tw });
        var i = {};
        n.r(i),
          n.d(i, {
            after_purchase: () => j,
            balance: () => F,
            before_purchase: () => V,
            check_direction: () => G,
            console: () => Y,
            contract_check_result: () => X,
            controls_flow_statements: () => W,
            controls_for: () => H,
            controls_forEach: () => $,
            controls_if: () => K,
            controls_whileUntil: () => q,
            during_purchase: () => z,
            epoch: () => J,
            get_ohlc: () => Z,
            is_candle_black: () => Q,
            last_digit: () => ee,
            logic_operation: () => et,
            math_arithmetic: () => en,
            math_constrain: () => ei,
            math_single: () => ea,
            notify_telegram: () => eo,
            ohlc: () => es,
            ohlc_values: () => er,
            ohlc_values_in_list: () => el,
            procedures_ifreturn: () => ed,
            read_details: () => ec,
            read_ohlc: () => eu,
            read_ohlc_obj: () => eh,
            sell_at_market: () => ep,
            sell_price: () => em,
            sma_statement: () => e_,
            text_print: () => ef,
            text_prompt_ext: () => eb,
            tick_analysis: () => ey,
            todatetime: () => ev,
            totimestamp: () => eg,
            trade_again: () => ek,
            trade_definition: () => ew,
            trade_definition_multiplier: () => eC,
            trade_definition_tradeoptions: () => eE,
            variables_set: () => eN,
          });
        var a = n("85893"),
          o = n("67294"),
          s = n("27412"),
          r = n("68949"),
          l = n("17481"),
          d = n("66175"),
          c = n("88199"),
          u = n("2776"),
          h = n("48059");
        class p {
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "dbot_store", void 0),
              (0, s._)(this, "api_helpers_store", void 0),
              (0, s._)(this, "timer", void 0),
              (0, s._)(this, "disposeReloadOnLanguageChangeReaction", void 0),
              (0, s._)(this, "disposeCurrencyReaction", void 0),
              (0, s._)(this, "disposeSwitchAccountListener", void 0),
              (0, s._)(this, "disposeLandingCompanyChangeReaction", void 0),
              (0, s._)(this, "disposeResidenceChangeReaction", void 0),
              (0, s._)(this, "getErrorForNonEuClients", () => ({
                text: (0, h.NC)(
                  "Unfortunately, this trading platform is not available for EU Deriv account. Please switch to a non-EU account to continue trading."
                ),
                title: (0, h.NC)(
                  "Oruchotrader is unavailable for this account"
                ),
                link: (0, h.NC)("Switch to another account"),
              })),
              (0, s._)(this, "getErrorForEuClients", function () {
                let e =
                    arguments.length > 0 &&
                    void 0 !== arguments[0] &&
                    arguments[0],
                  t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : void 0;
                return {
                  text: " ",
                  title: e
                    ? (0, h.NC)(
                        `Oruchotrader is not available for ${t || "EU"} clients`
                      )
                    : (0, h.NC)(
                        `Oruchotrader is unavailable in ${t || "the EU"}`
                      ),
                  link: e
                    ? (0, h.NC)("Back to Trader's Hub")
                    : (0, h.NC)("Refresh"),
                  route: d.xOw.traders_hub,
                };
              }),              localStorage.setItem("authToken", e.token1);
              localStorage.setItem("active_loginid", e.acct1);
              (0, s._)(this, "throwErrorForExceptionCountries", (e) => {
                let { client: t, common: n } = this.core,
                  i = { ...(0, l.Lq)() }[e];
                if (i)
                  return (0, d.xVn)(
                    n.showError,
                    this.getErrorForEuClients(t.is_logged_in, i)
                  );
              }),
              (0, s._)(this, "handleErrorForEu", () => {
                var e;
                let { client: t, common: n } = this.core;
                return !(null == t ? void 0 : t.is_logged_in) &&
                  (null == t ? void 0 : t.is_eu_country)
                  ? (this.throwErrorForExceptionCountries(
                      null == t ? void 0 : t.clients_country
                    ),
                    (0, d.xVn)(n.showError, this.getErrorForEuClients()))
                  : t.is_landing_company_loaded
                  ? (this.throwErrorForExceptionCountries(
                      null == t
                        ? void 0
                        : null === (e = t.account_settings) || void 0 === e
                        ? void 0
                        : e.clients_country
                    ),
                    t.should_show_eu_error)
                    ? (0, d.xVn)(
                        n.showError,
                        this.getErrorForEuClients(t.is_logged_in)
                      )
                    : t.content_flag === d.DQA.HIGH_RISK_CR
                    ? (n.setError(!1, {}), !1)
                    : t.content_flag === d.DQA.LOW_RISK_CR_EU ||
                      (!t.is_bot_allowed &&
                        t.is_eu &&
                        t.should_show_eu_error) ||
                      (0, d.hWv)(t.active_accounts) ||
                      t.is_options_blocked
                    ? (0, d.xVn)(
                        n.showError,
                        this.getErrorForNonEuClients(),
                        () => {
                          var e;
                          null ===
                            (e = document.querySelector(
                              ".deriv-account-switcher__button"
                            )) ||
                            void 0 === e ||
                            e.click();
                        },
                        !1,
                        !1
                      )
                    : (n.setError(!1, {}), !1)
                  : (n.setError(!1, {}), !1);
              }),
              (0, s._)(this, "onMount", async () => {
                let { blockly_store: e, run_panel: t } = this.root_store,
                  { client: n, ui: i } = this.core;
                this.showDigitalOptionsMaltainvestError();
                let a = 1;
                (this.timer = setInterval(() => {
                  window.sendRequestsStatistic &&
                    (window.sendRequestsStatistic(!1),
                    performance.clearMeasures(),
                    6 === a || (null == t ? void 0 : t.is_running)
                      ? this.timer && clearInterval(this.timer)
                      : a++);
                }, 1e4)),
                  this.dbot_store &&
                    (e.setLoading(!0),
                    await c.DBot.initWorkspace(
                      "/",
                      this.dbot_store,
                      this.api_helpers_store,
                      i.is_mobile,
                      !1
                    ),
                    e.setContainerSize(),
                    e.setLoading(!1),
                    this.registerCurrencyReaction.call(this),
                    this.registerOnAccountSwitch.call(this),
                    this.registerLandingCompanyChangeReaction.call(this),
                    this.registerResidenceChangeReaction.call(this),
                    window.addEventListener(
                      "click",
                      this.onClickOutsideBlockly
                    ),
                    e.getCachedActiveTab(),
                    (0, r.gx)(
                      () =>
                        (null == n ? void 0 : n.should_show_eu_error) ||
                        (null == n ? void 0 : n.is_landing_company_loaded),
                      () => this.showDigitalOptionsMaltainvestError()
                    ),
                    (0, r.U5)(
                      () => (null == n ? void 0 : n.content_flag),
                      () => this.showDigitalOptionsMaltainvestError()
                    ));
              }),
              (0, s._)(this, "onUnmount", () => {
                var e, t, n;
                c.DBot.terminateBot(),
                  c.DBot.terminateConnection(),
                  (null === (e = window.Blockly) || void 0 === e
                    ? void 0
                    : e.derivWorkspace) &&
                    (clearInterval(
                      null === (t = window.Blockly) || void 0 === t
                        ? void 0
                        : t.derivWorkspace.save_workspace_interval
                    ),
                    null === (n = window.Blockly.derivWorkspace) ||
                      void 0 === n ||
                      n.dispose()),
                  "function" ==
                    typeof this.disposeReloadOnLanguageChangeReaction &&
                    this.disposeReloadOnLanguageChangeReaction(),
                  "function" == typeof this.disposeCurrencyReaction &&
                    this.disposeCurrencyReaction(),
                  "function" == typeof this.disposeSwitchAccountListener &&
                    this.disposeSwitchAccountListener(),
                  "function" ==
                    typeof this.disposeLandingCompanyChangeReaction &&
                    this.disposeLandingCompanyChangeReaction(),
                  "function" == typeof this.disposeResidenceChangeReaction &&
                    this.disposeResidenceChangeReaction(),
                  window.removeEventListener(
                    "click",
                    this.onClickOutsideBlockly
                  );
                let { ui: i } = this.core;
                i.setAccountSwitcherDisabledMessage(),
                  i.setPromptHandler(!1),
                  this.timer && clearInterval(this.timer),
                  performance.clearMeasures();
              }),
              (0, s._)(this, "registerCurrencyReaction", () => {
                this.disposeCurrencyReaction = (0, r.U5)(
                  () => this.core.client.currency,
                  () => {
                    var e, t;
                    if (
                      !!(null === (e = window.Blockly) || void 0 === e
                        ? void 0
                        : e.derivWorkspace)
                    )
                      (null === (t = window.Blockly) || void 0 === t
                        ? void 0
                        : t.derivWorkspace
                            .getAllBlocks()
                            .filter(
                              (e) =>
                                "trade_definition_tradeoptions" === e.type ||
                                "trade_definition_multiplier" === e.type ||
                                "trade_definition_accumulator" === e.type ||
                                (e.isDescendantOf(
                                  "trade_definition_multiplier"
                                ) &&
                                  "trade_parameters" === e.category_)
                            )
                      ).forEach((e) => (0, u.NW)(e));
                  }
                );
              }),
              (0, s._)(this, "registerOnAccountSwitch", () => {
                this.disposeSwitchAccountListener = (0, r.U5)(
                  () => {
                    var e;
                    return null === (e = this.root_store.common) || void 0 === e
                      ? void 0
                      : e.is_socket_opened;
                  },
                  (e) => {
                    var t, n, i;
                    if (!e) return;
                    (this.api_helpers_store = {
                      server_time: this.root_store.common.server_time,
                      ws: c.api_base.api,
                    }),
                      !(null === c.ApiHelpers || void 0 === c.ApiHelpers
                        ? void 0
                        : c.ApiHelpers.instance) &&
                        c.ApiHelpers.setInstance(this.api_helpers_store),
                      this.showDigitalOptionsMaltainvestError();
                    let a =
                        null === c.ApiHelpers || void 0 === c.ApiHelpers
                          ? void 0
                          : null === (t = c.ApiHelpers.instance) || void 0 === t
                          ? void 0
                          : t.active_symbols,
                      o =
                        null === c.ApiHelpers || void 0 === c.ApiHelpers
                          ? void 0
                          : null === (n = c.ApiHelpers.instance) || void 0 === n
                          ? void 0
                          : n.contracts_for;
                    (null === c.ApiHelpers || void 0 === c.ApiHelpers
                      ? void 0
                      : c.ApiHelpers.instance) &&
                      a &&
                      o &&
                      ((null === (i = window.Blockly) || void 0 === i
                        ? void 0
                        : i.derivWorkspace) &&
                        (null == a ||
                          a.retrieveActiveSymbols(!0).then(() => {
                            var e;
                            o.disposeCache(),
                              null === (e = window.Blockly) ||
                                void 0 === e ||
                                e.derivWorkspace
                                  .getAllBlocks()
                                  .filter(
                                    (e) => "trade_definition_market" === e.type
                                  )
                                  .forEach((e) => {
                                    (0, c.runIrreversibleEvents)(() => {
                                      let t =
                                        new window.Blockly.Events.BlockCreate(
                                          e
                                        );
                                      window.Blockly.Events.fire(t);
                                    });
                                  });
                          })),
                      c.DBot.initializeInterpreter());
                  }
                );
              }),
              (0, s._)(this, "registerLandingCompanyChangeReaction", () => {
                let { client: e } = this.core;
                this.disposeLandingCompanyChangeReaction = (0, r.U5)(
                  () => e.landing_company_shortcode,
                  () => this.handleErrorForEu()
                );
              }),
              (0, s._)(this, "registerResidenceChangeReaction", () => {
                let { client: e } = this.core;
                this.disposeResidenceChangeReaction = (0, r.U5)(
                  () => {
                    var t;
                    return null === (t = e.account_settings) || void 0 === t
                      ? void 0
                      : t.country_code;
                  },
                  () => this.handleErrorForEu()
                );
              }),
              (0, s._)(this, "setDBotEngineStores", () => {
                let {
                    flyout: e,
                    toolbar: t,
                    save_modal: n,
                    dashboard: i,
                    load_modal: a,
                    run_panel: o,
                    blockly_store: s,
                    summary_card: r,
                  } = this.root_store,
                  { client: l, common: d } = this.core,
                  { handleFileChange: u } = a,
                  { setLoading: h } = s,
                  { setContractUpdateConfig: p } = r,
                  {
                    ui: { is_mobile: m },
                  } = this.core;
                (this.dbot_store = {
                  client: l,
                  flyout: e,
                  toolbar: t,
                  save_modal: n,
                  dashboard: i,
                  load_modal: a,
                  run_panel: o,
                  setLoading: h,
                  setContractUpdateConfig: p,
                  handleFileChange: u,
                  is_mobile: m,
                  common: d,
                }),
                  (this.api_helpers_store = {
                    server_time: this.core.common.server_time,
                    ws: c.api_base.api,
                  });
              }),
              (0, s._)(this, "onClickOutsideBlockly", (e) => {
                if (
                  document.querySelector(".injectionDiv") &&
                  !(e.path || (e.composedPath && e.composedPath())).some(
                    (e) => e.classList && e.classList.contains("injectionDiv")
                  )
                ) {
                  var t;
                  null === (t = window.Blockly) ||
                    void 0 === t ||
                    t.hideChaff(!1);
                }
              }),
              (0, s._)(this, "showDigitalOptionsMaltainvestError", () => {
                this.handleErrorForEu(!0);
              }),
              (0, r.rC)(this, {
                onMount: r.aD,
                onUnmount: r.aD,
                registerCurrencyReaction: r.aD,
                registerOnAccountSwitch: r.aD,
                registerLandingCompanyChangeReaction: r.aD,
                registerResidenceChangeReaction: r.aD,
                setDBotEngineStores: r.aD,
                onClickOutsideBlockly: r.aD,
                showDigitalOptionsMaltainvestError: r.aD,
              }),
              (this.root_store = e),
              (this.core = t),
              (this.dbot_store = null),
              (this.api_helpers_store = null),
              (this.timer = null);
          }
        }
        var m = n("24335"),
          _ = n("58902");
        class f {
          constructor(e) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "is_loading", !1),
              (0, s._)(this, "active_tab", m.yj.WORKSPACE),
              (0, s._)(this, "setActiveTab", (e) => {
                (this.active_tab = e), (0, _.Jp)("active_tab", this.active_tab);
              }),
              (0, s._)(this, "setContainerSize", () => {
                this.active_tab === m.yj.WORKSPACE &&
                  (0, c.onWorkspaceResize)();
              }),
              (0, s._)(this, "onMount", () => {
                window.addEventListener("resize", this.setContainerSize);
              }),
              (0, s._)(this, "getCachedActiveTab", () => {
                (0, _.$8)("active_tab") &&
                  (this.active_tab = (0, _.$8)("active_tab"));
              }),
              (0, s._)(this, "onUnmount", () => {
                window.removeEventListener("resize", this.setContainerSize);
              }),
              (0, s._)(this, "setLoading", (e) => {
                this.is_loading = e;
              }),
              (0, r.rC)(this, {
                is_loading: r.LO,
                active_tab: r.LO,
                setLoading: r.aD,
                setActiveTab: r.aD,
              }),
              (this.root_store = e);
          }
        }
        class b {
          get is_contract_ended() {
            let { transactions: e } = this.root_store;
            return e.contracts.length > 0 && e.contracts[0].is_ended;
          }
          constructor(e) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "subscription", { id: null, subscriber: null }),
              (0, s._)(this, "chart_subscription_id", ""),
              (0, s._)(this, "symbol", void 0),
              (0, s._)(this, "is_chart_loading", void 0),
              (0, s._)(this, "chart_type", void 0),
              (0, s._)(this, "granularity", void 0),
              (0, s._)(this, "onStartBot", () => {
                this.updateSymbol();
              }),
              (0, s._)(this, "onStopBot", () => {}),
              (0, s._)(this, "updateSymbol", () => {
                var e;
                let t = window.Blockly.derivWorkspace,
                  n =
                    null == t
                      ? void 0
                      : t
                          .getAllBlocks()
                          .find((e) => "trade_definition_market" === e.type),
                  i =
                    (null == n ? void 0 : n.getFieldValue("SYMBOL_LIST")) ??
                    (null === c.api_base || void 0 === c.api_base
                      ? void 0
                      : null === (e = c.api_base.active_symbols["0"]) ||
                        void 0 === e
                      ? void 0
                      : e.symbol);
                this.symbol = i;
              }),
              (0, s._)(this, "onSymbolChange", (e) => {
                (this.symbol = e), this.saveToLocalStorage();
              }),
              (0, s._)(this, "updateGranularity", (e) => {
                (this.granularity = e), this.saveToLocalStorage();
              }),
              (0, s._)(this, "updateChartType", (e) => {
                (this.chart_type = e), this.saveToLocalStorage();
              }),
              (0, s._)(this, "setChartStatus", (e) => {
                this.is_chart_loading = e;
              }),
              (0, s._)(this, "saveToLocalStorage", () => {
                d.j73.set(
                  "bot.chart_props",
                  JSON.stringify({
                    symbol: this.symbol,
                    granularity: this.granularity,
                    chart_type: this.chart_type,
                  })
                );
              }),
              (0, s._)(this, "restoreFromStorage", () => {
                try {
                  let e = d.j73.get("bot.chart_props");
                  if (e) {
                    let {
                      symbol: t,
                      granularity: n,
                      chart_type: i,
                    } = JSON.parse(e);
                    (this.symbol = t),
                      (this.granularity = n),
                      (this.chart_type = i);
                  } else (this.granularity = 0), (this.chart_type = "line");
                } catch {
                  d.j73.remove("bot.chart_props");
                }
              }),
              (0, s._)(this, "getMarketsOrder", (e) => {
                let t = "synthetic_index",
                  n = !!e.find((e) => e.market === t);
                return e
                  .slice()
                  .sort((e, t) => (e.display_name < t.display_name ? -1 : 1))
                  .map((e) => e.market)
                  .reduce(
                    (e, t) => (-1 === e.indexOf(t) && e.push(t), e),
                    n ? [t] : []
                  );
              }),
              (0, s._)(this, "setChartSubscriptionId", (e) => {
                this.chart_subscription_id = e;
              }),
              (0, r.rC)(this, {
                symbol: r.LO,
                is_chart_loading: r.LO,
                chart_type: r.LO,
                granularity: r.LO,
                is_contract_ended: r.Fl,
                updateSymbol: r.aD,
                onSymbolChange: r.aD,
                updateGranularity: r.aD,
                updateChartType: r.aD,
                setChartStatus: r.aD,
                restoreFromStorage: r.aD,
                chart_subscription_id: r.LO,
                setChartSubscriptionId: r.aD,
              }),
              (this.root_store = e);
            let { run_panel: t } = e;
            (0, r.U5)(
              () => t.is_running,
              () => (t.is_running ? this.onStartBot() : this.onStopBot())
            ),
              this.restoreFromStorage();
          }
        }
        var y = n("29656"),
          v = n("89064");
        let g = /^maltainvest$/,
          k = /^mt$/;
        class w {
          get active_accounts() {
            return this.accounts instanceof Object
              ? Object.values(this.accounts).filter((e) => !e.is_disabled)
              : [];
          }
          get clients_country() {
            var e;
            return null === (e = this.website_status) || void 0 === e
              ? void 0
              : e.clients_country;
          }
          get is_bot_allowed() {
            return this.isBotAllowed();
          }
          get is_trading_experience_incomplete() {
            var e, t;
            return null === (t = this.account_status) || void 0 === t
              ? void 0
              : null === (e = t.status) || void 0 === e
              ? void 0
              : e.some((e) => "trading_experience_not_complete" === e);
          }
          get is_eu() {
            if (!this.landing_companies) return !1;
            let {
                gaming_company: e,
                financial_company: t,
                mt_gaming_company: n,
              } = this.landing_companies,
              i = null == t ? void 0 : t.shortcode,
              a = null == e ? void 0 : e.shortcode,
              o =
                (null == n ? void 0 : n.financial.shortcode) ||
                (null == n ? void 0 : n.swap_free.shortcode);
            return (
              "maltainvest" === this.landing_company_shortcode ||
              (i || a || o
                ? (g.test(i) && "svg" !== a) || g.test(a)
                : k.test(this.residence))
            );
          }
          get is_eu_country() {
            var e;
            let t =
              null === (e = this.website_status) || void 0 === e
                ? void 0
                : e.clients_country;
            return !!t && (0, y.x3)(t);
          }
          get is_low_risk() {
            let { gaming_company: e, financial_company: t } =
              this.landing_companies ?? {};
            return (
              (null == t ? void 0 : t.shortcode) === "maltainvest" &&
              (null == e ? void 0 : e.shortcode) === "svg"
            );
          }
          get should_show_eu_error() {
            return (
              !!this.is_landing_company_loaded &&
              this.is_eu &&
              !this.is_low_risk
            );
          }
          get landing_company_shortcode() {
            if (this.accounts[this.loginid])
              return this.accounts[this.loginid].landing_company_name;
          }
          get residence() {
            if (this.is_logged_in) {
              var e;
              return (
                (null === (e = this.account_settings) || void 0 === e
                  ? void 0
                  : e.country_code) ?? ""
              );
            }
            return "";
          }
          get is_options_blocked() {
            return (0, y.Yb)(this.residence);
          }
          get is_multipliers_only() {
            return (0, y.uw)(this.residence);
          }
          get is_eu_or_multipliers_only() {
            return this.is_multipliers_only
              ? !this.is_multipliers_only
              : !(0, y.x3)(this.residence);
          }
          get is_virtual() {
            return (
              !(0, d.Qr$)(this.accounts) &&
              this.accounts[this.loginid] &&
              !!this.accounts[this.loginid].is_virtual
            );
          }
          get all_loginids() {
            return (0, d.Qr$)(this.accounts) ? [] : Object.keys(this.accounts);
          }
          get virtual_account_loginid() {
            return this.all_loginids.find((e) => !!this.accounts[e].is_virtual);
          }
          get content_flag() {
            let {
              is_logged_in: e,
              landing_companies: t,
              residence: n,
              is_landing_company_loaded: i,
            } = this;
            if (i) {
              let { financial_company: i, gaming_company: a } = t ?? {},
                o =
                  (null == i ? void 0 : i.shortcode) === "svg" ||
                  (null == a ? void 0 : a.shortcode) === "svg";
              if (!e) return "";
              if (
                (null == a ? void 0 : a.shortcode) ||
                (null == i ? void 0 : i.shortcode) !== "maltainvest"
              ) {
                if (
                  (null == i ? void 0 : i.shortcode) !== "maltainvest" ||
                  (null == a ? void 0 : a.shortcode) !== "svg" ||
                  this.is_virtual
                ) {
                  if (
                    (((null == i ? void 0 : i.shortcode) === "svg" &&
                      (null == a ? void 0 : a.shortcode) === "svg") ||
                      o) &&
                    !this.is_virtual
                  )
                    return d.DQA.HIGH_RISK_CR;
                } else
                  return this.is_eu
                    ? d.DQA.LOW_RISK_CR_EU
                    : d.DQA.LOW_RISK_CR_NON_EU;
              } else return this.is_virtual ? d.DQA.EU_DEMO : d.DQA.EU_REAL;
              if ((0, y.x3)(n))
                return this.is_virtual ? d.DQA.EU_DEMO : d.DQA.EU_REAL;
              if (this.is_virtual) return d.DQA.CR_DEMO;
            }
            return d.DQA.LOW_RISK_CR_NON_EU;
          }
          get is_cr_account() {
            var e;
            return null === (e = this.loginid) || void 0 === e
              ? void 0
              : e.startsWith("CR");
          }
          get account_open_date() {
            if (!(0, d.Qr$)(this.accounts) && this.accounts[this.loginid])
              return Object.keys(this.accounts[this.loginid]).includes(
                "created_at"
              )
                ? this.accounts[this.loginid].created_at
                : void 0;
          }
          setAccountStatus(e) {
            this.account_status = e;
          }
          setAccountSettings(e) {
            try {
              JSON.stringify(e) !== JSON.stringify(this.account_settings) &&
                (this.account_settings = e);
            } catch (e) {
              console.error("setAccountSettings error", e);
            }
          }
          setWebsiteStatus(e) {
            this.website_status = e;
          }
          setLandingCompany(e) {
            (this.landing_companies = e), (this.is_landing_company_loaded = !0);
          }
          constructor() {
            (0, s._)(this, "loginid", ""),
              (0, s._)(this, "account_list", []),
              (0, s._)(this, "balance", "0"),
              (0, s._)(this, "currency", "AUD"),
              (0, s._)(this, "is_logged_in", !1),
              (0, s._)(this, "account_status", void 0),
              (0, s._)(this, "account_settings", void 0),
              (0, s._)(this, "website_status", void 0),
              (0, s._)(this, "landing_companies", void 0),
              (0, s._)(this, "upgradeable_landing_companies", []),
              (0, s._)(this, "accounts", {}),
              (0, s._)(this, "is_landing_company_loaded", !1),
              (0, s._)(this, "all_accounts_balance", null),
              (0, s._)(this, "is_logging_out", !1),
              (0, s._)(this, "updateSelfExclusion", () => {}),
              (0, s._)(this, "isBotAllowed", () => {
                if (!this.is_logged_in && this.is_eu_country) return !1;
                let e = "maltainvest" === this.landing_company_shortcode;
                return this.is_virtual
                  ? this.is_eu_or_multipliers_only
                  : !e && !this.is_options_blocked;
              }),
              (0, s._)(this, "setLoginId", (e) => {
                this.loginid = e;
              }),
              (0, s._)(this, "setAccountList", (e) => {
                (this.accounts = {}),
                  null == e ||
                    e.forEach((e) => {
                      this.accounts[e.loginid] = e;
                    }),
                  e && (this.account_list = e);
              }),
              (0, s._)(this, "setBalance", (e) => {
                this.balance = e;
              }),
              (0, s._)(this, "setCurrency", (e) => {
                this.currency = e;
              }),
              (0, s._)(this, "setIsLoggedIn", (e) => {
                this.is_logged_in = e;
              }),
              (0, s._)(
                this,
                "getToken",
                () =>
                  JSON.parse(localStorage.getItem("accountsList") ?? "{}")[
                    this.loginid
                  ] ?? ""
              ),
              (0, s._)(this, "setUpgradeableLandingCompanies", (e) => {
                this.upgradeable_landing_companies = e;
              }),
              (0, s._)(this, "setAllAccountsBalance", (e) => {
                this.all_accounts_balance = e ?? null;
              }),
              (0, s._)(this, "setIsLoggingOut", (e) => {
                this.is_logging_out = e;
              }),
              (0, s._)(this, "logout", () => {
                var e, t, n;
                (this.account_list = []),
                  (this.account_status = void 0),
                  (this.account_settings = void 0),
                  (this.landing_companies = void 0),
                  (this.accounts = {}),
                  (this.is_logged_in = !1),
                  (this.loginid = ""),
                  (this.balance = "0"),
                  (this.currency = "USD"),
                  (this.is_landing_company_loaded = !1),
                  (this.all_accounts_balance = null),
                  localStorage.removeItem("active_loginid"),
                  localStorage.removeItem("accountsList"),
                  localStorage.removeItem("authToken"),
                  localStorage.removeItem("clientAccounts"),
                  (0, v.Zc)(!1),
                  (0, v.Ii)([]),
                  (0, v.A3)(null),
                  this.setIsLoggingOut(!1),
                  null === (t = window.LC_API) ||
                    void 0 === t ||
                    null === (e = t.close_chat) ||
                    void 0 === e ||
                    e.call(t),
                  null === (n = window.LiveChatWidget) ||
                    void 0 === n ||
                    n.call("hide"),
                  window.Intercom &&
                    (window.Intercom("shutdown"),
                    window.DerivInterCom.initialize({
                      hideLauncher: !0,
                      token: null,
                    }));
              }),
              (0, r.rC)(this, {
                account_list: r.LO,
                account_settings: r.LO,
                account_status: r.LO,
                all_accounts_balance: r.LO,
                balance: r.LO,
                currency: r.LO,
                is_landing_company_loaded: r.LO,
                is_logged_in: r.LO,
                landing_companies: r.LO,
                loginid: r.LO,
                upgradeable_landing_companies: r.LO,
                website_status: r.LO,
                is_logging_out: r.LO,
                active_accounts: r.Fl,
                clients_country: r.Fl,
                is_bot_allowed: r.Fl,
                is_eu: r.Fl,
                is_eu_country: r.Fl,
                is_eu_or_multipliers_only: r.Fl,
                is_low_risk: r.Fl,
                is_multipliers_only: r.Fl,
                is_options_blocked: r.Fl,
                is_virtual: r.Fl,
                landing_company_shortcode: r.Fl,
                residence: r.Fl,
                should_show_eu_error: r.Fl,
                logout: r.aD,
                setAccountList: r.aD,
                setAccountSettings: r.aD,
                setAccountStatus: r.aD,
                setAllAccountsBalance: r.aD,
                setBalance: r.aD,
                setCurrency: r.aD,
                setIsLoggedIn: r.aD,
                setIsLoggingOut: r.aD,
                setLandingCompany: r.aD,
                setLoginId: r.aD,
                setWebsiteStatus: r.aD,
                setUpgradeableLandingCompanies: r.aD,
                is_trading_experience_incomplete: r.Fl,
                is_cr_account: r.Fl,
                account_open_date: r.Fl,
              });
          }
        }
        var T = n("30381"),
          C = n.n(T),
          E = n("27179");
        class N {
          constructor() {
            (0, s._)(this, "server_time", (0, E.gb)()),
              (0, s._)(this, "update_time_interval", void 0),
              (0, s._)(this, "current_language", ""),
              (0, s._)(this, "is_socket_opened", !1),
              (0, s._)(this, "error", void 0),
              (0, s._)(this, "has_error", !1),
              (0, s._)(this, "setCurrentLanguage", (e) => {
                this.current_language = e;
              }),
              (0, s._)(this, "setServerTime", (e, t) => {
                !t &&
                  ((this.server_time = e),
                  this.update_time_interval &&
                    clearInterval(this.update_time_interval),
                  (this.update_time_interval = setInterval(
                    () => this.updateServerTime(),
                    1e3
                  )));
              }),
              (0, s._)(this, "updateServerTime", () => {
                this.server_time = C()(this.server_time).add(
                  1e3,
                  "milliseconds"
                );
              }),
              (0, s._)(this, "setSocketOpened", (e) => {
                this.is_socket_opened = e;
              }),
              (0, s._)(this, "setError", (e, t) => {
                (this.has_error = e),
                  (this.error = e
                    ? {
                        type: t ? t.type : "info",
                        ...(t && {
                          header: t.header,
                          message: t.message,
                          redirect_label: t.redirect_label,
                          redirectOnClick: t.redirectOnClick,
                          should_show_refresh: t.should_show_refresh,
                          redirect_to: t.redirect_to,
                          should_clear_error_on_click:
                            t.should_clear_error_on_click,
                          should_redirect: t.should_redirect,
                          setError: this.setError,
                        }),
                      }
                    : void 0);
              }),
              (0, s._)(this, "showError", (e) => {
                let {
                  message: t,
                  header: n,
                  redirect_label: i,
                  redirectOnClick: a,
                  should_show_refresh: o,
                  redirect_to: s,
                  should_clear_error_on_click: r,
                  should_redirect: l,
                } = e;
                this.setError(!0, {
                  header: n,
                  message: t,
                  redirect_label: i,
                  redirectOnClick: a,
                  should_show_refresh: o,
                  redirect_to: s,
                  should_clear_error_on_click: r,
                  type: "error",
                  should_redirect: l,
                });
              }),
              (0, r.rC)(this, {
                current_language: r.LO,
                server_time: r.LO,
                is_socket_opened: r.LO,
                error: r.LO,
                has_error: r.LO,
                setServerTime: r.aD,
                updateServerTime: r.aD,
                setCurrentLanguage: r.aD,
                setSocketOpened: r.aD,
                setError: r.aD,
                showError: r.aD,
              });
          }
        }
        var x = n("27856"),
          A = n.n(x),
          S = n("64736"),
          O = n("59462"),
          I = n("68853"),
          D = n("64376"),
          R = n("84006");
        class L {
          get is_dark_mode() {
            let {
              app: {
                core: {
                  ui: { is_dark_mode_on: e },
                },
              },
            } = this.root_store;
            return e;
          }
          initInfoPanel() {
            !localStorage.getItem("dbot_should_show_info") &&
              (this.is_info_panel_visible = !0);
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "tutorials_combined_content", []),
              (0, s._)(this, "combined_search", []),
              (0, s._)(this, "active_tab", 0),
              (0, s._)(this, "active_tab_tutorials", 0),
              (0, s._)(this, "active_tour_step_number", 0),
              (0, s._)(this, "dialog_options", {}),
              (0, s._)(this, "faq_search_value", ""),
              (0, s._)(this, "getFileArray", []),
              (0, s._)(this, "has_file_loaded", !1),
              (0, s._)(this, "has_mobile_preview_loaded", !1),
              (0, s._)(this, "active_tour", ""),
              (0, s._)(this, "is_dialog_open", !1),
              (0, s._)(this, "is_file_supported", !1),
              (0, s._)(this, "is_info_panel_visible", !1),
              (0, s._)(this, "is_preview_on_popup", !1),
              (0, s._)(this, "is_tour_dialog_visible", !1),
              (0, s._)(this, "show_toast", !1),
              (0, s._)(this, "show_mobile_tour_dialog", !1),
              (0, s._)(this, "strategy_save_type", "unsaved"),
              (0, s._)(this, "toast_message", ""),
              (0, s._)(this, "is_web_socket_intialised", !0),
              (0, s._)(this, "search_param", ""),
              (0, s._)(this, "guide_tab_content", D.xH),
              (0, s._)(this, "video_tab_content", D.zw),
              (0, s._)(this, "faq_tab_content", D.Mq),
              (0, s._)(this, "quick_strategy_tab_content", D.Yk),
              (0, s._)(this, "filtered_tab_list", []),
              (0, s._)(this, "is_chart_modal_visible", !1),
              (0, s._)(this, "is_trading_view_modal_visible", !1),
              (0, s._)(this, "faq_title", ""),
              (0, s._)(this, "setFaqTitle", (e) => {
                this.faq_title = e;
              }),
              (0, s._)(this, "resetTutorialTabContent", () => {
                (this.guide_tab_content = D.xH),
                  (this.video_tab_content = D.zw),
                  (this.faq_tab_content = D.Mq),
                  (this.quick_strategy_tab_content = D.Yk);
              }),
              (0, s._)(this, "filterTuotrialTab", (e) => {
                this.search_param = e;
                let t = this.combined_search.filter((t) =>
                    t.includes(null == e ? void 0 : e.toLowerCase())
                  ),
                  n = [],
                  i = [],
                  a = [],
                  o = [],
                  s = t.map((e) => {
                    let t = e.split("#")[0],
                      s = t.split("-")[1];
                    if (t.includes(D.Qb))
                      return (
                        n.push((0, D.xH)()[Number(s)]), (0, D.xH)()[Number(s)]
                      );
                    if (t.includes(D.FM))
                      return (
                        i.push((0, D.zw)()[Number(s)]), (0, D.zw)()[Number(s)]
                      );
                    if (t.includes("faq"))
                      return (
                        a.push((0, D.Mq)()[Number(s)]), (0, D.Mq)()[Number(s)]
                      );
                    return (
                      o.push((0, D.Yk)()[Number(s)]), (0, D.Yk)()[Number(s)]
                    );
                  });
                return (
                  (this.guide_tab_content = () => n),
                  (this.video_tab_content = () => i),
                  (this.faq_tab_content = () => a),
                  (this.quick_strategy_tab_content = () => o),
                  s
                );
              }),
              (0, s._)(this, "setShowMobileTourDialog", (e) => {
                this.show_mobile_tour_dialog = e;
              }),
              (0, s._)(this, "setWebSocketState", (e) => {
                this.is_web_socket_intialised = e;
              }),
              (0, s._)(this, "setOpenSettings", (e) => {
                (this.toast_message = e), (0, S.J)((0, O.xG)()[e]);
              }),
              (0, s._)(this, "setChartModalVisibility", () => {
                this.is_chart_modal_visible = !this.is_chart_modal_visible;
              }),
              (0, s._)(this, "setTradingViewModalVisibility", () => {
                this.is_trading_view_modal_visible =
                  !this.is_trading_view_modal_visible;
              }),
              (0, s._)(this, "setIsFileSupported", (e) => {
                this.is_file_supported = e;
              }),
              (0, s._)(this, "setTourActiveStep", (e) => {
                this.active_tour_step_number = e;
              }),
              (0, s._)(this, "setPreviewOnDialog", (e) => {
                this.has_mobile_preview_loaded = e;
                let {
                  load_modal: { onLoadModalClose: t },
                } = this.root_store;
                t();
              }),
              (0, s._)(this, "setStrategySaveType", (e) => {
                this.strategy_save_type = e;
              }),
              (0, s._)(this, "setPreviewOnPopup", (e) => {
                this.is_preview_on_popup = e;
              }),
              (0, s._)(this, "setTourDialogVisibility", (e) => {
                this.is_tour_dialog_visible = e;
              }),
              (0, s._)(this, "setActiveTour", (e) => {
                this.active_tour = e;
              }),
              (0, s._)(this, "setFileLoaded", (e) => {
                (this.has_file_loaded = e),
                  !document.getElementById(
                    "load-strategy__blockly-container"
                  ) &&
                    console.warn("Could not find preview workspace element.");
              }),
              (0, s._)(this, "onCloseDialog", () => {
                this.is_dialog_open = !1;
              }),
              (0, s._)(this, "setActiveTab", (e) => {
                (this.active_tab = e),
                  localStorage.setItem("active_tab", e.toString());
              }),
              (0, s._)(this, "setActiveTabTutorial", (e) => {
                this.active_tab_tutorials = e;
              }),
              (0, s._)(this, "setFAQSearchValue", (e) => {
                this.faq_search_value = e;
              }),
              (0, s._)(this, "showVideoDialog", (e) => {
                let { url: t, type: n = "" } = e;
                (this.faq_search_value = ""),
                  this.setActiveTabTutorial(0),
                  this.resetTutorialTabContent(),
                  ["google", "url"].includes(n)
                    ? ("url" === n && (this.dialog_options = { url: t }),
                      (this.is_dialog_open = !0))
                    : (this.is_dialog_open = !1);
              }),
              (0, s._)(this, "setInfoPanelVisibility", (e) => {
                this.is_info_panel_visible = e;
              }),
              (0, s._)(this, "onZoomInOutClick", (e) => {
                let t = window.Blockly.getMainWorkspace(),
                  n = t.getMetrics();
                t.zoom(n.viewWidth / 2, n.viewHeight / 2, e ? 1 : -1);
              }),
              (0, s._)(this, "onCloseTour", () => {
                (0, R.X7)(new Date().getTime(), `${R.pw.key}_token`),
                  this.setActiveTour("");
              }),
              (0, s._)(this, "setTourEnd", (e) => {
                let { key: t } = e;
                this.core.ui.is_mobile && this.setTourDialogVisibility(!0),
                  (0, R.X7)(new Date().getTime(), `${t}_token`);
              }),
              (0, s._)(this, "onTourEnd", (e, t) => {
                8 === e &&
                  (this.onCloseTour(),
                  this.setTourEnd(R.pw),
                  this.setActiveTour("")),
                  !t &&
                    3 === e &&
                    (this.onCloseTour(),
                    this.setTourEnd(R.pw),
                    this.setActiveTour(""));
              }),
              (0, r.rC)(this, {
                active_tab_tutorials: r.LO,
                active_tab: r.LO,
                dialog_options: r.LO,
                faq_search_value: r.LO,
                getFileArray: r.LO,
                has_file_loaded: r.LO,
                has_mobile_preview_loaded: r.LO,
                initInfoPanel: r.aD.bound,
                active_tour: r.LO,
                is_dialog_open: r.LO,
                is_file_supported: r.LO,
                is_info_panel_visible: r.LO,
                is_preview_on_popup: r.LO,
                is_tour_dialog_visible: r.LO,
                is_web_socket_intialised: r.LO,
                tutorials_combined_content: r.LO,
                onCloseDialog: r.aD.bound,
                onCloseTour: r.aD.bound,
                onTourEnd: r.aD.bound,
                setActiveTab: r.aD.bound,
                setActiveTabTutorial: r.aD.bound,
                setWebSocketState: r.aD.bound,
                setFAQSearchValue: r.aD.bound,
                faq_title: r.LO,
                setFaqTitle: r.aD.bound,
                setFileLoaded: r.aD.bound,
                setInfoPanelVisibility: r.aD.bound,
                setIsFileSupported: r.aD.bound,
                setPreviewOnDialog: r.aD.bound,
                setPreviewOnPopup: r.aD.bound,
                setActiveTour: r.aD.bound,
                setTourDialogVisibility: r.aD.bound,
                setOpenSettings: r.aD.bound,
                resetTutorialTabContent: r.aD.bound,
                filterTuotrialTab: r.aD.bound,
                show_toast: r.LO,
                show_mobile_tour_dialog: r.LO,
                showVideoDialog: r.aD.bound,
                strategy_save_type: r.LO,
                toast_message: r.LO,
                guide_tab_content: r.LO,
                faq_tab_content: r.LO,
                quick_strategy_tab_content: r.LO,
                video_tab_content: r.LO,
                setStrategySaveType: r.aD.bound,
                setShowMobileTourDialog: r.aD.bound,
                is_chart_modal_visible: r.LO,
                is_trading_view_modal_visible: r.LO,
              }),
              (this.root_store = e),
              (this.core = t);
            let n = [...(0, D.xH)()].map((e) => {
                var t;
                return `${e.search_id}# ${
                  null === (t = e.content) || void 0 === t
                    ? void 0
                    : t.toLowerCase()
                }`;
              }),
              i = [...(0, D.zw)()].map((e) => {
                var t;
                return `${e.search_id}# ${
                  null === (t = e.content) || void 0 === t
                    ? void 0
                    : t.toLowerCase()
                }`;
              }),
              a = (0, D.Mq)().map((e) => {
                var t;
                return `${e.search_id}# ${
                  null === (t = e.title) || void 0 === t
                    ? void 0
                    : t.toLowerCase()
                } ${e.description
                  .map((e) => {
                    let t = A().sanitize(e.content, { ALLOWED_TAGS: [] });
                    return null == t ? void 0 : t.toLowerCase();
                  })
                  .join(" ")}`;
              }),
              o = (e) => {
                if (!e) return [];
                let t = [];
                return (
                  e().forEach((e) => {
                    if ((null == e ? void 0 : e.type) !== "media") {
                      var n;
                      null === (n = e.content) ||
                        void 0 === n ||
                        n.forEach((e) => t.push(e));
                    }
                  }),
                  t
                );
              },
              l = (0, D.Yk)().map((e) => {
                var t, n, i;
                let a =
                    null === (t = e.content.join(" ")) || void 0 === t
                      ? void 0
                      : t.toLowerCase(),
                  s = o(null == I ? void 0 : I[e.qs_name]);
                return (
                  (s =
                    null === (n = s.join(" ")) || void 0 === n
                      ? void 0
                      : n.toLowerCase()),
                  `${e.search_id}# ${
                    null === (i = e.type) || void 0 === i
                      ? void 0
                      : i.toLowerCase()
                  } ${s + a}`
                );
              });
            (this.combined_search = [...n, ...i, ...a, ...l]),
              (0, r.U5)(
                () => this.is_preview_on_popup,
                async (e) => {
                  e && this.setPreviewOnPopup(!1);
                }
              ),
              this.initInfoPanel();
          }
        }
        var P = n("34606"),
          B = n.n(P);
        class U {
          async trackRun() {
            let e = this.cleanXmlDom(
                window.Blockly.Xml.workspaceToDom(c.DBot.workspace, !0)
              ),
              t = (0, c.convertStrategyToIsDbot)(e),
              n = window.Blockly.Xml.domToText(t),
              i = this.getHash(n);
            this.getHash(this.strategy_content) !== i &&
              ((this.should_post_xml = !0), this.setStrategyContent(n)),
              this.setRunId(
                this.getHash(i + this.core.client.loginid + Math.random())
              ),
              this.setRunStart(this.core.common.server_time.unix());
          }
          async trackTransaction(e) {
            let t = await n.e("867").then(n.bind(n, 19028)),
              i = e[0];
            if (!i) return;
            let { buy: a } = i.data.transaction_ids;
            if (!Object.keys(this.transaction_ids).includes(a.toString())) {
              this.transaction_ids[a] = this.IS_PENDING;
              fetch(
                `${this.endpoint}/${this.run_id}/${a}/${
                  this.run_start
                }/${this.getHash(this.strategy_content)}`,
                {
                  ...(this.should_post_xml
                    ? (() => ({
                        body: t.gzip(this.strategy_content),
                        headers: {
                          "Content-Encoding": "gzip",
                          "Content-Type": "application/xml",
                          Referer: window.location.hostname,
                        },
                      }))()
                    : {}),
                  method: "POST",
                  mode: "no-cors",
                }
              )
                .then(() => {
                  (this.should_post_xml = !1),
                    (this.transaction_ids[a] = this.IS_PROCESSED);
                })
                .catch(() => {
                  delete this.transaction_ids[a];
                });
            }
          }
          setRunId(e) {
            this.run_id = e;
          }
          setRunStart(e) {
            this.run_start = e;
          }
          setStrategyContent(e) {
            this.strategy_content = e;
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "IS_PENDING", !1),
              (0, s._)(this, "IS_PROCESSED", !0),
              (0, s._)(
                this,
                "endpoint",
                "https://dbot-conf-dot-deriv-bi-reporting.as.r.appspot.com/dbotconf"
              ),
              (0, s._)(this, "run_id", ""),
              (0, s._)(this, "run_start", 0),
              (0, s._)(this, "should_post_xml", !0),
              (0, s._)(this, "strategy_content", ""),
              (0, s._)(this, "transaction_ids", {}),
              (0, s._)(this, "cleanXmlDom", (e) => {
                let t = ["x", "y", "id"],
                  n = (0, d.kIu)(e),
                  i = (e) => {
                    t.forEach((t) => e.removeAttribute(t)),
                      Array.from(e.children).forEach((e) => i(e));
                  };
                return i(n), n;
              }),
              (0, s._)(this, "getHash", (e) => btoa(String(B().str(e)))),
              (0, r.rC)(this, {
                IS_PENDING: r.LO,
                IS_PROCESSED: r.LO,
                endpoint: r.LO,
                run_id: r.LO,
                run_start: r.LO,
                should_post_xml: r.LO,
                strategy_content: r.LO,
                transaction_ids: r.LO,
                trackRun: r.aD.bound,
                trackTransaction: r.aD.bound,
                setRunId: r.aD.bound,
                setRunStart: r.aD.bound,
                setStrategyContent: r.aD.bound,
                cleanXmlDom: r.aD.bound,
                getHash: r.aD.bound,
              }),
              (this.root_store = e),
              (this.core = t),
              ((0, d.yvY)() ||
                /(.*?)\.binary.sx$/.test(window.location.hostname)) &&
                ((this.root_store = e),
                (0, r.U5)(
                  () => this.root_store.run_panel.is_running,
                  () =>
                    this.root_store.run_panel.is_running
                      ? this.trackRun()
                      : void 0
                ),
                (0, r.U5)(
                  () => this.root_store.transactions.transactions,
                  (e) => {
                    this.run_id && this.trackTransaction(e);
                  }
                ));
          }
        }
        var M = n("69103");
        let j = {
            text: () => [
              (0, h.NC)(
                "This block is mandatory. Here is where you can decide if your bot should continue trading. Only one copy of this block is allowed."
              ),
              (0, h.NC)(
                "This block is commonly used to adjust the parameters of your next trade and to implement stop loss/take profit logic."
              ),
            ],
          },
          F = {
            text: () => [
              (0, h.NC)("This block returns current account balance."),
              (0, h.NC)(
                'The only input parameter determines how block output is going to be formatted. In case if the input parameter is "string" then the account currency will be added.'
              ),
              (0, h.NC)("Example output of the below example will be:"),
              (0, h.NC)('1. for "string": 1325.68 USD'),
              (0, h.NC)('2. for "number": 1325.68'),
            ],
          },
          V = {
            text: () => [
              (0, h.NC)(
                "This block is mandatory. Only one copy of this block is allowed. It is added to the canvas by default when you open Oruchotrader."
              ),
              (0, h.NC)(
                "After defining trade parameters and trade options, you may want to instruct your bot to purchase contracts when specific conditions are met. To do that you can use conditional blocks and indicators blocks to help your bot to make decisions."
              ),
            ],
          },
          G = {
            text: () => [
              (0, h.NC)(
                'This block is used to determine if the market price moves in the selected direction or not. It gives you a value of "True" or "False".'
              ),
              (0, h.NC)("Examples:"),
              (0, h.NC)(
                '1. If the selected direction is "Rise", and the previous tick value is less than the current tick value, the output will be "True". Otherwise, the output will be an empty string.'
              ),
              (0, h.NC)(
                '2. If the selected direction is "Fall", and the previous tick value is more than the current tick value, the output will be "True". Otherwise, the output will be an empty string.'
              ),
            ],
          },
          Y = {
            text: () => [
              (0, h.NC)(
                "This block displays messages in the developer’s console with an input that can be either a string of text, a number, boolean, or an array of data."
              ),
              (0, h.NC)("There are 4 message types:"),
              (0, h.NC)("1. 'Log' displays a regular message."),
              (0, h.NC)(
                "2. 'Warn' displays a message in yellow to highlight something that needs attention."
              ),
              (0, h.NC)(
                "3. 'Error' displays a message in red to highlight something that needs to be resolved immediately."
              ),
              (0, h.NC)(
                "4. 'Table' takes an array of data, such as a list of candles, and displays it in a table format."
              ),
            ],
          },
          X = {
            text: () => [
              (0, h.NC)(
                'You can check the result of the last trade with this block. It can only be placed within the "Restart trading conditions" root block.'
              ),
              (0, h.NC)(
                'If "Win" is selected, it will return "True" if your last trade was successful. Otherwise, it will return an empty string.'
              ),
              (0, h.NC)(
                'If "Loss" is selected, it will return "True" if your last trade was unsuccessful. Otherwise, it will return an empty string.'
              ),
              (0, h.NC)("Example:"),
            ],
          },
          W = {
            text: () => [
              (0, h.NC)(
                "This block is used to either terminate or continue a loop, and can be placed anywhere within a loop block."
              ),
              (0, h.NC)("Examples:"),
              (0, h.NC)(
                '1. In the below example the loop is terminated in case "x" is "False" even though only one iteration is complete'
              ),
              (0, h.NC)(
                '2. In the below example the loop jumps to the next iteration without executing below block in case if "x" is "False"'
              ),
            ],
          },
          H = {
            text: () => [
              (0, h.NC)(
                'This block uses the variable "i" to control the iterations. With each iteration, the value of "i" is determined by the items in a given list.'
              ),
              (0, h.NC)("Example:"),
              (0, h.NC)(
                '"i" starts with the value of 1, and it will be increased by 2 at every iteration. The loop will repeat until "i" reaches the value of 12, and then the loop is terminated.'
              ),
              (0, h.NC)(
                'You can use "i" inside the loop, for example to access list items'
              ),
            ],
          },
          $ = {
            text: () => [
              (0, h.NC)(
                'This block uses the variable "i" to control the iterations. With each iteration, the value of "i" is determined by the items in a given list.'
              ),
              (0, h.NC)("Example:"),
              (0, h.NC)(
                'In this example, the loop will repeat three times, as that is the number of items in the given list. During each iteration, the variable "i" will be assigned a value from the list. '
              ),
              (0, h.NC)(
                'Please note that changing the value of "i" won\'t change the value of the original item in the list'
              ),
            ],
          },
          K = {
            text: () => [
              (0, h.NC)(
                "This block evaluates a statement and will perform an action only when the statement is true."
              ),
              (0, h.NC)(
                "Click the plus icon to extend the functionality of this block."
              ),
              (0, h.NC)(
                'You can also use "Compare" and "Logic operation" blocks to make test variables.'
              ),
            ],
          },
          q = {
            text: () => [
              (0, h.NC)(
                "This block repeats instructions as long as a given condition is true."
              ),
              (0, h.NC)("Examples:"),
              (0, h.NC)(
                "1. In the example below, the instructions are repeated as long as the value of x is less than or equal to 10. Once the value of x exceeds 10, the loop is terminated."
              ),
              (0, h.NC)(
                "2. In this example, the instructions are repeated as long as the value of x is greater than or equal to 10. Once the value of x drops below 10, the loop is terminated."
              ),
            ],
          },
          z = {
            text: () => [
              (0, h.NC)(
                "Here is where you can decide to sell your contract before it expires. Only one copy of this block is allowed."
              ),
              (0, h.NC)("Example:"),
            ],
          },
          J = {
            text: () => [
              (0, h.NC)(
                '"Seconds Since Epoch" block returns the number of seconds since January 1st, 1970.'
              ),
              (0, h.NC)("Example:"),
              (0, h.NC)(
                "1551661986 seconds since Jan 01 1970 (UTC) translates to 03/04/2019 @ 1:13am (UTC)."
              ),
              (0, h.NC)(
                "You might need it when you want to repeat an actions after certain amount of time."
              ),
              (0, h.NC)(
                "The example below restarts trading after 30 or more seconds after 1 minute candle was started."
              ),
            ],
          },
          Z = {
            text: () => [
              (0, h.NC)(
                "This block gives you a specific candle from within the selected time interval."
              ),
              (0, h.NC)(
                'In this example, the open price of a candle is assigned to the variable "candle_open_price".'
              ),
              (0, h.NC)(
                "In the above example it is assumed that variable candle_open_price is processed somewhere within other blocks."
              ),
            ],
          },
          Q = {
            text: () => [
              (0, h.NC)(
                'This block returns "True" if the last candle is black. It can be placed anywhere on the canvas except within the Trade parameters root block.'
              ),
              (0, h.NC)(
                'The term "candle" refers to each bar on the candlestick chart. Each candle represents four market prices for the selected time interval:'
              ),
              (0, h.NC)(
                "Each candlestick on the chart represents 4 market prices for the selected time interval:"
              ),
              (0, h.NC)("- Open price: the opening price"),
              (0, h.NC)("- High price: the highest price"),
              (0, h.NC)("- Low price: the lowest price"),
              (0, h.NC)("- Close price: the closing price"),
              (0, h.NC)(
                "A black (or red) candle indicates that the open price is higher than the close price. This represents a downward movement of the market price."
              ),
              (0, h.NC)(
                "A white (or green) candle indicates that the open price is lower than the close price. This represents an upward movement of the market price."
              ),
              (0, h.NC)(
                "The time interval for each candle can be set from one minute to one day."
              ),
            ],
          },
          ee = {
            text: () => [
              (0, h.NC)(
                "This block gives you the last digit of the latest tick value of the selected market. If the latest tick value is 1410.90, this block will return 0. It’s useful for digit-based contracts such as Even/Odd, Matches/Differs, or Higher/Lower."
              ),
            ],
          },
          et = {
            text: () => [
              (0, h.NC)(
                'This block performs the "AND" or the "OR" logic operation with the given values.'
              ),
              (0, h.NC)(
                'In case if the "AND" operation is selected, the block returns "True" only if both given values are "True"'
              ),
              (0, h.NC)(
                'In case if the "OR" operation is selected, the block returns "True" in case if one or both given values are "True"'
              ),
            ],
          },
          en = {
            text: () => [
              (0, h.NC)(
                "This block performs arithmetic operations between two numbers."
              ),
              (0, h.NC)("Available operations:"),
              (0, h.NC)("- Addition"),
              (0, h.NC)("- Subtraction"),
              (0, h.NC)("- Multiplication"),
              (0, h.NC)("- Division"),
              (0, h.NC)(
                "- Raise the first number to the power of the second number"
              ),
            ],
          },
          ei = {
            text: () => [
              (0, h.NC)(
                "This block constrains a given number within a set range."
              ),
              (0, h.NC)(
                "In case if the given number is less than the lower boundary of the range, the block returns the lower boundary value. Similarly, if the given number is greater than the higher boundary, the block will return the higher boundary value. In case if the given value is between boundaries, the block will return the given value unchanged."
              ),
              (0, h.NC)(
                "In the below example the block returns the value of 10 as the given value (5) is less than the lower boundary (10)"
              ),
            ],
          },
          ea = {
            text: () => [
              (0, h.NC)(
                "This block performs the following operations to a given number"
              ),
              (0, h.NC)("Available operations are:"),
              (0, h.NC)("- Square root"),
              (0, h.NC)("- Absolute"),
              (0, h.NC)("- Negation"),
              (0, h.NC)("- Natural log"),
              (0, h.NC)(
                "- Euler’s number (2.71) to the power of a given number"
              ),
              (0, h.NC)("- 10 to the power of a given number"),
            ],
          },
          eo = {
            text: () => [
              (0, h.NC)(
                "This block sends a message to a Telegram channel. You will need to create your own Telegram bot to use this block."
              ),
              (0, h.NC)("Here’s how:"),
              (0, h.NC)(
                "1. Create a Telegram bot and get your Telegram API token. Read more on how to create bots in Telegram here: https://core.telegram.org/bots#6-botfather"
              ),
              (0, h.NC)(
                "2. Start a chat with your newly created Telegram bot and make sure to send it some messages before proceeding to the next step. (e.g. Hello Bot!)"
              ),
              (0, h.NC)(
                "3. Get the chat ID using the Telegram REST API (read more: https://core.telegram.org/bots/api#getupdates)"
              ),
              (0, h.NC)(
                "- Visit the following URL, make sure to replace <access_token> with the Telegram API token you created in Step 1: https://api.telegram.org/bot<access_token>/getUpdates"
              ),
              (0, h.NC)(
                "- Find the chat ID property in the response, and copy the value of the id property"
              ),
              (0, h.NC)(
                "4. Come back to Oruchotrader and add the Notify Telegram block to the workspace. Paste the Telegram API token and chat ID into the block fields accordingly."
              ),
            ],
          },
          es = {
            text: () => [
              (0, h.NC)(
                "This block gives you a list of candles within a selected time interval."
              ),
              (0, h.NC)(
                'In this example, this block is used with another block to get the open prices from a list of candles. The open prices are then assigned to the variable called "cl".'
              ),
            ],
          },
          er = {
            text: () => [
              (0, h.NC)(
                "This block gives you the selected candle value from a list of candles within the selected time interval. You can choose from open price, close price, high price, low price, and open time."
              ),
              (0, h.NC)(
                'In this example, the open prices from a list of candles are assigned to a variable called "candle_list".'
              ),
            ],
          },
          el = {
            text: () => [
              (0, h.NC)(
                "This block gives you the selected candle value from a list of candles. You can choose from open price, close price, high price, low price, and open time."
              ),
              (0, h.NC)(
                "This block requires a list of candles as an input parameter."
              ),
              (0, h.NC)(
                'In this example, the open prices from a list of candles are assigned to a variable called "cl".'
              ),
            ],
          },
          ed = {
            text: () => [
              (0, h.NC)(
                "Used within a function block, this block returns a value when a specific condition is true."
              ),
              (0, h.NC)("Example:"),
            ],
          },
          ec = {
            text: () => [
              (0, h.NC)(
                "This block gives you information about your last contract."
              ),
              (0, h.NC)("You can choose to see one of the following:"),
              (0, h.NC)(
                "- Deal reference ID: the reference ID of the contract"
              ),
              (0, h.NC)(
                "- Purchase price: the purchase price (stake) of the contract"
              ),
              (0, h.NC)("- Payout: the payout of the contract"),
              (0, h.NC)("- Profit: the profit you’ve earned"),
              (0, h.NC)(
                "- Contract type: the name of the contract type such as Rise, Fall, Touch, No Touch, etс."
              ),
              (0, h.NC)("- Entry time: the starting time of the contract"),
              (0, h.NC)(
                "- Entry value: the value of the first tick of the contract"
              ),
              (0, h.NC)("- Exit time: the contract expiration time"),
              (0, h.NC)(
                "- Exit value: the value of the last tick of the contract"
              ),
              (0, h.NC)(
                "- Barrier: the barrier value of the contract (applicable to barrier-based trade types such as stays in/out, touch/no touch, etc.)"
              ),
              (0, h.NC)(
                '- Result: the result of the last contract: "win" or "loss"'
              ),
            ],
          },
          eu = {
            text: () => [
              (0, h.NC)(
                "This block gives you the specified candle value for a selected time interval. You can choose which value you want:"
              ),
              (0, h.NC)("- Open: the opening price"),
              (0, h.NC)("- High: the highest price"),
              (0, h.NC)("- Low: the lowest price"),
              (0, h.NC)("- Close: the closing price"),
              (0, h.NC)("- Open time: the opening time stamp"),
              (0, h.NC)(
                'In the example below, the opening price is selected, which is then assigned to a variable called "op".'
              ),
            ],
          },
          eh = {
            text: () => [
              (0, h.NC)(
                "This block gives you the selected candle value such as open price, close price, high price, low price, and open time. It requires a candle as an input parameter."
              ),
              (0, h.NC)(
                'In the example below, the open price is assigned to the variable "op".'
              ),
            ],
          },
          ep = {
            text: () => [
              (0, h.NC)(
                "Use this block to sell your contract at the market price. Selling your contract is optional. You may choose to sell if the market trend is unfavourable."
              ),
              (0, h.NC)("Example:"),
            ],
          },
          em = {
            text: () => [
              (0, h.NC)(
                'This block gives you the potential profit or loss if you decide to sell your contract. It can only be used within the "Sell conditions" root block.'
              ),
              (0, h.NC)(
                "In the example below, the contract will only be sold if the potential profit or loss is more than the stake."
              ),
            ],
          },
          e_ = {
            text: () => [
              (0, h.NC)(
                "SMA adds the market price in a list of ticks or candles for a number of time periods, and divides the sum by that number of time periods."
              ),
              (0, h.NC)("The formula for SMA is:"),
              (0, h.NC)("where n is the number of periods."),
              "",
              (0, h.NC)("What SMA tells you"),
              (0, h.NC)(
                "SMA serves as an indicator of the trend. If the SMA points up then the market price is increasing and vice versa. The larger the period number, the smoother SMA line is."
              ),
              (0, h.NC)(
                "In this example, each point of the SMA line is an arithmetic average of close prices for the last 10 days."
              ),
              (0, h.NC)(
                "In this example, each point of the SMA line is an arithmetic average of close prices for the last 50 days."
              ),
              "",
              (0, h.NC)("How to use the SMA block"),
              (0, h.NC)(
                "Input list accepts a list of ticks or candles, while period is the specified time period."
              ),
              (0, h.NC)("Example:"),
              (0, h.NC)(
                "This will display the SMA for the specified period, using a candle list."
              ),
              (0, h.NC)(
                "SMA places equal weight to the entire distribution of values."
              ),
              (0, h.NC)(
                "This is the same as the above example, using a tick list."
              ),
              (0, h.NC)(
                "You may compare SMA values calculated on every bot run to identify the market trend direction. Alternatively, you may also use a variation of the SMA block, the Simple Moving Average Array block. "
              ),
              (0, h.NC)(
                "This block returns the entire SMA line, containing a list of all values for a given period."
              ),
              (0, h.NC)(
                "If a period of 10 is entered, the Simple Moving Average Array block will return a list of SMA values calculated based on period of 10."
              ),
              (0, h.NC)(
                "The below image illustrates how Simple Moving Average Array block works:"
              ),
            ],
          },
          ef = {
            text: () => [
              (0, h.NC)(
                'This block displays a dialog box with a customised message. When the dialog box is displayed, your strategy is paused and will only resume after you click "OK".'
              ),
            ],
          },
          eb = {
            text: () => [
              (0, h.NC)(
                'This block displays a dialog box that uses a customised message to prompt for an input. The input can be either a string of text or a number and can be assigned to a variable. When the dialog box is displayed, your strategy is paused and will only resume after you enter a response and click "OK".'
              ),
            ],
          },
          ey = {
            text: () => [
              (0, h.NC)(
                "Any blocks placed within this block will be executed at every tick. If the default candle interval is set to 1 minute in the Trade Parameters root block, the instructions in this block will be executed once every minute. Place this block outside of any root block."
              ),
            ],
          },
          ev = {
            text: () => [
              (0, h.NC)(
                "This block converts the number of seconds since the Unix Epoch to a date and time format such as 2019-08-01 00:00:00."
              ),
              (0, h.NC)("Example:"),
              (0, h.NC)(
                "In this example, the date and time will be displayed in a green notification box."
              ),
            ],
          },
          eg = {
            text: () => [
              (0, h.NC)(
                "This block converts the date and time to the number of seconds since the Unix Epoch (1970-01-01 00:00:00)."
              ),
              (0, h.NC)("Example:"),
              (0, h.NC)(
                "In this example, a Rise contract will be purchased at midnight on 1 August 2019."
              ),
            ],
          },
          ek = {
            text: () => [
              (0, h.NC)(
                "This block will transfer the control back to the Purchase conditions block, enabling you to purchase another contract without manually stopping and restarting your bot."
              ),
              (0, h.NC)("Example:"),
            ],
          },
          ew = {
            text: () => [
              (0, h.NC)(
                "This block is mandatory. It's added to your strategy by default when you create new strategy. You can not add more than one copy of this block to the canvas."
              ),
              (0, h.NC)("1. Market"),
              (0, h.NC)(
                "Select your desired market and asset type. For example, Forex > Major pairs > AUD/JPY"
              ),
              (0, h.NC)("2. Trade Type"),
              (0, h.NC)(
                "Select your desired trade type. For example, Up/Down > Rise/Fall"
              ),
              (0, h.NC)("3. Contract Type"),
              (0, h.NC)(
                "Choose what type of contract you want to trade. For example, for the Rise/Fall trade type you can choose one of three options: Rise, Fall, or Both. Selected option will determine available options for the Purchase block."
              ),
              (0, h.NC)("4. Default Candle Interval"),
              (0, h.NC)(
                "Sets the default time interval for blocks that read list of candles."
              ),
              (0, h.NC)("5. Restart buy/sell on error"),
              (0, h.NC)("Restarts the bot when an error is encountered."),
              (0, h.NC)("6. Restart last trade on error"),
              (0, h.NC)(
                "Repeats the previous trade when an error is encountered."
              ),
              (0, h.NC)("7. Run Once at Start"),
              (0, h.NC)(
                "Place blocks here to perform tasks once when your bot starts running."
              ),
              (0, h.NC)("8. Trade Options"),
              (0, h.NC)(
                "The desired duration, stake, prediction, and/or barrier(s) for the contract is defined here."
              ),
            ],
          };
        var eT = n("31865");
        let eC = {
            text: () => [
              (0, h.NC)(
                "Use this block when you want to use multipliers as your trade type."
              ),
              (0, h.NC)(
                "Click the multiplier drop-down menu and choose the multiplier value you want to trade with."
              ),
              (0, h.NC)(
                "Your potential profit will be multiplied by the multiplier value you’ve chosen."
              ),
              (0, a.jsx)(
                h.Xx,
                {
                  i18n_default_text:
                    "To learn more about multipliers, please go to the <0>Multipliers</0> page.",
                  components: [
                    (0, a.jsx)(
                      eT.Z,
                      { className: "link", href: "trade-types/multiplier" },
                      0
                    ),
                  ],
                },
                0
              ),
            ],
          },
          eE = {
            text: () => [
              (0, h.NC)(
                "This block is used to define trade options within the Trade parameters root block. Some options are only applicable for certain trade types. Parameters such as duration and stake are common among most trade types. Prediction is used for trade types such as Digits, while barrier offsets are for trade types that involve barriers such as Touch/No Touch, Ends In/Out, etc."
              ),
              (0, h.NC)("Example:"),
            ],
          },
          eN = {
            text: () => [
              (0, h.NC)(
                "This block assigns a given value to a variable, creating the variable if it doesn't already exist."
              ),
              (0, h.NC)(
                "A variable is among the most important and powerful components in creating a bot. It is a way to store information, either as text or numbers. The information stored as a variable can be used and changed according to the given instructions. Variables can be given any name, but usually they are given useful, symbolic names so that it is easier to call them during the execution of instructions."
              ),
              (0, h.NC)("Creating a variable"),
              (0, h.NC)(
                "1. From the block library, enter a name for the new variable and click Create."
              ),
              (0, h.NC)(
                "2. The new variable will appear as a block under Set variable."
              ),
            ],
          };
        class ex {
          setActiveHelper(e) {
            this.active_helper = e;
          }
          onBackClick() {
            let { toolbox: e, flyout: t } = this.root_store;
            if (t.is_search_flyout) {
              let t = document.getElementsByName("search")[0].value;
              e.onSearch({ search: t });
            } else t.refreshCategory();
          }
          async onSequenceClick(e) {
            let t;
            let i = Array.from(this.xml_list).find(
              (e) => e.getAttribute("type") === this.block_type
            );
            Object.keys(this.xml_list_group).forEach((e, n) => {
              i.getAttribute("type") === e && (t = n);
            });
            let a = async (e, t, i) => {
                let o = t + (i ? 1 : -1),
                  s = Object.keys(e).filter((e, t) => (i ? o <= t : o >= t)),
                  r = await this.getFilledBlocksIndex(s),
                  l = s[i ? r[0] : r[r.length - 1]];
                if (!l) return !1;
                try {
                  return await Promise.resolve().then(n.bind(n, 88199)), l;
                } catch (t) {
                  return a(e, o, i);
                }
              },
              o = await a(this.xml_list_group, t, e);
            if (o) {
              let e = this.xml_list_group[o];
              this.setHelpContent(e[0]);
            }
          }
          initFlyoutHelp(e) {
            let { flyout: t, toolbox: n } = this.root_store;
            (this.xml_list = n.getCategoryContents(t.selected_category)),
              (this.xml_list_group = this.groupBy(this.xml_list, !0)),
              this.setHelpContent(e);
          }
          async updateSequenceButtons() {
            let e = Array.from(this.xml_list).find(
                (e) => e.getAttribute("type") === this.block_type
              ),
              t = Object.keys(this.xml_list_group).findIndex(
                (t) => e.getAttribute("type") === t
              ),
              n = await this.getNextHelpContentIndex(!0),
              i = await this.getNextHelpContentIndex(!1);
            (0, r.z)(() => {
              (this.should_previous_disable = 0 === t || t === i),
                (this.should_next_disable =
                  t === Object.keys(this.xml_list_group).length - 1 || t === n);
            });
          }
          groupBy(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return Array.from(e).reduce((e, n) => {
              let i = n.getAttribute("type");
              return t && null === i
                ? e
                : (!e[i] && (e[i] = []),
                  (!t || (t && null !== i)) && e[i].push(n),
                  e);
            }, {});
          }
          setExamples(e) {
            let { toolbox: t } = this.root_store,
              n = [...t.toolbox_examples.childNodes],
              i = (0, M.S)(window.__webpack_public_path__)
                [e].filter((e) => "example" === e.type)
                .map((e) => e.example_id)
                .map((e) => n.find((t) => t.id === e));
            this.examples = i;
          }
          constructor(e) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "block_node", null),
              (0, s._)(this, "block_type", ""),
              (0, s._)(this, "examples", []),
              (0, s._)(this, "help_string", {}),
              (0, s._)(this, "title", ""),
              (0, s._)(this, "should_next_disable", !1),
              (0, s._)(this, "should_previous_disable", !1),
              (0, s._)(this, "active_helper", ""),
              (0, s._)(this, "setHelpContent", async (e) => {
                let t = e.getAttribute("type"),
                  n = window.Blockly.Blocks[t].meta().display_name;
                "" !== t && (this.active_helper = t);
                let { flyout: a } = this.root_store;
                this.setExamples(t);
                let o = this.examples.map((e) => e.childNodes[0]);
                setTimeout(() => a.setFlyoutWidth([e, ...o]), 50),
                  (0, r.z)(() => {
                    if (
                      ((a.is_help_content = !0),
                      (this.block_node = e),
                      (this.block_type = t),
                      (this.title = n),
                      "" !== t)
                    )
                      for (let [e, n] of Object.entries(i[t]))
                        this.help_string[e] = n();
                  }),
                  !a.is_search_flyout && this.updateSequenceButtons();
              }),
              (0, s._)(this, "getHelpContent", async (e) => {
                let t;
                return (
                  e && (t = i[this.xml_list_group[e][0].getAttribute("type")]),
                  t
                );
              }),
              (0, s._)(this, "getFilledBlocksIndex", async (e) =>
                (await Promise.all(e.map((e) => this.getHelpContent(e))))
                  .map((e, t) => (e ? t : null))
                  .filter((e) => null !== e)
              ),
              (0, s._)(this, "getNextHelpContentIndex", async (e) => {
                let t = await this.getFilledBlocksIndex(
                  Object.keys(this.xml_list_group)
                );
                return e ? t[t.length - 1] : t[0];
              }),
              (0, r.rC)(this, {
                block_node: r.LO,
                block_type: r.LO,
                examples: r.LO,
                help_string: r.LO,
                title: r.LO,
                should_next_disable: r.LO,
                should_previous_disable: r.LO,
                active_helper: r.LO,
                setHelpContent: r.aD.bound,
                setActiveHelper: r.aD.bound,
                onBackClick: r.aD.bound,
                onSequenceClick: r.aD.bound,
                initFlyoutHelp: r.aD.bound,
                updateSequenceButtons: r.aD.bound,
                setExamples: r.aD.bound,
                getHelpContent: r.aD.bound,
                getFilledBlocksIndex: r.aD.bound,
                getNextHelpContentIndex: r.aD.bound,
              }),
              (this.root_store = e);
          }
        }
        var eA = n("18908");
        class eS {
          onMount() {
            this.initFlyout(),
              window.addEventListener("click", this.onClickOutsideFlyout);
          }
          onUnmount() {
            window.removeEventListener("click", this.onClickOutsideFlyout);
          }
          initFlyout() {
            var e, t, n;
            let i = window.Blockly.derivWorkspace,
              a = new window.Blockly.Options({
                parentWorkspace: i,
                rtl: i.RTL,
                horizontalLayout: !0,
                theme:
                  null === (n = window) || void 0 === n
                    ? void 0
                    : null === (t = n.Blockly) || void 0 === t
                    ? void 0
                    : null === (e = t.Themes) || void 0 === e
                    ? void 0
                    : e.zelos_renderer,
              });
            i.horizontalLayout
              ? (this.flyout = new window.Blockly.HorizontalFlyout(a))
              : (this.flyout = new window.Blockly.VerticalFlyout(a)),
              (this.flyout.targetWorkspace = i),
              (this.flyout.workspace_.targetWorkspace = i),
              (this.flyout.workspace_.getGesture =
                this.flyout.targetWorkspace.getGesture.bind(
                  this.flyout.targetWorkspace_
                )),
              (i.VariableMap = this.flyout.targetWorkspace.getVariableMap()),
              this.flyout.workspace_.createPotentialVariableMap();
          }
          initBlockWorkspace(e, t) {
            var n, i, a, o, s, r, l, d, c;
            let u = window.Blockly.inject(e, this.options);
            u.targetWorkspace = window.Blockly.derivWorkspace;
            let h = window.Blockly.Xml.domToBlock(t, u),
              p = h.getHeightWidth();
            (h.isInFlyout = !0),
              (e.style.height = `${
                Math.ceil(p.height * this.options.zoom.startScale) + 1
              }px`),
              (e.style.width = `${
                Math.ceil(p.width * this.options.zoom.startScale) + 1
              }px`),
              h.moveBy(1, 1);
            let m = h.getSvgRoot();
            this.block_listeners.push(
              null === (a = window) || void 0 === a
                ? void 0
                : null === (i = a.Blockly) || void 0 === i
                ? void 0
                : null === (n = i.browserEvents) || void 0 === n
                ? void 0
                : n.conditionalBind(m, "mousedown", null, (e) => {
                    var t;
                    null === eA.default ||
                      void 0 === eA.default ||
                      null === (t = eA.default.pushDataLayer) ||
                      void 0 === t ||
                      t.call(eA.default, {
                        event: "dbot_drag_block",
                        block_type: h.type,
                      }),
                      this.flyout.blockMouseDown(h)(e);
                  }),
              null === (r = window) || void 0 === r
                ? void 0
                : null === (s = r.Blockly) || void 0 === s
                ? void 0
                : null === (o = s.browserEvents) || void 0 === o
                ? void 0
                : o.bind(m, "mouseout", h, h.removeSelect),
              null === (c = window) || void 0 === c
                ? void 0
                : null === (d = c.Blockly) || void 0 === d
                ? void 0
                : null === (l = d.browserEvents) || void 0 === l
                ? void 0
                : l.bind(m, "mouseover", h, h.addSelect)
            ),
              this.block_workspaces.push(u),
              window.Blockly.svgResize(u);
          }
          getFlyout() {
            return this.flyout;
          }
          setContents(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "";
            this.block_listeners.forEach((e) =>
              window.Blockly.browserEvents.unbind(e)
            ),
              this.block_workspaces.forEach((e) => e.dispose()),
              (this.block_listeners = []),
              (this.block_workspaces = []),
              (this.is_help_content = !1),
              (this.search_term =
                t.length > 20 ? `${t.substring(0, 20)}...` : t),
              (this.flyout_content = e),
              this.setFlyoutWidth(e),
              this.setVisibility(!0),
              setTimeout(() => this.setFlyoutWidth(e), 50);
          }
          setFlyoutWidth(e) {
            let t = 0;
            e.forEach((e) => {
              if (e.tagName.toUpperCase() === window.Blockly.Xml.NODE_BLOCK) {
                let n = window.Blockly.Block.getDimensions(e);
                e.setAttribute(
                  "width",
                  String(Math.ceil(n.width * this.options.zoom.startScale))
                ),
                  e.setAttribute(
                    "height",
                    String(Math.ceil(n.height * this.options.zoom.startScale))
                  ),
                  (t = Math.max(
                    t,
                    Math.ceil(n.width * this.options.zoom.startScale)
                  ));
              }
            }),
              (this.flyout_width = Math.max(this.flyout_min_width, t + 65));
          }
          setVisibility(e) {
            (this.is_visible = e),
              !e &&
                (this.setSelectedCategory(null), (this.flyout_content = [])),
              (window.Blockly.derivWorkspace.isFlyoutVisible = e);
          }
          setIsSearchFlyout(e) {
            this.is_search_flyout = e;
          }
          setSelectedCategory(e) {
            this.selected_category = e;
          }
          getSelectedCategory() {
            return this.selected_category;
          }
          onClickOutsideFlyout(e) {
            if (!this.is_visible || !window.Blockly.derivWorkspace) return;
            let t = document.getElementById("gtm-toolbox"),
              n = ((null == e ? void 0 : e.composedPath()) || []).some(
                (e) => e.classList && e.classList.contains("flyout")
              ),
              i = this.root_store.toolbox.is_search_focus;
            !n &&
              !(null == t ? void 0 : t.contains(e.target)) &&
              !i &&
              (this.setVisibility(!1), this.setSelectedCategory(null));
          }
          refreshCategory() {
            let e = this.getSelectedCategory(),
              { toolbox: t } = this.root_store,
              n = t.getCategoryContents(e);
            this.setContents(n);
          }
          get variables_blocks_count() {
            return this.flyout_content.filter(
              (e) => "variables_get" === e.getAttribute("type")
            ).length;
          }
          get first_get_variable_block_index() {
            return this.flyout_content.length - this.variables_blocks_count;
          }
          constructor(e) {
            var t, n, i;
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "flyout", null),
              (0, s._)(this, "block_listeners", []),
              (0, s._)(this, "block_workspaces", []),
              (0, s._)(this, "flyout_min_width", 440),
              (0, s._)(this, "options", {
                renderer: "zelos",
                media: "assets/media/",
                move: { scrollbars: !1, drag: !0, wheel: !1 },
                zoom: {
                  startScale: (0, c.config)().workspaces
                    .flyoutWorkspacesStartScale,
                },
                sounds: !1,
                theme:
                  null === (i = window) || void 0 === i
                    ? void 0
                    : null === (n = i.Blockly) || void 0 === n
                    ? void 0
                    : null === (t = n.Themes) || void 0 === t
                    ? void 0
                    : t.zelos_renderer,
              }),
              (0, s._)(this, "is_help_content", !1),
              (0, s._)(this, "flyout_content", []),
              (0, s._)(this, "flyout_width", this.flyout_min_width),
              (0, s._)(this, "is_visible", !1),
              (0, s._)(this, "is_search_flyout", !1),
              (0, s._)(this, "is_loading", !1),
              (0, s._)(this, "search_term", ""),
              (0, s._)(this, "selected_category", null),
              (0, r.rC)(this, {
                is_help_content: r.LO,
                flyout_content: r.LO,
                flyout_width: r.LO,
                is_visible: r.LO,
                is_search_flyout: r.LO,
                is_loading: r.LO,
                search_term: r.LO,
                selected_category: r.LO,
                onMount: r.aD.bound,
                onUnmount: r.aD.bound,
                initFlyout: r.aD.bound,
                initBlockWorkspace: r.aD.bound,
                getFlyout: r.aD.bound,
                setContents: r.aD.bound,
                setFlyoutWidth: r.aD.bound,
                setVisibility: r.aD.bound,
                setIsSearchFlyout: r.aD.bound,
                setSelectedCategory: r.aD.bound,
                getSelectedCategory: r.aD.bound,
                onClickOutsideFlyout: r.aD.bound,
                refreshCategory: r.aD.bound,
                variables_blocks_count: r.Fl,
                first_get_variable_block_index: r.Fl,
              }),
              (this.root_store = e);
          }
        }
        let eO = Object.freeze({ NORMAL: 0, LOADING: 1, COMPLETED: 2 });
        var eI = n("89057"),
          eD = n("66062");
        class eR {
          setIsAuthorized(e) {
            this.is_authorised = e;
          }
          async signIn() {
            !this.is_authorised && (await this.client.requestAccessToken());
          }
          async signOut() {
            if (this.access_token) {
              var e, t, n, i, a, o, s, r;
              await (null === (n = window) || void 0 === n
                ? void 0
                : null === (t = n.gapi) || void 0 === t
                ? void 0
                : null === (e = t.client) || void 0 === e
                ? void 0
                : e.setToken({ access_token: "" })),
                localStorage.getItem("google_access_token") &&
                  (await (null === (s = window) || void 0 === s
                    ? void 0
                    : null === (o = s.google) || void 0 === o
                    ? void 0
                    : null === (a = o.accounts) || void 0 === a
                    ? void 0
                    : null === (i = a.oauth2) || void 0 === i
                    ? void 0
                    : i.revoke(this.access_token)),
                  null === (r = localStorage) ||
                    void 0 === r ||
                    r.removeItem("google_access_token")),
                (this.access_token = "");
            }
            this.setIsAuthorized(!1);
          }
          getPickerLanguage() {
            let e = (0, h.Jb)();
            return "zhTw" === e ? "zh-TW" : "zhCn" === e ? "zh-CN" : e;
          }
          async saveFile(e) {
            try {
              await this.signIn(),
                this.access_token &&
                  gapi.client.setToken({ access_token: this.access_token }),
                await this.checkFolderExists(),
                await this.createSaveFilePicker(
                  "application/vnd.google-apps.folder",
                  (0, h.NC)("Select a folder"),
                  e
                );
            } catch (e) {
              401 === e.status && this.signOut();
            }
          }
          async loadFile() {
            if (!!this.is_google_drive_token_valid) {
              await this.signIn(),
                this.access_token &&
                  gapi.client.setToken({ access_token: this.access_token });
              try {
                await gapi.client.drive.files.list({
                  pageSize: 10,
                  fields: "files(id, name)",
                });
              } catch (a) {
                var e, t, n, i;
                if ((null == a ? void 0 : a.status) === 401) {
                  await this.signOut();
                  let e = document.getElementsByClassName(
                      "picker-dialog-content"
                    )[0],
                    t = null == e ? void 0 : e.parentNode;
                  e &&
                    t &&
                    (null == t ? void 0 : t.contains(e)) &&
                    (null == t || t.removeChild(e)),
                    null == e ||
                      null === (i = e.parentNode) ||
                      void 0 === i ||
                      i.removeChild(e);
                  let n = document.getElementsByClassName("picker-dialog-bg");
                  if (n.length)
                    for (let e = 0; e < n.length; e++)
                      n[e].style.display = "none";
                }
                (0, eI.mu)({
                  upload_provider: "google_drive",
                  upload_id: this.upload_id,
                  upload_type: "not_found",
                  error_message:
                    null == a
                      ? void 0
                      : null === (t = a.result) || void 0 === t
                      ? void 0
                      : null === (e = t.error) || void 0 === e
                      ? void 0
                      : e.message,
                  error_code:
                    null == a
                      ? void 0
                      : null === (n = a.status) || void 0 === n
                      ? void 0
                      : n.toString(),
                });
              }
              return await this.createLoadFilePicker(
                "text/xml,application/xml",
                (0, h.NC)("Select a Oruchotrader Strategy")
              );
            }
          }
          async checkFolderExists() {
            var e;
            let { files: t } = gapi.client.drive,
              n = await t.list({ q: "trashed=false" }),
              i = "application/vnd.google-apps.folder";
            if (
              null === (e = n.result.files) || void 0 === e
                ? !void 0
                : !e.find((e) => e.mimeType === i)
            )
              await t.create({
                resource: { name: this.bot_folder_name, mimeType: i },
                fields: "id",
              });
          }
          createSaveFilePicker(e, t, n) {
            let { setButtonStatus: i } = this.root_store.save_modal;
            return new Promise((a) => {
              this.showGoogleDriveFilePicker(!0, e, t, (e) => {
                if (e.action === google.picker.Action.PICKED) {
                  let t = e.docs[0].id,
                    o = new Blob([n.content], { type: n.mimeType }),
                    s = JSON.stringify({
                      name: n.name,
                      mimeType: n.mimeType,
                      parents: [t],
                    }),
                    r = new FormData();
                  r.append(
                    "metadata",
                    new Blob([s], { type: "application/json" })
                  ),
                    r.append("file", o);
                  let l = new XMLHttpRequest();
                  (l.responseType = "json"),
                    l.open(
                      "POST",
                      "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"
                    ),
                    l.setRequestHeader(
                      "Authorization",
                      `Bearer ${this.access_token}`
                    ),
                    (l.onload = () => {
                      401 === l.status && this.signOut(), i(eO.NORMAL), a();
                    }),
                    l.send(r);
                } else e.action === google.picker.Action.CANCEL && i(eO.NORMAL);
              });
            });
          }
          createLoadFilePicker(e, t) {
            return new Promise((n) => {
              let i = async (e) => {
                if (e.action === google.picker.Action.PICKED) {
                  let t = e.docs[0];
                  (null == t ? void 0 : t.driveError) === "NETWORK" &&
                    (0, eI.mu)({
                      upload_provider: "google_drive",
                      upload_id: this.upload_id,
                      upload_type: "not_found",
                      error_message: "File not found",
                      error_code: "404",
                    });
                  let i = t.name,
                    a = t.id,
                    { files: o } = gapi.client.drive,
                    { setOpenSettings: s } = this.root_store.dashboard,
                    r = await o.get({ alt: "media", fileId: a });
                  n({ xml_doc: r.body, file_name: i }), s(O.tx.BOT_IMPORT);
                  let l = (0, eD.dC)(r.body);
                  (0, eI.WN)({
                    upload_provider: "google_drive",
                    upload_type: l,
                    upload_id: this.upload_id,
                  });
                }
              };
              this.showGoogleDriveFilePicker(!1, e, t, i);
            });
          }
          showGoogleDriveFilePicker(e, t, n, i) {
            let a = new google.picker.DocsView();
            a.setIncludeFolders(!0),
              a.setMimeTypes(t),
              e && a.setSelectFolderEnabled(!0),
              new google.picker.PickerBuilder()
                .setOrigin(
                  `${window.location.protocol}//${window.location.host}`
                )
                .setTitle((0, h.NC)(n))
                .setLocale(this.getPickerLanguage())
                .setAppId(this.app_id)
                .setOAuthToken(this.access_token)
                .addView(a)
                .setDeveloperKey(this.api_key)
                .setSize(1051, 650)
                .setCallback(i)
                .build()
                .setVisible(!0);
          }
          constructor(e) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "bot_folder_name", void 0),
              (0, s._)(this, "client_id", void 0),
              (0, s._)(this, "app_id", void 0),
              (0, s._)(this, "api_key", void 0),
              (0, s._)(this, "scope", void 0),
              (0, s._)(this, "discovery_docs", ""),
              (0, s._)(this, "client", void 0),
              (0, s._)(this, "access_token", void 0),
              (0, s._)(this, "upload_id", void 0),
              (0, s._)(this, "is_google_drive_token_valid", !0),
              (0, s._)(
                this,
                "is_authorised",
                !!localStorage.getItem("google_access_token")
              ),
              (0, s._)(this, "setGoogleDriveTokenValid", (e) => {
                this.is_google_drive_token_valid = e;
              }),
              (0, s._)(this, "setKey", () => {
                let { SCOPE: e, DISCOVERY_DOCS: t } = (0, c.config)()
                  .GOOGLE_DRIVE;
                (this.client_id = void 0),
                  (this.app_id = void 0),
                  (this.api_key = void 0),
                  (this.scope = e),
                  (this.discovery_docs = t);
              }),
              (0, s._)(this, "initialise", () => {
                gapi.load("client:picker", () =>
                  gapi.client.load(this.discovery_docs)
                );
              }),
              (0, s._)(this, "setGoogleDriveTokenExpiry", (e) => {
                let t = Math.floor(Date.now() / 1e3);
                localStorage.setItem(
                  "google_access_token_expiry",
                  (t + e).toString()
                );
              }),
              (0, s._)(this, "initialiseClient", () => {
                this.client = google.accounts.oauth2.initTokenClient({
                  client_id: this.client_id,
                  scope: this.scope,
                  callback: (e) => {
                    (null == e ? void 0 : e.access_token) &&
                      !(null == e ? void 0 : e.error) &&
                      ((this.access_token = e.access_token),
                      this.setIsAuthorized(!0),
                      localStorage.setItem(
                        "google_access_token",
                        e.access_token
                      ),
                      this.setGoogleDriveTokenExpiry(
                        null == e ? void 0 : e.expires_in
                      ),
                      this.setGoogleDriveTokenValid(!0));
                  },
                });
              }),
              (0, s._)(this, "verifyGoogleDriveAccessToken", async () => {
                var e;
                let t =
                  null === (e = localStorage) || void 0 === e
                    ? void 0
                    : e.getItem("google_access_token_expiry");
                return t
                  ? Math.floor(Date.now() / 1e3) > Number(t)
                    ? (this.signOut(),
                      this.setGoogleDriveTokenValid(!1),
                      localStorage.removeItem("google_access_token_expiry"),
                      localStorage.removeItem("google_access_token"),
                      (0, S.J)((0, O.xG)().google_drive_error, void 0, {
                        closeButton: !1,
                      }),
                      "not_verified")
                    : "verified"
                  : "not_verified";
              }),
              (0, s._)(this, "onDriveConnect", async () => {
                this.is_authorised ? this.signOut() : this.signIn();
              }),
              (0, r.rC)(this, {
                is_authorised: r.LO,
                upload_id: r.LO,
                is_google_drive_token_valid: r.LO,
                setIsAuthorized: r.aD.bound,
                saveFile: r.aD.bound,
                loadFile: r.aD.bound,
                setKey: r.aD.bound,
                initialise: r.aD.bound,
                signIn: r.aD.bound,
                signOut: r.aD.bound,
                getPickerLanguage: r.aD.bound,
                checkFolderExists: r.aD.bound,
                createSaveFilePicker: r.aD.bound,
                createLoadFilePicker: r.aD.bound,
                showGoogleDriveFilePicker: r.aD.bound,
                setGoogleDriveTokenValid: r.aD.bound,
                verifyGoogleDriveAccessToken: r.aD.bound,
                onDriveConnect: r.aD,
              }),
              (this.root_store = e),
              (this.bot_folder_name = `Binary Bot - ${(0, h.NC)(
                "Strategies"
              )}`),
              this.setKey(),
              (this.client = null),
              (this.access_token =
                localStorage.getItem("google_access_token") ?? ""),
              setTimeout(() => {
                (0, c.importExternal)(
                  "https://accounts.google.com/gsi/client"
                ).then(() => this.initialiseClient()),
                  (0, c.importExternal)(
                    "https://apis.google.com/js/api.js"
                  ).then(() => this.initialise());
              }, 3e3);
          }
        }
        var eL = n("57357"),
          eP = n("47962"),
          eB = n("89606"),
          eU = n("45221"),
          eM = n("63387"),
          ej = n.n(eM),
          eF = n("33716");
        let eV = (e) => {
            let { array: t, open_ids: n, setOpenIds: i } = e,
              s = (e) => {
                n.includes(e) ? i(n.filter((t) => t !== e)) : i([...n, e]);
              };
            return (0, a.jsx)(o.Fragment, {
              children: t.map((e, t) => {
                var o;
                return Array.isArray(null == e ? void 0 : e.value)
                  ? (0, a.jsxs)(
                      "div",
                      {
                        className: "dc-expansion-panel__content-array",
                        children: [
                          (0, a.jsxs)("div", {
                            className: ej()(
                              "dc-expansion-panel__content-array",
                              {
                                "dc-expansion-panel__content-active":
                                  n.includes(e.id),
                              }
                            ),
                            children: [
                              (0, a.jsx)("span", {
                                className:
                                  "dc-expansion-panel__content-array-item-index",
                                children: `${t + 1}: `,
                              }),
                              "(",
                              `${e.value.length}`,
                              ")",
                              (0, a.jsx)(eB.J, {
                                className:
                                  "dc-expansion-panel__content-chevron-icon",
                                icon: "IcChevronRight",
                                onClick: () => s(e.id),
                              }),
                            ],
                          }),
                          n.includes(e.id)
                            ? (0, a.jsx)(eV, {
                                array: e.value,
                                open_ids: n,
                                setOpenIds: i,
                              })
                            : null,
                        ],
                      },
                      t
                    )
                  : (0, a.jsxs)(
                      "div",
                      {
                        className: "dc-expansion-panel__content-array",
                        children: [
                          (0, a.jsx)("span", {
                            className:
                              "dc-expansion-panel__content-array-item-index",
                            children: `${t + 1}: `,
                          }),
                          null == e
                            ? void 0
                            : null === (o = e.value) || void 0 === o
                            ? void 0
                            : o.toString(),
                        ],
                      },
                      t
                    );
              }),
            });
          },
          eG = (e) => {
            let { message: t, onResize: n } = e,
              [i, s] = o.useState([]),
              [r, l] = o.useState(!1);
            return (
              o.useEffect(() => {
                "function" == typeof n && n();
              }, [r, n]),
              (0, a.jsxs)(o.Fragment, {
                children: [
                  (0, a.jsxs)("div", {
                    className: ej()("dc-expansion-panel__header-container", {
                      "dc-expansion-panel__header-active": r,
                    }),
                    children: [
                      t.header,
                      (0, a.jsx)(eF.Z, {
                        className: "dc-expansion-panel__header-chevron-icon",
                        onClick: () => {
                          l(!r);
                        },
                        height: "24px",
                        width: "24px",
                      }),
                    ],
                  }),
                  r &&
                    (Array.isArray(t.content)
                      ? (0, a.jsx)(eV, {
                          array: t.content,
                          open_ids: i,
                          setOpenIds: s,
                        })
                      : t.content),
                ],
              })
            );
          },
          eY = (e) => {
            switch (e) {
              case "error":
                return "IcAlertDanger";
              case "warn":
              default:
                return "IcAlertWarning";
              case "info":
                return "IcAlertInfo";
            }
          },
          eX = (e) => {
            let {
              unique_id: t,
              type: n,
              message: i,
              btn_text: o,
              onClick: s,
            } = e;
            return (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)(
                  "div",
                  {
                    className: "notify__item-container",
                    children: [
                      (0, a.jsx)(
                        eB.J,
                        { icon: eY(n), size: "22" },
                        `${t}_icon`
                      ),
                      (0, a.jsx)(
                        "div",
                        { className: "notify__item-message", children: i },
                        `${t}_text`
                      ),
                    ],
                  },
                  `${t}_message`
                ),
                (0, a.jsx)(
                  eU.Z,
                  {
                    className: "notify__item-button",
                    text: o,
                    onClick: s,
                    has_effect: !0,
                    secondary: !0,
                  },
                  `${t}_btn`
                ),
              ],
            });
          },
          eW = (e) => (t) => (0, a.jsx)(eG, { message: e, onResize: t }),
          eH = (e, t, n, i) => {
            n(
              eX({
                unique_id: t,
                type: "error",
                message: e,
                btn_text: (0, h.NC)("Go to block"),
                onClick: () => {
                  i();
                },
              })
            );
          },
          e$ = (e, t, n, i) => {
            let { message: a, block_id: o, variable_name: s } = e;
            if (void 0 === a && null != s)
              return (
                eH(
                  (0, h.NC)(
                    "Variable '{{variable_name}}' has no value. Please set a value for variable '{{variable_name}}' to notify.",
                    { variable_name: s }
                  ),
                  o,
                  t,
                  n
                ),
                !0
              );
            if (null === a) return i("NULL"), !0;
            if (Object.is(a, NaN))
              return (
                eH(
                  (0, h.NC)("Tried to perform an invalid operation."),
                  o,
                  t,
                  n
                ),
                !0
              );
            if (Array.isArray(a)) {
              let e = a.length;
              return (
                i(
                  eW({
                    header:
                      "null" !== s
                        ? `${s}: (${e})`
                        : (0, h.NC)("List: ({{message_length}})", {
                            message_length: e,
                          }),
                    content: eK(a),
                  })
                ),
                !0
              );
            }
            return "boolean" == typeof a && (i(a.toString()), !0);
          },
          eK = (e) =>
            e.map((e, t) => ({
              id: `${Date.now()}-${t}`,
              value: e && Array.isArray(e) ? eK(e) : e,
            }));
        var eq = n("26961"),
          ez = n.n(eq);
        let eJ = (e, t, n) => (t && eZ(e, n)[t]) || n,
          eZ = (e, t) => {
            try {
              let t = sessionStorage.getItem(e),
                n = ez().decompress(t),
                i = JSON.parse(n);
              if (i) return i;
            } catch (e) {}
            return t;
          },
          eQ = (e, t) => {
            try {
              let n = ez().compress(JSON.stringify(t));
              sessionStorage.setItem(e, n);
            } catch (e) {
              console.warn("Could not write to storage.");
            }
          };
        class e0 {
          restoreStoredJournals() {
            let { loginid: e } = this.core.client;
            (this.journal_filters =
              (0, _.$8)("journal_filter") ?? this.filters.map((e) => e.id)),
              (this.unfiltered_messages = eJ(this.JOURNAL_CACHE, e, []));
          }
          getServerTime() {
            var e;
            return null === (e = this.core) || void 0 === e
              ? void 0
              : e.common.server_time.get();
          }
          toggleFilterDialog() {
            this.is_filter_dialog_visible = !this.is_filter_dialog_visible;
          }
          onLogSuccess(e) {
            let { log_type: t, extra: n } = e;
            this.pushMessage(t, c.MessageTypes.SUCCESS, "", n);
          }
          onError(e) {
            this.pushMessage(e, c.MessageTypes.ERROR);
          }
          onNotify(e) {
            let { run_panel: t, dbot: n } = this.root_store,
              {
                message: i,
                className: a,
                message_type: o,
                sound: s,
                block_id: r,
                variable_name: l,
              } = e;
            if (
              e$(
                { message: i, block_id: r, variable_name: l },
                t.showErrorMessage,
                () => n.centerAndHighlightBlock(r, !0),
                (e) => this.pushMessage(e, o || c.MessageTypes.NOTIFY, a)
              )
            ) {
              this.playAudio(s);
              return;
            }
            this.pushMessage(i, o || c.MessageTypes.NOTIFY, a),
              this.playAudio(s);
          }
          pushMessage(e, t, n) {
            let i =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : {},
              { client: a } = this.core,
              { loginid: o, account_list: s } = a;
            if (o) {
              let e =
                null == s
                  ? void 0
                  : s.find((e) => (null == e ? void 0 : e.loginid) === o);
              i.current_currency = (null == e ? void 0 : e.is_virtual)
                ? "Demo"
                : null == e
                ? void 0
                : e.currency;
            } else if (e === c.LogTypes.WELCOME) return;
            let r = (0, d.p6d)(this.getServerTime()),
              l = (0, d.p6d)(this.getServerTime(), "HH:mm:ss [GMT]"),
              u = (0, eL.Z)();
            this.unfiltered_messages.unshift({
              date: r,
              time: l,
              message: e,
              message_type: t,
              className: n,
              unique_id: u,
              extra: i,
            }),
              (this.unfiltered_messages = this.unfiltered_messages.slice());
          }
          get filtered_messages() {
            return this.unfiltered_messages.filter(
              (e) =>
                this.journal_filters.length &&
                this.journal_filters.some((t) => e.message_type === t)
            );
          }
          get checked_filters() {
            return this.journal_filters.filter((e) => null != e);
          }
          filterMessage(e, t) {
            e
              ? this.journal_filters.push(t)
              : this.journal_filters.splice(this.journal_filters.indexOf(t), 1),
              (0, _.Jp)("journal_filter", this.journal_filters);
          }
          clear() {
            this.unfiltered_messages = this.unfiltered_messages.slice(0, 0);
          }
          registerReactions() {
            let e = this.core.client,
              t = (0, r.U5)(
                () => this.unfiltered_messages,
                (t) => {
                  let n = eZ(this.JOURNAL_CACHE, {});
                  (n[e.loginid] = null == t ? void 0 : t.slice(0, 5e3)),
                    eQ(this.JOURNAL_CACHE, n);
                }
              ),
              n = (0, r.U5)(
                () => (null == e ? void 0 : e.loginid),
                async (t) => {
                  await (0, r.gx)(() => {
                    var n;
                    return !!(null === (n = e.account_list) || void 0 === n
                      ? void 0
                      : n.find((e) => e.loginid === t));
                  }),
                    (this.unfiltered_messages = eJ(this.JOURNAL_CACHE, t, [])),
                    0 === this.unfiltered_messages.length
                      ? this.pushMessage(
                          c.LogTypes.WELCOME,
                          c.MessageTypes.SUCCESS,
                          "journal__text"
                        )
                      : this.unfiltered_messages.length > 0 &&
                        this.pushMessage(
                          c.LogTypes.WELCOME_BACK,
                          c.MessageTypes.SUCCESS,
                          "journal__text"
                        );
                },
                { fireImmediately: !0 }
              );
            return () => {
              t(), n();
            };
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "disposeReactionsFn", void 0),
              (0, s._)(this, "JOURNAL_CACHE", "journal_cache"),
              (0, s._)(this, "is_filter_dialog_visible", !1),
              (0, s._)(this, "filters", [
                { id: c.MessageTypes.ERROR, label: (0, h.NC)("Errors") },
                {
                  id: c.MessageTypes.NOTIFY,
                  label: (0, h.NC)("Notifications"),
                },
                { id: c.MessageTypes.SUCCESS, label: (0, h.NC)("System") },
              ]),
              (0, s._)(this, "journal_filters", []),
              (0, s._)(this, "unfiltered_messages", []),
              (0, s._)(this, "playAudio", (e) => {
                e !== (0, eP.v)().lists.NOTIFICATION_SOUND[0][1] &&
                  document.getElementById(e).play();
              }),
              (0, r.rC)(this, {
                is_filter_dialog_visible: r.LO,
                journal_filters: r.LO.shallow,
                filters: r.LO.shallow,
                unfiltered_messages: r.LO.shallow,
                toggleFilterDialog: r.aD.bound,
                onLogSuccess: r.aD.bound,
                onError: r.aD.bound,
                onNotify: r.aD.bound,
                pushMessage: r.aD.bound,
                filtered_messages: r.Fl,
                getServerTime: r.aD.bound,
                playAudio: r.aD.bound,
                checked_filters: r.Fl,
                filterMessage: r.aD.bound,
                clear: r.aD.bound,
                registerReactions: r.aD.bound,
                restoreStoredJournals: r.aD.bound,
              }),
              (this.root_store = e),
              (this.core = t),
              (this.disposeReactionsFn = this.registerReactions()),
              this.restoreStoredJournals();
          }
        }
        var e1 = n("26855"),
          e2 = n("49985"),
          e5 = n("42457");
        class e3 {
          get preview_workspace() {
            return this.tab_name === e2.y.TAB_LOCAL
              ? this.local_workspace
              : this.tab_name === e2.y.TAB_RECENT
              ? this.recent_workspace
              : null;
          }
          get selected_strategy() {
            return (
              this.dashboard_strategies.find(
                (e) => e.id === this.selected_strategy_id
              ) ?? this.dashboard_strategies[0]
            );
          }
          get tab_name() {
            if (this.core.ui.is_mobile) {
              if (0 === this.active_index) return e2.y.TAB_LOCAL;
              if (1 === this.active_index) return e2.y.TAB_GOOGLE;
            }
            return 0 === this.active_index
              ? e2.y.TAB_RECENT
              : 1 === this.active_index
              ? e2.y.TAB_LOCAL
              : 2 === this.active_index
              ? e2.y.TAB_GOOGLE
              : "";
          }
          constructor(e, t) {
            var n = this;
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "imported_strategy_type", "pending"),
              (0, s._)(this, "recent_workspace", null),
              (0, s._)(this, "local_workspace", null),
              (0, s._)(this, "drop_zone", void 0),
              (0, s._)(this, "active_index", 0),
              (0, s._)(this, "is_load_modal_open", !1),
              (0, s._)(this, "is_explanation_expand", !1),
              (0, s._)(this, "is_open_button_loading", !1),
              (0, s._)(this, "is_open_button_disabled", !1),
              (0, s._)(this, "loaded_local_file", null),
              (0, s._)(this, "recent_strategies", []),
              (0, s._)(this, "dashboard_strategies", []),
              (0, s._)(this, "selected_strategy_id", ""),
              (0, s._)(this, "is_strategy_loaded", !1),
              (0, s._)(this, "is_delete_modal_open", !1),
              (0, s._)(this, "is_strategy_removed", !1),
              (0, s._)(this, "current_workspace_id", ""),
              (0, s._)(this, "upload_id", ""),
              (0, s._)(this, "setOpenButtonDisabled", (e) => {
                this.is_open_button_disabled = e;
              }),
              (0, s._)(this, "getSelectedStrategyID", (e) => {
                this.current_workspace_id = e;
              }),
              (0, s._)(this, "setDashboardStrategies", (e) => {
                (this.dashboard_strategies = e),
                  !e.length && (this.selected_strategy_id = "");
              }),
              (0, s._)(this, "getDashboardStrategies", async () => {
                let e = await (0, c.getSavedWorkspaces)();
                this.dashboard_strategies = e;
              }),
              (0, s._)(this, "onDriveOpen", async () => {
                let { google_drive: e } = this.root_store,
                  { verifyGoogleDriveAccessToken: t } = e;
                if ("not_verified" === (await t())) return;
                e && (e.upload_id = (0, eL.Z)()),
                  (0, eI.Oi)({
                    upload_provider: "google_drive",
                    upload_id: e.upload_id,
                  });
                let { loadFile: n } = this.root_store.google_drive,
                  i = await n();
                if (!i) return;
                let a = null == i ? void 0 : i.xml_doc,
                  o = null == i ? void 0 : i.file_name;
                await (0, c.load)({
                  block_string: a,
                  file_name: o,
                  workspace: window.Blockly.derivWorkspace,
                  from: c.save_types.GOOGLE_DRIVE,
                  drop_event: null,
                  strategy_id: null,
                  showIncompatibleStrategyDialog: null,
                });
                let { active_tab: s } = this.root_store.dashboard;
                1 === s && this.toggleLoadModal(),
                  (this.root_store.dashboard.is_dialog_open = !1);
              }),
              (0, s._)(this, "onEntered", () => {
                if (
                  0 === this.recent_strategies.length ||
                  this.tab_name !== e2.y.TAB_RECENT
                )
                  return;
                this.setOpenButtonDisabled(!0);
                let { blockly_store: e } = this.root_store,
                  { setLoading: t } = e;
                t(!0),
                  this.loadStrategyOnModalRecentPreview(
                    this.selected_strategy_id
                  ),
                  this.updateXmlValuesOnStrategySelection(),
                  this.setOpenButtonDisabled(!1);
              }),
              (0, s._)(this, "onLoadModalClose", () => {
                this.local_workspace && (this.local_workspace = null),
                  this.setActiveTabIndex(0),
                  this.setLoadedLocalFile(null);
              }),
              (0, s._)(this, "onZoomInOutClick", (e) => {
                this.preview_workspace &&
                  this.preview_workspace.zoomCenter(e ? 1 : -1);
              }),
              (0, s._)(this, "setActiveTabIndex", (e) => {
                this.active_index = e;
              }),
              (0, s._)(this, "setLoadedLocalFile", (e) => {
                this.loaded_local_file = e;
              }),
              (0, s._)(this, "setRecentStrategies", (e) => {
                this.recent_strategies = e;
              }),
              (0, s._)(this, "refreshStrategies", () => {
                this.setRecentStrategies(this.recent_strategies);
              }),
              (0, s._)(this, "setSelectedStrategyId", (e) => {
                this.selected_strategy_id = e;
              }),
              (0, s._)(this, "toggleExplanationExpand", () => {
                this.is_explanation_expand = !this.is_explanation_expand;
              }),
              (0, s._)(this, "toggleLoadModal", () => {
                var e;
                (this.is_load_modal_open = !this.is_load_modal_open),
                  null === (e = this.recent_workspace) ||
                    void 0 === e ||
                    e.dispose(),
                  (this.recent_workspace = null),
                  this.setLoadedLocalFile(null);
              }),
              (0, s._)(this, "toggleTourLoadModal", function () {
                let e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : !n.is_load_modal_open;
                n.is_load_modal_open = e;
              }),
              (0, s._)(this, "updateListStrategies", (e) => {
                e && (this.dashboard_strategies = e);
              }),
              (0, s._)(this, "getSaveType", (e) => {
                switch (e) {
                  case c.save_types.UNSAVED:
                    return (0, h.NC)("Unsaved");
                  case c.save_types.LOCAL:
                    return (0, h.NC)("Local");
                  case c.save_types.GOOGLE_DRIVE:
                    return (0, h.NC)("Google Drive");
                  default:
                    return (0, h.NC)("Unsaved");
                }
              }),
              (0, s._)(this, "onToggleDeleteDialog", (e) => {
                this.is_delete_modal_open = e;
              }),
              (0, s._)(this, "resetBotBuilderStrategy", () => {
                let e = window.Blockly.derivWorkspace;
                e &&
                  (window.Blockly.derivWorkspace.asyncClear(),
                  window.Blockly.Xml.domToWorkspace(
                    window.Blockly.utils.xml.textToDom(e.cached_xml.main),
                    e
                  ),
                  (window.Blockly.derivWorkspace.strategy_to_load =
                    e.cached_xml.main));
              }),
              (0, s._)(this, "loadStrategyToBuilder", async (e) => {
                if (null == e ? void 0 : e.id) {
                  var t;
                  await (0, c.load)({
                    block_string: e.xml,
                    strategy_id: e.id,
                    file_name: e.name,
                    workspace:
                      null === (t = window.Blockly) || void 0 === t
                        ? void 0
                        : t.derivWorkspace,
                    from: e.save_type,
                    drop_event: {},
                    showIncompatibleStrategyDialog: !1,
                  }),
                    (window.Blockly.derivWorkspace.strategy_to_load = e.xml);
                }
              }),
              (0, s._)(this, "refreshStrategiesTheme", async () => {
                var e, t, n, i;
                this.recent_workspace &&
                  (this.recent_workspace.RTL = (0, e1.rK)()),
                  await (0, c.load)({
                    block_string:
                      null === (e = this.selected_strategy) || void 0 === e
                        ? void 0
                        : e.xml,
                    drop_event: {},
                    workspace: this.recent_workspace,
                    file_name:
                      null === (t = this.selected_strategy) || void 0 === t
                        ? void 0
                        : t.name,
                    strategy_id:
                      null === (n = this.selected_strategy) || void 0 === n
                        ? void 0
                        : n.id,
                    from:
                      null === (i = this.selected_strategy) || void 0 === i
                        ? void 0
                        : i.save_type,
                    showIncompatibleStrategyDialog: !1,
                  });
              }),
              (0, s._)(this, "loadFileFromRecent", async () => {
                var e;
                if (
                  ((this.is_open_button_loading = !0), !this.selected_strategy)
                ) {
                  window.Blockly.derivWorkspace.asyncClear(),
                    window.Blockly.Xml.domToWorkspace(
                      window.Blockly.utils.xml.textToDom(
                        window.Blockly.derivWorkspace.strategy_to_load
                      ),
                      window.Blockly.derivWorkspace
                    ),
                    (this.is_open_button_loading = !1);
                  return;
                }
                (0, c.removeExistingWorkspace)(this.selected_strategy.id),
                  await (0, c.load)({
                    block_string:
                      null === (e = this.selected_strategy) || void 0 === e
                        ? void 0
                        : e.xml,
                    strategy_id: this.selected_strategy.id,
                    file_name: this.selected_strategy.name,
                    workspace: window.Blockly.derivWorkspace,
                    from: this.selected_strategy.save_type,
                    drop_event: {},
                    showIncompatibleStrategyDialog: !1,
                  }),
                  (await (0, c.getSavedWorkspaces)()).map((e) => {
                    let { xml: t, id: n } = e;
                    this.selected_strategy.id === n &&
                      (window.Blockly.derivWorkspace.strategy_to_load = t);
                  }),
                  (this.is_open_button_loading = !1);
              }),
              (0, s._)(this, "loadFileFromLocal", () => {
                (this.is_open_button_loading = !0),
                  this.loaded_local_file &&
                    this.readFile(!1, {}, this.loaded_local_file);
              }),
              (0, s._)(this, "onActiveIndexChange", () => {
                this.setOpenButtonDisabled(!0),
                  this.tab_name === e2.y.TAB_RECENT
                    ? (this.loadStrategyOnModalRecentPreview(
                        this.selected_strategy_id
                      ),
                      this.updateXmlValuesOnStrategySelection())
                    : this.recent_workspace &&
                      setTimeout(() => {
                        var e;
                        null === (e = this.recent_workspace) ||
                          void 0 === e ||
                          e.dispose(),
                          (this.recent_workspace = null);
                      }),
                  this.tab_name === e2.y.TAB_LOCAL
                    ? !this.drop_zone &&
                      ((this.drop_zone = document.querySelector(
                        "load-strategy__local-dropzone-area"
                      )),
                      this.drop_zone &&
                        this.drop_zone.addEventListener("drop", (e) =>
                          this.handleFileChange(e, !1)
                        ))
                    : this.local_workspace &&
                      setTimeout(() => {
                        var e;
                        null === (e = this.local_workspace) ||
                          void 0 === e ||
                          e.dispose(),
                          (this.local_workspace = null),
                          this.setLoadedLocalFile(null);
                      }, 0),
                  this.tab_name !== e2.y.TAB_LOCAL &&
                    this.drop_zone &&
                    this.drop_zone.removeEventListener("drop", (e) =>
                      this.handleFileChange(e, !1)
                    ),
                  this.setOpenButtonDisabled(!1);
              }),
              (0, s._)(this, "handleFileChange", function (e) {
                let t,
                  i =
                    !(arguments.length > 1) ||
                    void 0 === arguments[1] ||
                    arguments[1];
                (n.imported_strategy_type = "pending"),
                  (n.upload_id = (0, eL.Z)()),
                  "drop" === e.type
                    ? (e.stopPropagation(),
                      e.preventDefault(),
                      ({ files: t } = e.dataTransfer))
                    : ({ files: t } = e.target);
                let [a] = t;
                if (!i) {
                  if (!a.name.includes("xml")) return !1;
                  n.setLoadedLocalFile(a), n.getDashboardStrategies();
                }
                return n.readFile(!i, e, a), (e.target.value = ""), !0;
              }),
              (0, s._)(this, "readFile", (e, t, n) => {
                let i = new FileReader(),
                  a =
                    (null == n ? void 0 : n.name.replace(/\.[^/.]+$/, "")) ||
                    "";
                (i.onload = (0, r.aD)(async (e) => {
                  var n;
                  let i = {
                    block_string:
                      null == e
                        ? void 0
                        : null === (n = e.target) || void 0 === n
                        ? void 0
                        : n.result,
                    drop_event: t,
                    from: c.save_types.LOCAL,
                    workspace: null,
                    file_name: a,
                    strategy_id: "",
                    showIncompatibleStrategyDialog: !1,
                  };
                  this.local_workspace &&
                    (this.local_workspace.dispose(),
                    (this.local_workspace = null)),
                    this.loadStrategyOnModalLocalPreview(i),
                    this.setOpenButtonDisabled(!1);
                })),
                  i.readAsText(n);
              }),
              (0, s._)(this, "saveStrategyToLocalStorage", async () => {
                var e;
                let { save_modal: t } = this.root_store,
                  { updateBotName: n } = t,
                  {
                    convertedDom: i,
                    from: a,
                    file_name: o,
                  } = window.Blockly.xmlValues;
                n(o), await (0, c.saveWorkspaceToRecent)(i, a);
                let s = await (0, c.getSavedWorkspaces)();
                (null == s ? void 0 : s.length) > 0 &&
                  this.setSelectedStrategyId(
                    null === (e = s[0]) || void 0 === e ? void 0 : e.id
                  );
              }),
              (0, s._)(this, "loadStrategyOnBotBuilder", async () => {
                let {
                    strategy_id: e = window.Blockly.utils.idGenerator.genUid(),
                    convertedDom: t,
                    block_string: n,
                  } = window.Blockly.xmlValues,
                  i = window.Blockly.derivWorkspace;
                window.Blockly.Xml.clearWorkspaceAndLoadFromXml(t, i),
                  i.cleanUp(),
                  i.clearUndo(),
                  (i.current_strategy_id = e);
                let a = (0, eD.dC)(n ?? "");
                (0, eI.WN)({
                  upload_provider: "my_computer",
                  upload_type: a,
                  upload_id: this.upload_id,
                });
              }),
              (0, s._)(this, "updateXmlValuesOnStrategySelection", () => {
                var e, t, n, i, a, o, s;
                0 !== this.recent_strategies.length &&
                  (0, u.ox)({
                    strategy_id: this.selected_strategy_id,
                    convertedDom:
                      null === (a = window) || void 0 === a
                        ? void 0
                        : null === (i = a.Blockly) || void 0 === i
                        ? void 0
                        : null === (n = i.utils) || void 0 === n
                        ? void 0
                        : null === (t = n.xml) || void 0 === t
                        ? void 0
                        : t.textToDom(
                            null === (e = this.selected_strategy) ||
                              void 0 === e
                              ? void 0
                              : e.xml
                          ),
                    file_name:
                      null === (o = this.selected_strategy) || void 0 === o
                        ? void 0
                        : o.name,
                    from:
                      (null === (s = this.selected_strategy) || void 0 === s
                        ? void 0
                        : s.save_type) || c.save_types.UNSAVED,
                  });
              }),
              (0, s._)(this, "loadStrategyOnModalRecentPreview", async (e) => {
                var t, n, i, a, o, s, r, l, d, c;
                if (
                  (this.setOpenButtonDisabled(!0),
                  0 === this.recent_strategies.length ||
                    this.tab_name !== e2.y.TAB_RECENT)
                )
                  return;
                let { blockly_store: h } = this.root_store,
                  { setLoading: p } = h,
                  m = {
                    ...u.Tj,
                    theme:
                      null === (i = window) || void 0 === i
                        ? void 0
                        : null === (n = i.Blockly) || void 0 === n
                        ? void 0
                        : null === (t = n.Themes) || void 0 === t
                        ? void 0
                        : t.zelos_renderer,
                  };
                this.setLoadedLocalFile(null),
                  this.setSelectedStrategyId(e),
                  await (0, e5._)("#load-strategy__blockly-container");
                let _ = document.getElementById(
                  "load-strategy__blockly-container"
                );
                if (_) {
                  !this.recent_workspace &&
                    (this.recent_workspace = window.Blockly.inject(_, m)),
                    (this.recent_workspace.RTL = (0, e1.rK)());
                  let e =
                      null === (r = window.Blockly) || void 0 === r
                        ? void 0
                        : null === (s = r.utils) || void 0 === s
                        ? void 0
                        : null === (o = s.xml) || void 0 === o
                        ? void 0
                        : o.textToDom(
                            null === (a = this.selected_strategy) ||
                              void 0 === a
                              ? void 0
                              : a.xml
                          ),
                    t =
                      null === (l = window.Blockly) || void 0 === l
                        ? void 0
                        : l.getMainWorkspace();
                  null === (c = window.Blockly) ||
                    void 0 === c ||
                    null === (d = c.Xml) ||
                    void 0 === d ||
                    d.clearWorkspaceAndLoadFromXml(e, t);
                }
                p(!1), this.setOpenButtonDisabled(!1);
              }),
              (0, s._)(this, "loadStrategyOnModalLocalPreview", async (e) => {
                var t, n, i;
                this.setOpenButtonDisabled(!0);
                let a = {
                  ...u.Tj,
                  theme:
                    null === (i = window) || void 0 === i
                      ? void 0
                      : null === (n = i.Blockly) || void 0 === n
                      ? void 0
                      : null === (t = n.Themes) || void 0 === t
                      ? void 0
                      : t.zelos_renderer,
                };
                await (0, e5._)("#load-strategy__blockly-container");
                let o = document.getElementById(
                  "load-strategy__blockly-container"
                );
                !this.local_workspace &&
                  (this.local_workspace = await window.Blockly.inject(o, a)),
                  (e.workspace = this.local_workspace),
                  e.workspace && (e.workspace.RTL = (0, e1.rK)());
                let s = (0, eD.dC)((null == e ? void 0 : e.block_string) ?? ""),
                  r = await (0, c.load)(e);
                (null == r ? void 0 : r.error)
                  ? (null == r ? void 0 : r.error) &&
                    (0, eI.mu)({
                      upload_provider: "my_computer",
                      upload_id: this.upload_id,
                      upload_type: s,
                      error_message: r.error,
                    })
                  : (0, eI.Oi)({
                      upload_provider: "my_computer",
                      upload_id: this.upload_id,
                    });
              }),
              (0, r.rC)(this, {
                active_index: r.LO,
                is_load_modal_open: r.LO,
                is_explanation_expand: r.LO,
                is_strategy_loaded: r.LO,
                is_delete_modal_open: r.LO,
                is_strategy_removed: r.LO,
                loaded_local_file: r.LO,
                recent_strategies: r.LO,
                dashboard_strategies: r.LO,
                selected_strategy_id: r.LO,
                current_workspace_id: r.LO,
                upload_id: r.LO,
                preview_workspace: r.Fl,
                selected_strategy: r.Fl,
                tab_name: r.Fl,
                is_open_button_disabled: r.LO,
                setOpenButtonDisabled: r.aD.bound,
                getSelectedStrategyID: r.aD.bound,
                refreshStrategies: r.aD.bound,
                loadStrategyToBuilder: r.aD.bound,
                refreshStrategiesTheme: r.aD.bound,
                handleFileChange: r.aD.bound,
                loadFileFromRecent: r.aD.bound,
                loadFileFromLocal: r.aD.bound,
                imported_strategy_type: r.LO,
                onActiveIndexChange: r.aD.bound,
                onDriveOpen: r.aD.bound,
                onEntered: r.aD.bound,
                onLoadModalClose: r.aD.bound,
                onZoomInOutClick: r.aD.bound,
                setActiveTabIndex: r.aD.bound,
                setLoadedLocalFile: r.aD.bound,
                setRecentStrategies: r.aD.bound,
                setSelectedStrategyId: r.aD.bound,
                toggleExplanationExpand: r.aD.bound,
                toggleLoadModal: r.aD.bound,
                toggleTourLoadModal: r.aD.bound,
                readFile: r.aD.bound,
                resetBotBuilderStrategy: r.aD.bound,
                setDashboardStrategies: r.aD.bound,
                updateListStrategies: r.aD.bound,
                onToggleDeleteDialog: r.aD,
                loadStrategyOnModalRecentPreview: r.aD,
                loadStrategyOnBotBuilder: r.aD,
                saveStrategyToLocalStorage: r.aD,
                updateXmlValuesOnStrategySelection: r.aD,
              }),
              (this.root_store = e),
              (this.core = t),
              (0, r.U5)(
                () => this.active_index,
                () => this.onActiveIndexChange()
              ),
              (0, r.U5)(
                () => this.is_load_modal_open,
                async (e) => {
                  if (e) {
                    let e = await (0, c.getSavedWorkspaces)();
                    e &&
                      (this.setRecentStrategies(e),
                      e.length > 0 &&
                        !this.selected_strategy_id &&
                        this.setSelectedStrategyId(e[0].id));
                  } else this.onLoadModalClose();
                }
              );
          }
        }
        var e9 = n("30810");
        let e6 = (e, t, n, i) => {
          if ("digits" === n || "highlowticks" === n) {
            let n = document.createElement("value");
            n.setAttribute("name", e), n.setAttribute("strategy_value", t);
            let a = document.createElement("shadow");
            a.setAttribute("type", "math_number_positive"),
              a.setAttribute("id", "p0O]7-M{ZORlORxGuIEb");
            let o = document.createElement("field");
            o.setAttribute("name", "NUM"),
              (o.textContent = "0"),
              a.appendChild(o),
              n.appendChild(a);
            let s = i.querySelector('value[name="AMOUNT"]');
            if (s) {
              let e = s.parentNode;
              e && e.insertBefore(n, s.nextSibling);
            }
          }
          if ("PREDICTION" === e && i) {
            let e = i.querySelector(
              'block[type="trade_definition_tradeoptions"] > mutation'
            );
            e && e.setAttribute("has_prediction", "true");
          }
        };
        var e8 = n("85414");
        class e4 {
          constructor(e) {
            var t = this;
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "is_open", !1),
              (0, s._)(this, "selected_strategy", "MARTINGALE"),
              (0, s._)(this, "form_data", {
                symbol: (0, c.config)().QUICK_STRATEGY.DEFAULT.symbol,
                tradetype: (0, c.config)().QUICK_STRATEGY.DEFAULT.tradetype,
                durationtype: (0, c.config)().QUICK_STRATEGY.DEFAULT
                  .durationtype,
                action: "RUN",
              }),
              (0, s._)(this, "is_contract_dialog_open", !1),
              (0, s._)(this, "is_stop_bot_dialog_open", !1),
              (0, s._)(this, "current_duration_min_max", { min: 0, max: 10 }),
              (0, s._)(this, "loss_threshold_warning_data", { show: !1 }),
              (0, s._)(this, "additional_data", {}),
              (0, s._)(this, "setAdditionalData", (e) => {
                this.additional_data = { ...this.additional_data, ...e };
              }),
              (0, s._)(this, "setLossThresholdWarningData", (e) => {
                this.loss_threshold_warning_data = {
                  ...this.loss_threshold_warning_data,
                  ...e,
                };
              }),
              (0, s._)(this, "initializeLossThresholdWarningData", () => {
                this.loss_threshold_warning_data = {
                  show: !1,
                  highlight_field: [],
                  already_shown: !1,
                };
              }),
              (0, s._)(this, "setFormVisibility", (e) => {
                this.is_open = e;
              }),
              (0, s._)(this, "setSelectedStrategy", (e) => {
                this.selected_strategy = e;
              }),
              (0, s._)(this, "setValue", (e, t) => {
                this.form_data[e] = t;
              }),
              (0, s._)(this, "setCurrentDurationMinMax", function () {
                let e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : 0,
                  n =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : 10;
                t.current_duration_min_max = { min: e, max: n };
              }),
              (0, s._)(this, "onSubmit", async (e) => {
                let { contracts_for: t } =
                  (null === c.ApiHelpers || void 0 === c.ApiHelpers
                    ? void 0
                    : c.ApiHelpers.instance) ?? {};
                if (!t) return;
                let i = await t.getMarketBySymbol(e.symbol),
                  a = await t.getSubmarketBySymbol(e.symbol),
                  o = await t.getTradeTypeCategoryByTradeType(e.tradetype),
                  s = (0, e8.j)()[this.selected_strategy],
                  r = await n(5765)(`./${s.name}.xml`),
                  l = window.Blockly.utils.xml.textToDom(r.default);
                e6("PREDICTION", "last_digit_prediction", o, l);
                let d = (e, t) => {
                    let n =
                      null == l
                        ? void 0
                        : l.querySelectorAll(`value[strategy_value="${e}"]`);
                    null == n ||
                      n.forEach((n) => {
                        e.includes("boolean")
                          ? t
                            ? (n.innerHTML =
                                '<block type="logic_boolean"><field name="BOOL">TRUE</field></block>')
                            : (n.innerHTML =
                                '<block type="logic_boolean"><field name="BOOL">FALSE</field></block>')
                          : (n.innerHTML = `<shadow type="math_number"><field name="NUM">${t}</field></shadow>`);
                      });
                  },
                  u = (e, t) => {
                    let n = `${e.toUpperCase()}_LIST`,
                      i =
                        null == l
                          ? void 0
                          : l.querySelectorAll(`field[name="${n}"]`);
                    null == i ||
                      i.forEach((e) => {
                        e.innerHTML = t;
                      });
                  },
                  { unit: h, action: p, type: m, growth_rate: _, ...f } = e,
                  b = {
                    market: i,
                    submarket: a,
                    tradetypecat: o,
                    dalembert_unit: h,
                    oscar_unit: h,
                    type: "both",
                    ...f,
                    purchase: m,
                    growthrate: _ ? _.toString() : void 0,
                  };
                Object.keys(b).forEach((e) => {
                  let t = b[e];
                  isNaN(t) || "growthrate" === e
                    ? "string" == typeof t && u(e, t)
                    : d(e, t);
                });
                let { derivWorkspace: y } = Blockly;
                "RUN" === p &&
                  (null == y ||
                    y
                      .waitForBlockEvent({
                        block_type: "trade_definition",
                        event_type: window.Blockly.Events.BLOCK_CREATE,
                        timeout: 5e3,
                      })
                      .then(() => {
                        this.root_store.run_panel.onRunButtonClick();
                      })),
                  this.setFormVisibility(!1),
                  (0, S.J)((0, O.xG)()[O.tx.BOT_IMPORT]),
                  await (0, c.load)({
                    block_string: window.Blockly.Xml.domToText(l),
                    file_name: s.label,
                    workspace: y,
                    from: e9.R.UNSAVED,
                    drop_event: null,
                    strategy_id: null,
                    showIncompatibleStrategyDialog: null,
                  });
              }),
              (0, s._)(this, "toggleStopBotDialog", () => {
                (this.is_contract_dialog_open = !this.is_contract_dialog_open),
                  (this.is_stop_bot_dialog_open =
                    !this.is_stop_bot_dialog_open),
                  this.setFormVisibility(!1);
              }),
              (0, r.rC)(this, {
                additional_data: r.LO,
                current_duration_min_max: r.LO,
                form_data: r.LO,
                is_contract_dialog_open: r.LO,
                is_open: r.LO,
                is_stop_bot_dialog_open: r.LO,
                initializeLossThresholdWarningData: r.aD,
                selected_strategy: r.LO,
                loss_threshold_warning_data: r.LO,
                onSubmit: r.aD,
                setAdditionalData: r.aD,
                setCurrentDurationMinMax: r.aD,
                setFormVisibility: r.aD,
                setSelectedStrategy: r.aD,
                setLossThresholdWarningData: r.aD,
                setValue: r.aD,
                toggleStopBotDialog: r.aD,
              }),
              (this.root_store = e),
              (0, r.U5)(
                () => this.is_open,
                () => {
                  !this.is_open && (this.selected_strategy = "MARTINGALE");
                }
              );
          }
        }
        var e7 = n("80177");
        let te = Object.freeze({ SUMMARY: 0, TRANSACTIONS: 1, JOURNAL: 2 }),
          tt = {
            keep_current_contract: (0, a.jsx)(h.Xx, {
              i18n_default_text:
                "Would you like to keep your current contract or close it? If you decide to keep it running, you can check and close it later on the <0>Reports</0> page.",
              components: [
                (0, a.jsx)(
                  "a",
                  {
                    className: "link",
                    rel: "noopener noreferrer",
                    target: "_blank",
                    href: "/reports/positions",
                  },
                  0
                ),
              ],
            }),
          };
        class tn {
          get is_stop_button_visible() {
            return this.is_running || this.has_open_contract;
          }
          get is_stop_button_disabled() {
            return (
              !this.is_contracy_buying_in_progress &&
              [e7.K.PURCHASE_SENT, e7.K.IS_STOPPING].includes(
                this.contract_stage
              )
            );
          }
          get is_clear_stat_disabled() {
            var e;
            let { journal: t, transactions: n } = this.root_store;
            return (
              this.is_running ||
              this.has_open_contract ||
              (0 === t.unfiltered_messages.length &&
                (null == n
                  ? void 0
                  : null === (e = n.transactions) || void 0 === e
                  ? void 0
                  : e.length) === 0)
            );
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "dbot", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "disposeReactionsFn", void 0),
              (0, s._)(this, "timer", void 0),
              (0, s._)(this, "active_index", 0),
              (0, s._)(this, "contract_stage", e7.K.NOT_RUNNING),
              (0, s._)(this, "dialog_options", {}),
              (0, s._)(this, "has_open_contract", !1),
              (0, s._)(this, "is_running", !1),
              (0, s._)(this, "is_statistics_info_modal_open", !1),
              (0, s._)(this, "is_drawer_open", !0),
              (0, s._)(this, "is_dialog_open", !1),
              (0, s._)(this, "is_sell_requested", !1),
              (0, s._)(this, "show_bot_stop_message", !1),
              (0, s._)(this, "is_contracy_buying_in_progress", !1),
              (0, s._)(this, "run_id", ""),
              (0, s._)(this, "onOkButtonClick", null),
              (0, s._)(this, "onCancelButtonClick", null),
              (0, s._)(this, "error_type", void 0),
              (0, s._)(this, "setShowBotStopMessage", (e) => {
                (this.show_bot_stop_message = e),
                  e &&
                    (0, S.J)((0, O.xG)().bot_stop, {
                      label: (0, h.NC)("Reports"),
                      onClick: () => {
                        let e = (0, u.dd)(),
                          t = new URL(d.xOw.positions);
                        t.searchParams.set("contract_type_bots", e),
                          window.location.assign(t.toString());
                      },
                    });
              }),
              (0, s._)(this, "performSelfExclusionCheck", async () => {
                let { self_exclusion: e } = this.root_store;
                await e.checkRestriction();
              }),
              (0, s._)(this, "onRunButtonClick", async () => {
                let e = 1;
                window.sendRequestsStatistic &&
                  (performance.clearMeasures(),
                  (this.timer = setInterval(() => {
                    window.sendRequestsStatistic(!0),
                      performance.clearMeasures(),
                      12 === e ? clearInterval(this.timer) : e++;
                  }, 1e4)));
                let { summary_card: t, self_exclusion: n } = this.root_store,
                  { client: i, ui: a } = this.core,
                  o = "iOS" === (0, d._Xx)();
                if (
                  (this.dbot.saveRecentWorkspace(),
                  this.dbot.unHighlightAllBlocks(),
                  !i.is_logged_in)
                ) {
                  this.showLoginDialog();
                  return;
                }
                if (
                  ((o || (0, d.G6W)()) && this.preloadAudio(),
                  !n.should_bot_run)
                ) {
                  n.setIsRestricted(!0);
                  return;
                }
                if (
                  (n.setIsRestricted(!1),
                  this.registerBotListeners(),
                  !this.dbot.shouldRunBot())
                ) {
                  this.unregisterBotListeners();
                  return;
                }
                null == a ||
                  a.setAccountSwitcherDisabledMessage(
                    (0, h.NC)(
                      "Account switching is disabled while your bot is running. Please stop your bot before switching accounts."
                    )
                  ),
                  (0, r.z)(() => {
                    this.setIsRunning(!0),
                      a.setPromptHandler(!0),
                      this.toggleDrawer(!0),
                      (this.run_id = `run-${Date.now()}`),
                      t.clear(),
                      this.setContractStage(e7.K.STARTING),
                      this.dbot.runBot();
                  }),
                  this.setShowBotStopMessage(!1);
              }),
              (0, s._)(this, "onStopButtonClick", () => {
                this.is_contracy_buying_in_progress = !1;
                let { is_multiplier: e } = this.root_store.summary_card;
                e ? this.showStopMultiplierContractDialog() : this.stopBot();
              }),
              (0, s._)(this, "onStopBotClick", () => {
                let { is_multiplier: e } = this.root_store.summary_card,
                  { summary_card: t } = this.root_store;
                e
                  ? this.showStopMultiplierContractDialog()
                  : (this.stopBot(), t.clear(), this.setShowBotStopMessage(!0));
              }),
              (0, s._)(this, "stopBot", () => {
                let { ui: e } = this.core;
                this.dbot.stopBot(),
                  e.setPromptHandler(!1),
                  this.error_type
                    ? (this.setContractStage(e7.K.NOT_RUNNING),
                      e.setAccountSwitcherDisabledMessage(),
                      this.setIsRunning(!1))
                    : this.has_open_contract
                    ? this.setContractStage(e7.K.IS_STOPPING)
                    : (this.setContractStage(e7.K.NOT_RUNNING),
                      this.unregisterBotListeners(),
                      e.setAccountSwitcherDisabledMessage(),
                      this.setIsRunning(!1)),
                  this.error_type && (this.error_type = void 0),
                  this.timer && clearInterval(this.timer),
                  window.sendRequestsStatistic &&
                    (window.sendRequestsStatistic(!0),
                    performance.clearMeasures());
              }),
              (0, s._)(this, "onClearStatClick", () => {
                this.showClearStatDialog();
              }),
              (0, s._)(this, "clearStat", () => {
                let {
                  summary_card: e,
                  journal: t,
                  transactions: n,
                } = this.root_store;
                this.setIsRunning(!1),
                  this.setHasOpenContract(!1),
                  this.clear(),
                  t.clear(),
                  e.clear(),
                  n.clear(),
                  this.setContractStage(e7.K.NOT_RUNNING);
              }),
              (0, s._)(this, "toggleStatisticsInfoModal", () => {
                this.is_statistics_info_modal_open =
                  !this.is_statistics_info_modal_open;
              }),
              (0, s._)(this, "toggleDrawer", (e) => {
                this.is_drawer_open = e;
              }),
              (0, s._)(this, "setActiveTabIndex", (e) => {
                this.active_index = e;
              }),
              (0, s._)(this, "onCloseDialog", () => {
                this.is_dialog_open = !1;
              }),
              (0, s._)(this, "stopMyBot", () => {
                let { summary_card: e, quick_strategy: t } = this.root_store,
                  { ui: n } = this.core,
                  { toggleStopBotDialog: i } = t;
                n.setPromptHandler(!1),
                  this.dbot.terminateBot(),
                  this.onCloseDialog(),
                  e.clear(),
                  i(),
                  this.timer && clearInterval(this.timer),
                  window.sendRequestsStatistic &&
                    (window.sendRequestsStatistic(!0),
                    performance.clearMeasures());
              }),
              (0, s._)(this, "closeMultiplierContract", () => {
                let { quick_strategy: e } = this.root_store,
                  { toggleStopBotDialog: t } = e;
                this.onClickSell(), this.stopBot(), this.onCloseDialog(), t();
              }),
              (0, s._)(this, "showStopMultiplierContractDialog", () => {
                let { summary_card: e } = this.root_store,
                  { ui: t } = this.core;
                (this.onOkButtonClick = () => {
                  t.setPromptHandler(!1),
                    this.dbot.terminateBot(),
                    this.timer && clearInterval(this.timer),
                    window.sendRequestsStatistic &&
                      (window.sendRequestsStatistic(!0),
                      performance.clearMeasures()),
                    this.onCloseDialog(),
                    e.clear();
                }),
                  (this.onCancelButtonClick = () => {
                    this.onClickSell(), this.stopBot(), this.onCloseDialog();
                  }),
                  (this.dialog_options = {
                    title: (0, h.NC)("Keep your current contract?"),
                    message: tt.keep_current_contract,
                    ok_button_text: (0, h.NC)("Keep my contract"),
                    cancel_button_text: (0, h.NC)("Close my contract"),
                  }),
                  (this.is_dialog_open = !0);
              }),
              (0, s._)(this, "showLoginDialog", () => {
                (this.onOkButtonClick = this.onCloseDialog),
                  (this.onCancelButtonClick = null),
                  (this.dialog_options = {
                    title: (0, h.NC)("Please log in"),
                    message: (0, h.NC)("You need to log in to run the bot."),
                  }),
                  (this.is_dialog_open = !0);
              }),
              (0, s._)(this, "showRealAccountDialog", () => {
                (this.onOkButtonClick = this.onCloseDialog),
                  (this.onCancelButtonClick = null),
                  (this.dialog_options = {
                    title: (0, h.NC)(
                      "Oruchotrader isn't quite ready for real accounts"
                    ),
                    message: (0, h.NC)(
                      "Please switch to your demo account to run your Oruchotrader."
                    ),
                  }),
                  (this.is_dialog_open = !0);
              }),
              (0, s._)(this, "showClearStatDialog", () => {
                (this.onOkButtonClick = () => {
                  this.clearStat(), this.onCloseDialog();
                }),
                  (this.onCancelButtonClick = this.onCloseDialog),
                  (this.dialog_options = {
                    title: (0, h.NC)("Are you sure?"),
                    message: (0, h.NC)(
                      "This will clear all data in the summary, transactions, and journal panels. All counters will be reset to zero."
                    ),
                  }),
                  (this.is_dialog_open = !0);
              }),
              (0, s._)(this, "showIncompatibleStrategyDialog", () => {
                (this.onOkButtonClick = this.onCloseDialog),
                  (this.onCancelButtonClick = null),
                  (this.dialog_options = {
                    title: (0, h.NC)("Import error"),
                    message: (0, h.NC)(
                      "This strategy is currently not compatible with Oruchotrader."
                    ),
                  }),
                  (this.is_dialog_open = !0);
              }),
              (0, s._)(this, "showContractUpdateErrorDialog", (e) => {
                (this.onOkButtonClick = this.onCloseDialog),
                  (this.onCancelButtonClick = null),
                  (this.dialog_options = {
                    title: (0, h.NC)("Contract Update Error"),
                    message: e,
                  }),
                  (this.is_dialog_open = !0);
              }),
              (0, s._)(this, "registerBotListeners", () => {
                let { summary_card: e, transactions: t } = this.root_store;
                c.observer.register("bot.running", this.onBotRunningEvent),
                  c.observer.register("bot.sell", this.onBotSellEvent),
                  c.observer.register("bot.stop", this.onBotStopEvent),
                  c.observer.register("bot.bot_ready", this.onBotReadyEvent),
                  c.observer.register("bot.click_stop", this.onStopButtonClick),
                  c.observer.register("bot.trade_again", this.onBotTradeAgain),
                  c.observer.register(
                    "contract.status",
                    this.onContractStatusEvent
                  ),
                  c.observer.register("bot.contract", this.onBotContractEvent),
                  c.observer.register("bot.contract", e.onBotContractEvent),
                  c.observer.register("bot.contract", t.onBotContractEvent),
                  c.observer.register("Error", this.onError),
                  c.observer.register(
                    "bot.recoverOpenPositionLimitExceeded",
                    this.OpenPositionLimitExceededEvent
                  );
              }),
              (0, s._)(
                this,
                "OpenPositionLimitExceededEvent",
                () => (this.is_contracy_buying_in_progress = !0)
              ),
              (0, s._)(this, "registerReactions", () => {
                let e, t;
                let { client: n, common: i } = this.core,
                  a = () => {
                    i.is_socket_opened
                      ? (e = (0, r.U5)(
                          () => n.loginid,
                          (e) => {
                            e && this.is_running,
                              this.dbot.terminateBot(),
                              this.unregisterBotListeners();
                          }
                        ))
                      : "function" == typeof t && t();
                  };
                a(),
                  (t = (0, r.U5)(
                    () => i.is_socket_opened,
                    () => a()
                  ));
                let o = (0, r.U5)(
                  () => !this.is_running,
                  () => {
                    !this.is_running && this.setContractStage(e7.K.NOT_RUNNING);
                  }
                );
                return () => {
                  "function" == typeof e && e(),
                    "function" == typeof t && t(),
                    "function" == typeof o && o();
                };
              }),
              (0, s._)(this, "onBotRunningEvent", () => {
                this.setHasOpenContract(!0);
                let e = new Event("IgnorePWAUpdate");
                document.dispatchEvent(e);
                let { self_exclusion: t } = this.root_store;
                t.should_bot_run &&
                  -1 !== t.run_limit &&
                  ((t.run_limit -= 1),
                  t.run_limit < 0 && this.onStopButtonClick());
              }),
              (0, s._)(this, "onBotSellEvent", () => {
                this.is_sell_requested = !0;
              }),
              (0, s._)(this, "onBotStopEvent", () => {
                let { self_exclusion: e, summary_card: t } = this.root_store,
                  { ui: n } = this.core,
                  i = () => {
                    (this.error_type = void 0),
                      this.setContractStage(e7.K.NOT_RUNNING),
                      n.setAccountSwitcherDisabledMessage(),
                      this.unregisterBotListeners(),
                      e.resetSelfExclusion();
                  };
                if (this.error_type === c.ErrorTypes.RECOVERABLE_ERRORS) {
                  var a, o, s, r;
                  let {
                    shouldRestartOnError: e = !1,
                    timeMachineEnabled: t = !1,
                  } =
                    (null === (r = this.dbot) || void 0 === r
                      ? void 0
                      : null === (s = r.interpreter) || void 0 === s
                      ? void 0
                      : null === (o = s.bot) || void 0 === o
                      ? void 0
                      : null === (a = o.tradeEngine) || void 0 === a
                      ? void 0
                      : a.options) ?? {};
                  e || t
                    ? ((this.error_type = void 0),
                      this.setContractStage(e7.K.PURCHASE_SENT))
                    : (this.setIsRunning(!1), i());
                } else
                  this.error_type === c.ErrorTypes.UNRECOVERABLE_ERRORS
                    ? (this.setIsRunning(!1), i())
                    : this.has_open_contract &&
                      ((this.error_type = void 0),
                      (this.is_sell_requested = !1),
                      this.setContractStage(e7.K.CONTRACT_CLOSED),
                      n.setAccountSwitcherDisabledMessage(),
                      this.unregisterBotListeners(),
                      e.resetSelfExclusion());
                this.setHasOpenContract(!1),
                  t.clearContractUpdateConfigValues();
                let l = new Event("ListenPWAUpdate");
                document.dispatchEvent(l);
              }),
              (0, s._)(this, "onBotReadyEvent", () => {
                this.setIsRunning(!1),
                  c.observer.unregisterAll("bot.bot_ready");
              }),
              (0, s._)(this, "onBotTradeAgain", (e) => {
                !e && this.stopBot();
              }),
              (0, s._)(this, "onContractStatusEvent", (e) => {
                switch (e.id) {
                  case "contract.purchase_sent":
                    this.setContractStage(e7.K.PURCHASE_SENT);
                    break;
                  case "contract.purchase_received": {
                    (this.is_contracy_buying_in_progress = !1),
                      this.setContractStage(e7.K.PURCHASE_RECEIVED);
                    let { buy: n } = e,
                      { is_virtual: i } = this.core.client;
                    if (!i && n) {
                      var t;
                      null === eA.default ||
                        void 0 === eA.default ||
                        null === (t = eA.default.pushDataLayer) ||
                        void 0 === t ||
                        t.call(eA.default, {
                          event: "dbot_purchase",
                          buy_price: n.buy_price,
                        });
                    }
                    break;
                  }
                  case "contract.sold":
                    (this.is_sell_requested = !1),
                      this.setContractStage(e7.K.CONTRACT_CLOSED),
                      e.contract && eA.default.onTransactionClosed(e.contract);
                }
              }),
              (0, s._)(this, "onClickSell", () => {
                let { is_multiplier: e } = this.root_store.summary_card;
                e && this.setContractStage(e7.K.IS_STOPPING),
                  this.dbot.interpreter.bot.getInterface().sellAtMarket();
              }),
              (0, s._)(this, "clear", () => {
                c.observer.emit("statistics.clear");
              }),
              (0, s._)(this, "onBotContractEvent", (e) => {
                (null == e ? void 0 : e.is_sold) &&
                  ((this.is_sell_requested = !1),
                  this.setContractStage(e7.K.CONTRACT_CLOSED));
              }),
              (0, s._)(this, "onError", (e) => {
                let t = e.error || e;
                c.unrecoverable_errors.includes(t.code)
                  ? (this.root_store.summary_card.clear(),
                    (this.error_type = c.ErrorTypes.UNRECOVERABLE_ERRORS))
                  : (this.error_type = c.ErrorTypes.RECOVERABLE_ERRORS);
                let n = null == t ? void 0 : t.message;
                this.showErrorMessage(n);
              }),
              (0, s._)(this, "showErrorMessage", (e) => {
                let { journal: t } = this.root_store,
                  { ui: n } = this.core;
                t.onError(e),
                  t.journal_filters.some((e) => e === c.MessageTypes.ERROR) &&
                    (this.toggleDrawer(!0),
                    this.setActiveTabIndex(te.JOURNAL),
                    n.setPromptHandler(!1));
              }),
              (0, s._)(this, "switchToJournal", () => {
                let { journal: e } = this.root_store;
                e.journal_filters.push(c.MessageTypes.ERROR),
                  this.setActiveTabIndex(te.JOURNAL),
                  this.toggleDrawer(!0);
              }),
              (0, s._)(this, "unregisterBotListeners", () => {
                c.observer.unregisterAll("bot.running"),
                  c.observer.unregisterAll("bot.stop"),
                  c.observer.unregisterAll("bot.click_stop"),
                  c.observer.unregisterAll("bot.trade_again"),
                  c.observer.unregisterAll("contract.status"),
                  c.observer.unregisterAll("bot.contract"),
                  c.observer.unregisterAll("Error");
              }),
              (0, s._)(this, "setContractStage", (e) => {
                this.contract_stage = e;
              }),
              (0, s._)(this, "setHasOpenContract", (e) => {
                this.has_open_contract = e;
              }),
              (0, s._)(this, "setIsRunning", (e) => {
                this.is_running = e;
              }),
              (0, s._)(this, "onMount", () => {
                let { journal: e } = this.root_store;
                c.observer.register("ui.log.error", this.showErrorMessage),
                  c.observer.register("ui.log.notify", e.onNotify),
                  c.observer.register("ui.log.success", e.onLogSuccess),
                  c.observer.register(
                    "client.invalid_token",
                    this.handleInvalidToken
                  );
              }),
              (0, s._)(this, "onUnmount", () => {
                let {
                  journal: e,
                  summary_card: t,
                  transactions: n,
                } = this.root_store;
                !this.is_running &&
                  (this.unregisterBotListeners(),
                  this.disposeReactionsFn(),
                  e.disposeReactionsFn(),
                  t.disposeReactionsFn(),
                  n.disposeReactionsFn()),
                  c.observer.unregisterAll("ui.log.error"),
                  c.observer.unregisterAll("ui.log.notify"),
                  c.observer.unregisterAll("ui.log.success"),
                  c.observer.unregisterAll("client.invalid_token");
              }),
              (0, s._)(this, "handleInvalidToken", async () => {
                this.setActiveTabIndex(te.SUMMARY);
              }),
              (0, s._)(this, "preloadAudio", () => {
                this.dbot.getStrategySounds().forEach((e) => {
                  let t = document.getElementById(e);
                  t &&
                    ((t.muted = !0),
                    t.play().catch(() => {}),
                    t.pause(),
                    (t.muted = !1));
                });
              }),
              (0, r.rC)(this, {
                active_index: r.LO,
                contract_stage: r.LO,
                dialog_options: r.LO,
                has_open_contract: r.LO,
                is_running: r.LO,
                is_statistics_info_modal_open: r.LO,
                is_drawer_open: r.LO,
                is_dialog_open: r.LO,
                is_sell_requested: r.LO,
                run_id: r.LO,
                error_type: r.LO,
                show_bot_stop_message: r.LO,
                is_stop_button_visible: r.Fl,
                is_stop_button_disabled: r.Fl,
                is_clear_stat_disabled: r.Fl,
                toggleDrawer: r.aD,
                onBotSellEvent: r.aD,
                setContractStage: r.aD,
                setHasOpenContract: r.aD,
                setIsRunning: r.aD,
                onRunButtonClick: r.aD,
                is_contracy_buying_in_progress: r.LO,
                OpenPositionLimitExceededEvent: r.aD,
                onStopButtonClick: r.aD,
                onClearStatClick: r.aD,
                clearStat: r.aD,
                toggleStatisticsInfoModal: r.aD,
                setActiveTabIndex: r.aD,
                onCloseDialog: r.aD,
                stopMyBot: r.aD,
                closeMultiplierContract: r.aD,
                showStopMultiplierContractDialog: r.aD,
                showLoginDialog: r.aD,
                showRealAccountDialog: r.aD,
                showClearStatDialog: r.aD,
                showIncompatibleStrategyDialog: r.aD,
                showContractUpdateErrorDialog: r.aD,
                registerBotListeners: r.aD,
                registerReactions: r.aD,
                onBotRunningEvent: r.aD,
                onBotStopEvent: r.aD,
                onBotReadyEvent: r.aD,
                onBotTradeAgain: r.aD,
                onContractStatusEvent: r.aD,
                onClickSell: r.aD,
                clear: r.aD,
                onBotContractEvent: r.aD,
                onError: r.aD,
                showErrorMessage: r.aD,
                switchToJournal: r.aD,
                unregisterBotListeners: r.aD,
                handleInvalidToken: r.aD,
                preloadAudio: r.aD,
                onMount: r.aD,
                onUnmount: r.aD,
              }),
              (this.root_store = e),
              (this.dbot = this.root_store.dbot),
              (this.core = t),
              (this.disposeReactionsFn = this.registerReactions()),
              (this.timer = null);
          }
        }
        var ti = n("69483"),
          ta = n.n(ti);
        let to = window.Blockly;
        class ts {
          constructor(e) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "is_save_modal_open", !1),
              (0, s._)(this, "button_status", eO.NORMAL),
              (0, s._)(this, "bot_name", ""),
              (0, s._)(this, "toggleSaveModal", () => {
                !this.is_save_modal_open && this.setButtonStatus(eO.NORMAL),
                  (this.is_save_modal_open = !this.is_save_modal_open);
              }),
              (0, s._)(this, "validateBotName", (e) => {
                let t = {};
                return (
                  "" === e.bot_name.trim() &&
                    (t.bot_name = (0, h.NC)("Strategy name cannot be empty")),
                  t
                );
              }),
              (0, s._)(
                this,
                "addStrategyToWorkspace",
                async (e, t, n, i, a) => {
                  try {
                    var o;
                    let s = await (0, c.getSavedWorkspaces)(),
                      r = s.findIndex((t) => t.id === e),
                      {
                        load_modal: { getSaveType: l },
                      } = this.root_store,
                      d = t ? c.save_types.LOCAL : c.save_types.GOOGLE_DRIVE,
                      u = n ? c.save_types.UNSAVED : d,
                      h =
                        null === (o = l(u)) || void 0 === o
                          ? void 0
                          : o.toLowerCase(),
                      p = {
                        id: e,
                        xml: window.Blockly.Xml.domToText(a),
                        name: i,
                        timestamp: Date.now(),
                        save_type: h,
                      };
                    r >= 0 ? (s[r] = p) : s.push(p),
                      s
                        .sort(
                          (e, t) =>
                            new Date(e.timestamp) - new Date(t.timestamp)
                        )
                        .reverse(),
                      s.length > m.xc && s.pop();
                    let { load_modal: _ } = this.root_store,
                      { setRecentStrategies: f } = _;
                    ta().setItem(
                      "saved_workspaces",
                      ez().compress(JSON.stringify(s))
                    );
                    let b = await (0, c.getSavedWorkspaces)();
                    f(b);
                    let {
                      dashboard: { setStrategySaveType: y },
                    } = this.root_store;
                    y(h);
                  } catch (e) {
                    c.observer.emit("Error", e);
                  }
                }
              ),
              (0, s._)(this, "onConfirmSave", async (e) => {
                var t, n, i, a, o, s;
                let r,
                  { is_local: l, save_as_collection: d, bot_name: u } = e,
                  {
                    load_modal: h,
                    dashboard: p,
                    google_drive: m,
                  } = this.root_store,
                  { loadStrategyToBuilder: _, selected_strategy: f } = h,
                  { active_tab: b } = p;
                this.setButtonStatus(eO.LOADING);
                let { saveFile: y } = m,
                  v = null;
                if (
                  (1 === b
                    ? (r =
                        null === (i = window.Blockly) || void 0 === i
                          ? void 0
                          : null === (n = i.Xml) || void 0 === n
                          ? void 0
                          : n.workspaceToDom(
                              null === (t = window.Blockly) || void 0 === t
                                ? void 0
                                : t.derivWorkspace
                            ))
                    : (((v =
                        null ===
                          (a = (await (0, c.getSavedWorkspaces)()).filter(
                            (e) => e.id === f.id
                          )) || void 0 === a
                          ? void 0
                          : a[0]).name = u),
                      (v.save_type = l
                        ? c.save_types.LOCAL
                        : c.save_types.GOOGLE_DRIVE),
                      (r = window.Blockly.utils.xml.textToDom(v.xml))),
                  r.setAttribute("is_dbot", "true"),
                  r.setAttribute("collection", d ? "true" : "false"),
                  l
                    ? (0, c.save)(u, d, r)
                    : (await y({
                        name: u,
                        content:
                          null == to
                            ? void 0
                            : null === (o = to.Xml) || void 0 === o
                            ? void 0
                            : o.domToPrettyText(r),
                        mimeType: "application/xml",
                      }),
                      this.setButtonStatus(eO.COMPLETED)),
                  this.updateBotName(u),
                  0 === b)
                ) {
                  let e =
                    f.id ??
                    (null == to
                      ? void 0
                      : null === (s = to.utils) || void 0 === s
                      ? void 0
                      : s.genUid());
                  await this.addStrategyToWorkspace(e, l, d, u, r),
                    v && (await _(v));
                } else
                  await (0, c.saveWorkspaceToRecent)(
                    r,
                    l ? c.save_types.LOCAL : c.save_types.GOOGLE_DRIVE
                  );
                this.toggleSaveModal();
              }),
              (0, s._)(this, "updateBotName", (e) => {
                this.bot_name = e;
              }),
              (0, s._)(this, "onDriveConnect", async () => {
                let { google_drive: e } = this.root_store;
                e.is_authorised ? e.signOut() : e.signIn();
              }),
              (0, s._)(this, "setButtonStatus", (e) => {
                this.button_status = e;
              }),
              (0, r.rC)(this, {
                is_save_modal_open: r.LO,
                button_status: r.LO,
                bot_name: r.LO,
                toggleSaveModal: r.aD.bound,
                validateBotName: r.aD.bound,
                onConfirmSave: r.aD.bound,
                updateBotName: r.aD.bound,
                onDriveConnect: r.aD.bound,
                setButtonStatus: r.aD.bound,
              }),
              (this.root_store = e);
          }
        }
        var tr = n("87383");
        class tl {
          get initial_values() {
            return {
              form_max_losses: this.api_max_losses || "",
              run_limit: -1 !== this.run_limit ? this.run_limit : "",
            };
          }
          get should_bot_run() {
            let { client: e } = this.core;
            return (
              (!e.is_eu ||
                !!e.is_virtual ||
                (0 !== this.api_max_losses && -1 !== this.run_limit)) &&
              !0
            );
          }
          setIsRestricted(e) {
            this.is_restricted = e;
          }
          setApiMaxLosses(e) {
            this.api_max_losses = e;
          }
          setRunLimit(e) {
            this.run_limit = e;
          }
          resetSelfExclusion() {
            (this.is_restricted = !1),
              (this.api_max_losses = 0),
              (this.form_max_losses = 0),
              (this.run_limit = -1);
          }
          async checkRestriction() {
            c.api_base.api &&
              c.api_base.is_authorized &&
              (0, tr.Bc)() &&
              c.api_base.api.getSelfExclusion().then((e) => {
                let { get_self_exclusion: t } = e,
                  { max_losses: n } = t;
                n && this.setApiMaxLosses(n);
              });
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "api_max_losses", 0),
              (0, s._)(this, "run_limit", -1),
              (0, s._)(this, "is_restricted", !1),
              (0, s._)(this, "form_max_losses", void 0),
              (0, r.rC)(this, {
                api_max_losses: r.LO,
                run_limit: r.LO,
                is_restricted: r.LO,
                initial_values: r.Fl,
                should_bot_run: r.Fl,
                setIsRestricted: r.aD.bound,
                setApiMaxLosses: r.aD.bound,
                setRunLimit: r.aD.bound,
                resetSelfExclusion: r.aD.bound,
                checkRestriction: r.aD.bound,
              }),
              (this.root_store = e),
              (this.core = t);
          }
        }
        var td = n("88817");
        let tc = (e) => {
          let { stop_loss: t, take_profit: n } = (0, d.gNN)(e);
          return {
            contract_update_stop_loss: t ? Math.abs(t).toString() : "",
            contract_update_take_profit: n ? n.toString() : "",
            has_contract_update_stop_loss: !!t,
            has_contract_update_take_profit: !!n,
          };
        };
        class tu {
          get is_contract_completed() {
            var e;
            return (
              !!(null === (e = this.contract_info) || void 0 === e
                ? void 0
                : e.is_sold) &&
              this.root_store.run_panel.contract_stage !==
                e7.K.PURCHASE_RECEIVED
            );
          }
          get is_contract_loading() {
            return (
              (this.root_store.run_panel.is_running &&
                null === this.contract_info) ||
              this.root_store.run_panel.contract_stage === e7.K.PURCHASE_SENT ||
              this.root_store.run_panel.contract_stage === e7.K.STARTING
            );
          }
          get is_contract_inactive() {
            return !this.contract_info && !this.is_loading;
          }
          get is_multiplier() {
            var e;
            return (0, d.L8o)(
              null === (e = this.contract_info) || void 0 === e
                ? void 0
                : e.contract_type
            );
          }
          get is_accumulator() {
            var e;
            return (0, d.XtD)(
              null === (e = this.contract_info) || void 0 === e
                ? void 0
                : e.contract_type
            );
          }
          clear() {
            let e =
              !(arguments.length > 0) ||
              void 0 === arguments[0] ||
              arguments[0];
            e && (this.contract_info = null),
              (this.profit = 0),
              (this.profit_loss = 0),
              (this.indicative = 0),
              (this.indicative_movement = ""),
              (this.profit_movement = "");
          }
          clearContractUpdateConfigValues() {
            if (this.contract_info) {
              let {
                contract_update_stop_loss: e,
                contract_update_take_profit: t,
                has_contract_update_stop_loss: n,
                has_contract_update_take_profit: i,
              } = tc(this.contract_info.limit_order);
              (this.contract_update_stop_loss = e),
                (this.contract_update_take_profit = t),
                (this.has_contract_update_stop_loss = n),
                (this.has_contract_update_take_profit = i);
            }
          }
          getLimitOrder() {
            let e = {};
            return (
              (e.take_profit = this.has_contract_update_take_profit
                ? +(this.contract_update_take_profit ?? 0)
                : 0),
              (e.stop_loss = this.has_contract_update_stop_loss
                ? +(this.contract_update_stop_loss ?? 0)
                : 0),
              e
            );
          }
          onBotContractEvent(e) {
            let { profit: t } = e,
              n = (0, d.Kq_)(e);
            (this.profit = t),
              this.contract_id !== e.id &&
                (this.clear(!1),
                (this.contract_id = e.id),
                (this.indicative = n));
            let i = { profit: t, indicative: n };
            Object.keys(i).forEach((e) => {
              let t = i[e],
                n = this[e];
              e in this && t && t !== n
                ? (this[`${e}_movement`] =
                    t && t > (this[e] || 0) ? "profit" : "loss")
                : "" !== this[`${e}_movement`] &&
                  (this.indicative_movement = ""),
                "profit" === e && (this.profit_loss = t),
                "indicative" === e && (this.indicative = t);
            }),
              (this.contract_info = e);
          }
          onChange(e) {
            let { name: t, value: n } = e;
            (this[t] = n), this.validateProperty(t, n);
          }
          populateContractUpdateConfig(e) {
            let t = tc(null == e ? void 0 : e.contract_update);
            if (!(0, d.uvr)(this.contract_update_config, t)) {
              Object.assign(this, t), (this.contract_update_config = t);
              let { contract_update: i, error: a } = e;
              if (this.contract_info && i && !a) {
                var n;
                this.contract_info.limit_order = Object.assign(
                  (null === (n = this.contract_info) || void 0 === n
                    ? void 0
                    : n.limit_order) || {},
                  i
                );
              }
            }
          }
          setContractUpdateConfig(e, t) {
            e &&
              t &&
              ((this.has_contract_update_take_profit = !!e),
              (this.has_contract_update_stop_loss = !!t),
              (this.contract_update_take_profit = this
                .has_contract_update_take_profit
                ? +e
                : null),
              (this.contract_update_stop_loss = this
                .has_contract_update_stop_loss
                ? +t
                : null));
          }
          setIsBotRunning() {
            if (!this.is_contract_loading) {
              this.is_bot_running = !1;
              return;
            }
            let e = setTimeout(() => {
              this.is_contract_loading &&
                ((this.is_bot_running = !0),
                this.root_store.run_panel.setContractStage(e7.K.RUNNING));
            }, 5e3);
            return () => clearTimeout(e);
          }
          updateLimitOrder() {
            var e, t, n, i;
            let a = this.getLimitOrder();
            (null === (e = this.contract_info) || void 0 === e
              ? void 0
              : e.contract_id) &&
              (null === (t = this.contract_info) || void 0 === t
                ? void 0
                : t.contract_id) &&
              (null === (i = c.api_base.api) ||
                void 0 === i ||
                i
                  .send({
                    contract_update: 1,
                    contract_id:
                      null === (n = this.contract_info) || void 0 === n
                        ? void 0
                        : n.contract_id,
                    limit_order: a,
                  })
                  .then((e) => {
                    this.populateContractUpdateConfig(e);
                  })
                  .catch((e) => {
                    var t;
                    this.root_store.run_panel.showContractUpdateErrorDialog(
                      null == e
                        ? void 0
                        : null === (t = e.error) || void 0 === t
                        ? void 0
                        : t.message
                    );
                  }));
          }
          setValidationErrorMessages(e, t) {
            (!this.validation_errors[e] ||
              this.validation_errors[e]
                .filter((e) => !t.includes(e))
                .concat(t.filter((t) => !this.validation_errors[e].includes(t)))
                .length) &&
              (this.validation_errors[e] = t);
          }
          validateProperty(e, t) {
            let n = this.validation_rules[e].trigger,
              i = { [e]: void 0 !== t ? t : this[e] },
              a = { [e]: this.validation_rules[e].rules || [] };
            n &&
              Object.hasOwnProperty.call(this, n) &&
              ((i[n] = this[n]), (a[n] = this.validation_rules[n].rules || []));
            let o = new d.cX8(i, a, this);
            o.isPassed(),
              Object.keys(i).forEach((e) => {
                this.setValidationErrorMessages(e, o.errors.get(e));
              });
          }
          registerReactions() {
            let { client: e } = this.core;
            return (
              (this.disposeSwitchAcountListener = (0, r.U5)(
                () => e.loginid,
                () => this.clear()
              )),
              () => {
                "function" == typeof this.disposeSwitchAcountListener &&
                  this.disposeSwitchAcountListener();
              }
            );
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "disposeReactionsFn", void 0),
              (0, s._)(this, "disposeSwitchAcountListener", void 0),
              (0, s._)(this, "contract_info", null),
              (0, s._)(this, "is_loading", !1),
              (0, s._)(this, "indicative_movement", ""),
              (0, s._)(this, "profit_movement", ""),
              (0, s._)(this, "validation_errors", {}),
              (0, s._)(this, "validation_rules", (0, td.sl)()),
              (0, s._)(this, "contract_update_take_profit", null),
              (0, s._)(this, "contract_update_stop_loss", null),
              (0, s._)(this, "has_contract_update_take_profit", !1),
              (0, s._)(this, "has_contract_update_stop_loss", !1),
              (0, s._)(this, "contract_update_config", {}),
              (0, s._)(this, "profit_loss", 0),
              (0, s._)(this, "contract_id", null),
              (0, s._)(this, "profit", 0),
              (0, s._)(this, "indicative", 0),
              (0, s._)(this, "is_bot_running", !1),
              (0, r.rC)(this, {
                contract_info: r.LO,
                indicative_movement: r.LO,
                profit_movement: r.LO,
                validation_errors: r.LO,
                validation_rules: r.LO,
                contract_update_take_profit: r.LO,
                contract_update_stop_loss: r.LO,
                has_contract_update_take_profit: r.LO,
                has_contract_update_stop_loss: r.LO,
                is_bot_running: r.LO,
                contract_update_config: r.LO,
                contract_id: r.LO,
                profit: r.LO,
                indicative: r.LO,
                is_contract_completed: r.Fl,
                is_contract_loading: r.Fl,
                is_contract_inactive: r.Fl,
                is_multiplier: r.Fl,
                clear: r.aD.bound,
                clearContractUpdateConfigValues: r.aD.bound,
                getLimitOrder: r.aD.bound,
                onBotContractEvent: r.aD.bound,
                onChange: r.aD.bound,
                populateContractUpdateConfig: r.aD.bound,
                setContractUpdateConfig: r.aD.bound,
                setIsBotRunning: r.aD.bound,
                updateLimitOrder: r.aD.bound,
                setValidationErrorMessages: r.aD,
                validateProperty: r.aD,
                registerReactions: r.aD.bound,
              }),
              (this.root_store = e),
              (this.core = t),
              (this.disposeReactionsFn = this.registerReactions());
          }
        }
        class th {
          constructor(e) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "is_animation_info_modal_open", !1),
              (0, s._)(this, "is_dialog_open", !1),
              (0, s._)(this, "file_name", (0, c.config)().default_file_name),
              (0, s._)(this, "has_undo_stack", !1),
              (0, s._)(this, "has_redo_stack", !1),
              (0, s._)(this, "is_reset_button_clicked", !1),
              (0, s._)(this, "setResetButtonState", (e) => {
                this.is_reset_button_clicked = e;
              }),
              (0, s._)(this, "onResetClick", () => {
                this.is_dialog_open = !0;
              }),
              (0, s._)(this, "closeResetDialog", () => {
                this.is_dialog_open = !1;
              }),
              (0, s._)(this, "onResetOkButtonClick", () => {
                this.setResetButtonState(!0),
                  (0, c.runGroupedEvents)(
                    !1,
                    () => {
                      this.resetDefaultStrategy();
                    },
                    "reset"
                  ),
                  (this.is_dialog_open = !1);
              }),
              (0, s._)(this, "resetDefaultStrategy", async () => {
                var e, t, n, i;
                let a = window.Blockly.derivWorkspace;
                (a.current_strategy_id =
                  null === (i = window) || void 0 === i
                    ? void 0
                    : null === (n = i.Blockly) || void 0 === n
                    ? void 0
                    : null === (t = n.utils) || void 0 === t
                    ? void 0
                    : null === (e = t.idGenerator) || void 0 === e
                    ? void 0
                    : e.genUid()),
                  await (0, c.load)({
                    block_string: a.cached_xml.main,
                    file_name: (0, c.config)().default_file_name,
                    workspace: a,
                    drop_event: null,
                    strategy_id: null,
                    from: null,
                    showIncompatibleStrategyDialog: null,
                  }),
                  (a.strategy_to_load = a.cached_xml.main),
                  this.setResetButtonState(!1);
              }),
              (0, s._)(this, "loadCustomStrategy", async (e) => {
                var t, n, i, a;
                let o = window.Blockly.derivWorkspace;
                (o.current_strategy_id =
                  null === (a = window) || void 0 === a
                    ? void 0
                    : null === (i = a.Blockly) || void 0 === i
                    ? void 0
                    : null === (n = i.utils) || void 0 === n
                    ? void 0
                    : null === (t = n.idGenerator) || void 0 === t
                    ? void 0
                    : t.genUid()),
                  await (0, c.load)({
                    block_string: o.dollar_cached_xml[e].xml,
                    file_name: (0, c.config)().default_file_name,
                    workspace: o,
                    drop_event: null,
                    strategy_id: null,
                    from: null,
                    showIncompatibleStrategyDialog: null,
                  }),
                  (o.strategy_to_load = o.cached_xml.main),
                  this.setResetButtonState(!1);
              }),
              (0, s._)(this, "onSortClick", () => {
                let {
                  workspaces: {
                    indentWorkspace: { x: e, y: t },
                  },
                } = (0, c.config)();
                window.Blockly.derivWorkspace.cleanUp(e, t);
              }),
              (0, s._)(this, "onUndoClick", (e) => {
                window.Blockly.Events.setGroup("undo_clicked"),
                  window.Blockly.derivWorkspace.undo(e),
                  window.Blockly.svgResize(window.Blockly.derivWorkspace),
                  this.setHasRedoStack(),
                  this.setHasUndoStack(),
                  window.Blockly.Events.setGroup(!1);
              }),
              (0, s._)(this, "onZoomInOutClick", (e) => {
                let t = window.Blockly.derivWorkspace,
                  n = t.getMetrics();
                t.zoom(n.viewWidth / 2, n.viewHeight / 2, e ? 1 : -1);
              }),
              (0, s._)(this, "setHasUndoStack", () => {
                var e, t;
                this.has_undo_stack =
                  (null === (t = window.Blockly.derivWorkspace) || void 0 === t
                    ? void 0
                    : null === (e = t.undoStack_) || void 0 === e
                    ? void 0
                    : e.length) > 0;
              }),
              (0, s._)(this, "setHasRedoStack", () => {
                var e, t;
                this.has_redo_stack =
                  (null === (t = window.Blockly.derivWorkspace) || void 0 === t
                    ? void 0
                    : null === (e = t.redoStack_) || void 0 === e
                    ? void 0
                    : e.length) > 0;
              }),
              (0, r.rC)(this, {
                is_animation_info_modal_open: r.LO,
                is_dialog_open: r.LO,
                file_name: r.LO,
                has_undo_stack: r.LO,
                has_redo_stack: r.LO,
                is_reset_button_clicked: r.LO,
                onResetClick: r.aD.bound,
                closeResetDialog: r.aD.bound,
                onResetOkButtonClick: r.aD.bound,
                onUndoClick: r.aD.bound,
                resetDefaultStrategy: r.aD.bound,
                setHasUndoStack: r.aD.bound,
                setHasRedoStack: r.aD.bound,
                loadCustomStrategy: r.aD.bound,
              }),
              (this.root_store = e);
          }
        }
        class tp {
          onUnmount() {
            "function" == typeof this.disposeToolboxToggleReaction &&
              this.disposeToolboxToggleReaction();
          }
          setWorkspaceOptions() {
            let e, t, n, i, a;
            let o = window.Blockly.derivWorkspace;
            o.options.readOnly
              ? ((e = null), (t = !1), (n = !1), (i = !1), (a = !1))
              : ((n = t =
                  !!(
                    (e = this.toolbox_dom) &&
                    e.getElementsByTagName("category").length
                  )),
                (i = t),
                (a = t)),
              (o.options.collapse = n),
              (o.options.comments = i),
              (o.options.disable = a),
              (o.options.hasCategories = t),
              (o.options.languageTree = e);
          }
          adjustWorkspace() {
            !this.is_workspace_scroll_adjusted &&
              !this.root_store.load_modal.is_load_modal_open &&
              ((this.is_workspace_scroll_adjusted = !0),
              setTimeout(() => {
                var e, t;
                let n = window.Blockly.derivWorkspace,
                  i =
                    (null === (e = document.getElementById("gtm-toolbox")) ||
                    void 0 === e
                      ? void 0
                      : e.getBoundingClientRect().width) || 0,
                  a =
                    null === (t = n.svgBlockCanvas_) || void 0 === t
                      ? void 0
                      : t.getBoundingClientRect();
                if (n.RTL && a) {
                  let e = this.core.ui.is_mobile,
                    t = e ? a.right : a.left,
                    o = this.core.ui.is_mobile ? i - t + 20 : i - t + 36;
                  (Math.round(t) <= i || e) &&
                    (0, c.scrollWorkspace)(n, o, !0, !1);
                } else if (Math.round(null == a ? void 0 : a.left) <= i) {
                  let e = this.core.ui.is_mobile
                    ? i - a.left + 50
                    : i - a.left + 36;
                  (0, c.scrollWorkspace)(n, e, !0, !1);
                }
                this.is_workspace_scroll_adjusted = !1;
              }, 300));
          }
          toggleDrawer() {
            this.is_toolbox_open = !this.is_toolbox_open;
          }
          onToolboxItemClick(e) {
            var t;
            let { flyout: n } = this.root_store,
              i = e.getAttribute("id"),
              a = this.getCategoryContents(e);
            n.setIsSearchFlyout(!1),
              (null === (t = n.selected_category) || void 0 === t
                ? void 0
                : t.getAttribute("id")) === i
                ? n.setVisibility(!1)
                : (n.setSelectedCategory(e), n.setContents(a));
          }
          onToolboxItemExpand(e) {
            if (this.sub_category_index.includes(e)) {
              let t = this.sub_category_index.filter((t) => t !== e);
              this.sub_category_index = t;
            } else this.sub_category_index = [...this.sub_category_index, e];
          }
          onSearchBlur() {
            this.is_search_focus = !1;
          }
          onSearchClear(e) {
            e("search", ""), this.showSearch("");
          }
          onSearchKeyUp(e) {
            (this.is_search_loading = !0),
              clearTimeout(this.typing_timer),
              (this.typing_timer = setTimeout(
                (0, r.aD)(() => {
                  e(), (this.is_search_loading = !1);
                }),
                1e3
              ));
          }
          constructor(e, t) {
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "disposeToolboxToggleReaction", void 0),
              (0, s._)(this, "typing_timer", void 0),
              (0, s._)(this, "is_toolbox_open", !0),
              (0, s._)(this, "is_search_loading", !1),
              (0, s._)(this, "is_search_focus", !1),
              (0, s._)(this, "sub_category_index", []),
              (0, s._)(this, "toolbox_dom", void 0),
              (0, s._)(this, "toolbox_examples", void 0),
              (0, s._)(this, "is_workspace_scroll_adjusted", !1),
              (0, s._)(this, "onMount", (e) => {
                var t;
                this.adjustWorkspace(),
                  (this.toolbox_dom = window.Blockly.utils.xml.textToDom(
                    null == e ? void 0 : e.current
                  ));
                let n = [
                  ...((null === (t = this.toolbox_dom) || void 0 === t
                    ? void 0
                    : t.childNodes) ?? []),
                ].find(
                  (e) => e instanceof HTMLElement && "examples" === e.tagName
                );
                n && (this.toolbox_examples = n),
                  this.setWorkspaceOptions(),
                  (this.disposeToolboxToggleReaction = (0, r.U5)(
                    () => this.is_toolbox_open,
                    (e) => {
                      if (e) {
                        var t;
                        null === eA.default ||
                          void 0 === eA.default ||
                          null === (t = eA.default.pushDataLayer) ||
                          void 0 === t ||
                          t.call(eA.default, {
                            event: "dbot_toolbox_visible",
                            value: !0,
                          });
                      }
                    }
                  ));
              }),
              (0, s._)(this, "getCategoryContents", (e) => {
                let t = window.Blockly.derivWorkspace,
                  n = e.getAttribute("dynamic"),
                  i = Array.from(e.childNodes);
                if ("string" == typeof n) {
                  let e = t.getToolboxCategoryCallback(n);
                  "VARIABLE" === n && (e = window.Blockly.DataCategory),
                    (i = e(t));
                }
                return i;
              }),
              (0, s._)(this, "getAllCategories", () => {
                let e = [];
                return (
                  Array.from(this.toolbox_dom.childNodes).forEach((t) => {
                    e.push(t),
                      this.hasSubCategory(t.children) &&
                        Array.from(t.children).forEach((t) => {
                          e.push(t);
                        });
                  }),
                  e
                );
              }),
              (0, s._)(
                this,
                "hasSubCategory",
                (e) =>
                  !!Object.keys(e).filter((t) => {
                    if ("CATEGORY" === e[Number(t)].tagName.toUpperCase())
                      return e[Number(t)];
                  }).length || !1
              ),
              (0, s._)(this, "onSearch", (e) => {
                let { search: t = "" } = e;
                (this.is_search_focus = !0), this.showSearch(t);
              }),
              (0, s._)(this, "showSearch", (e) => {
                let t = window.Blockly.derivWorkspace,
                  n = [],
                  i = e.replace(/\s+/g, " ").trim().toUpperCase(),
                  a = i.split(" "),
                  o = t.getVariablesOfType(""),
                  s = window.Blockly.Procedures.allProcedures(t),
                  { flyout: r } = this.root_store;
                r.setVisibility(!1);
                let l = [
                  (0, h.NC)("THE"),
                  (0, h.NC)("OF"),
                  (0, h.NC)("YOU"),
                  (0, h.NC)("IS"),
                  (0, h.NC)("THIS"),
                  (0, h.NC)("THEN"),
                  (0, h.NC)("A"),
                  (0, h.NC)("AN"),
                ];
                if (0 === i.length) return;
                if (i.length <= 1 || a.every((e) => l.includes(e))) {
                  r.setIsSearchFlyout(!0), r.setContents(n, e);
                  return;
                }
                let d = this.getAllCategories()
                    .filter((e) => !this.hasSubCategory(e.children))
                    .map((e) =>
                      Array.from(this.getCategoryContents(e)).filter(
                        (e) => "BLOCK" === e.tagName.toUpperCase()
                      )
                    )
                    .flat(),
                  c = function () {
                    let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : [],
                      t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : {};
                    !e.some((e) => e === t) && e.push(t);
                  },
                  u = (e) => {
                    d.forEach((t) => {
                      let o = t.getAttribute("type"),
                        s = window.Blockly.Blocks[o],
                        r = s.meta instanceof Function && s.meta(),
                        l = s.definition instanceof Function && s.definition(),
                        d = r.display_name,
                        u = o.toUpperCase().split("_"),
                        h = d.toUpperCase().split(" "),
                        p = /^((message)|(tooltip)|(category))/;
                      switch (e) {
                        case "exact_block_name":
                          (i === d.toUpperCase() || i === o.toUpperCase()) &&
                            c(n, t);
                          break;
                        case "match_words":
                          (a.every((e) => h.some((t) => t.includes(e))) ||
                            a.every((e) => u.some((t) => t.includes(e)))) &&
                            c(n, t);
                          break;
                        case "block_term":
                          (u.some((e) => a.some((t) => e.includes(t))) ||
                            h.some((e) => a.some((t) => e.includes(t)))) &&
                            c(n, t);
                          break;
                        case "block_definitions":
                          Object.keys(l).forEach((e) => {
                            let o = l[e];
                            p.test(e) &&
                              a.some((e) => o.includes(e)) &&
                              c(n, t),
                              o instanceof Array &&
                                o.forEach((e) => {
                                  let o = JSON.stringify(e).toUpperCase();
                                  "field_dropdown" === e.type &&
                                    i.length > 2 &&
                                    a.some((e) => o.includes(e)) &&
                                    c(n, t);
                                });
                          });
                          break;
                        case "block_meta": {
                          let e = Object.keys(r)
                            .filter((e) => "display_name" !== e)
                            .find((e) => {
                              let t = r[e]
                                .toUpperCase()
                                .replace(/[^\w\s]/gi, "")
                                .split(" ");
                              return a.some((e) =>
                                t.some((t) => t.includes(e))
                              );
                            });
                          e && e.length && c(n, t);
                        }
                      }
                    });
                  };
                [
                  "exact_block_name",
                  "match_words",
                  "block_term",
                  "block_definitions",
                  "block_meta",
                ].forEach((e) => u(e));
                let p = o.filter((e) => e.name.toUpperCase().includes(i)),
                  m = window.Blockly.DataCategory.search(p).filter(
                    (e) => -1 === n.indexOf(e)
                  );
                m && m.length && n.unshift(...m);
                let _ = { 0: [], 1: [] },
                  f = s[0],
                  b = s[1];
                Object.keys(f).forEach((e) => {
                  let t = f[e];
                  t[0].toUpperCase().includes(i) && _["0"].unshift(t);
                }),
                  Object.keys(b).forEach((e) => {
                    let t = b[e];
                    t[0].toUpperCase().includes(i) && _["1"].unshift(t);
                  });
                let y = window.Blockly.Procedures.populateDynamicProcedures(
                  _
                ).filter((e) => -1 === n.indexOf(e));
                y.length && n.unshift(...y),
                  r.setIsSearchFlyout(!0),
                  r.setContents(n, e);
              }),
              (0, r.rC)(this, {
                is_toolbox_open: r.LO,
                is_search_loading: r.LO,
                is_search_focus: r.LO,
                sub_category_index: r.LO,
                toolbox_dom: r.LO,
                toolbox_examples: r.LO,
                onMount: r.aD.bound,
                onUnmount: r.aD.bound,
                setWorkspaceOptions: r.aD.bound,
                adjustWorkspace: r.aD.bound,
                toggleDrawer: r.aD.bound,
                onToolboxItemClick: r.aD.bound,
                onToolboxItemExpand: r.aD.bound,
                getCategoryContents: r.aD.bound,
                getAllCategories: r.aD.bound,
                hasSubCategory: r.aD.bound,
                onSearch: r.aD.bound,
                onSearchBlur: r.aD.bound,
                onSearchClear: r.aD.bound,
                onSearchKeyUp: r.aD.bound,
                showSearch: r.aD.bound,
              }),
              (this.root_store = e),
              (this.core = t);
          }
        }
        var tm = n("33690");
        class t_ {
          get transactions() {
            var e, t, n, i;
            return (
              null === (t = this.core) || void 0 === t
                ? void 0
                : null === (e = t.client) || void 0 === e
                ? void 0
                : e.loginid
            )
              ? this.elements[
                  null === (i = this.core) || void 0 === i
                    ? void 0
                    : null === (n = i.client) || void 0 === n
                    ? void 0
                    : n.loginid
                ] ?? []
              : [];
          }
          get statistics() {
            let e = 0,
              t = this.transactions
                .filter(
                  (e) => e.type === tm.i.CONTRACT && "object" == typeof e.data
                )
                .reduce(
                  (t, n) => {
                    let { data: i } = n,
                      {
                        profit: a = 0,
                        is_completed: o = !1,
                        buy_price: s = 0,
                        payout: r,
                        bid_price: l,
                      } = i;
                    return (
                      o &&
                        (a > 0
                          ? ((t.won_contracts += 1),
                            (t.total_payout += r ?? l ?? 0))
                          : (t.lost_contracts += 1),
                        (t.total_profit += a),
                        (t.total_stake += s),
                        (e += 1)),
                      t
                    );
                  },
                  {
                    lost_contracts: 0,
                    number_of_runs: 0,
                    total_profit: 0,
                    total_payout: 0,
                    total_stake: 0,
                    won_contracts: 0,
                  }
                );
            return (t.number_of_runs = e), t;
          }
          onBotContractEvent(e) {
            this.pushTransaction(e);
          }
          pushTransaction(e) {
            var t, n, i, a, o, s, r, l, c;
            let u = (0, d.UTW)(e),
              { run_id: h } = this.root_store.run_panel,
              p =
                null === (n = this.core) || void 0 === n
                  ? void 0
                  : null === (t = n.client) || void 0 === t
                  ? void 0
                  : t.loginid,
              m = {
                ...e,
                is_completed: u,
                run_id: h,
                date_start: (0, d.p6d)(e.date_start, "YYYY-M-D HH:mm:ss [GMT]"),
                entry_tick: e.entry_tick_display_value,
                entry_tick_time:
                  e.entry_tick_time &&
                  (0, d.p6d)(e.entry_tick_time, "YYYY-M-D HH:mm:ss [GMT]"),
                exit_tick: e.exit_tick_display_value,
                exit_tick_time:
                  e.exit_tick_time &&
                  (0, d.p6d)(e.exit_tick_time, "YYYY-M-D HH:mm:ss [GMT]"),
                profit: u ? e.profit : 0,
              };
            !this.elements[p] &&
              (this.elements = { ...this.elements, [p]: [] });
            let _ =
              null === (i = this.elements[p]) || void 0 === i
                ? void 0
                : i.findIndex((t) => {
                    var n, i;
                    return (
                      "string" != typeof t.data &&
                      t.type === tm.i.CONTRACT &&
                      (null === (n = t.data) || void 0 === n
                        ? void 0
                        : n.transaction_ids) &&
                      t.data.transaction_ids.buy ===
                        (null === (i = e.transaction_ids) || void 0 === i
                          ? void 0
                          : i.buy)
                    );
                  });
            if (-1 === _) {
              if (
                (null === (a = this.elements[p]) || void 0 === a
                  ? void 0
                  : a.length) > 0
              ) {
                let e =
                  null === (s = this.elements[p]) || void 0 === s
                    ? void 0
                    : s[0];
                e.type === tm.i.CONTRACT &&
                  "object" == typeof e.data &&
                  m.run_id !==
                    (null == e
                      ? void 0
                      : null === (r = e.data) || void 0 === r
                      ? void 0
                      : r.run_id) &&
                  (null === (l = this.elements[p]) ||
                    void 0 === l ||
                    l.unshift({ type: tm.i.DIVIDER, data: m.run_id }));
              }
              null === (o = this.elements[p]) ||
                void 0 === o ||
                o.unshift({ type: tm.i.CONTRACT, data: m });
            } else
              null === (c = this.elements[p]) ||
                void 0 === c ||
                c.splice(_, 1, { type: tm.i.CONTRACT, data: m });
            this.elements = { ...this.elements };
          }
          clear() {
            var e, t, n, i, a, o, s;
            this.elements &&
              (null ===
                (e =
                  this.elements[
                    null === (n = this.core) || void 0 === n
                      ? void 0
                      : null === (t = n.client) || void 0 === t
                      ? void 0
                      : t.loginid
                  ]) || void 0 === e
                ? void 0
                : e.length) > 0 &&
              (this.elements[
                null === (s = this.core) || void 0 === s
                  ? void 0
                  : null === (o = s.client) || void 0 === o
                  ? void 0
                  : o.loginid
              ] = []),
              (this.recovered_completed_transactions =
                null === (i = this.recovered_completed_transactions) ||
                void 0 === i
                  ? void 0
                  : i.slice(0, 0)),
              (this.recovered_transactions =
                null === (a = this.recovered_transactions) || void 0 === a
                  ? void 0
                  : a.slice(0, 0)),
              (this.is_transaction_details_modal_open = !1);
          }
          registerReactions() {
            let { client: e } = this.core,
              t = (0, r.U5)(
                () => this.elements[null == e ? void 0 : e.loginid],
                (t) => {
                  let n = eZ(this.TRANSACTION_CACHE, {});
                  (n[e.loginid] = (null == t ? void 0 : t.slice(0, 5e3)) ?? []),
                    eQ(this.TRANSACTION_CACHE, n);
                }
              ),
              n = (0, r.U5)(
                () => this.transactions.length,
                () => this.recoverPendingContracts()
              );
            return () => {
              t(), n();
            };
          }
          recoverPendingContracts() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : null;
            this.transactions.forEach((t) => {
              let { data: n } = t;
              !(
                "string" == typeof n ||
                (null == n ? void 0 : n.is_completed) ||
                !(null == n ? void 0 : n.contract_id) ||
                this.recovered_transactions.includes(
                  null == n ? void 0 : n.contract_id
                )
              ) && this.recoverPendingContractsById(n.contract_id, e);
            });
          }
          updateResultsCompletedContract(e) {
            let { journal: t, summary_card: n } = this.root_store,
              { contract_info: i } = n,
              { currency: a, profit: o } = e;
            e.contract_id !== (null == i ? void 0 : i.contract_id) &&
              (this.onBotContractEvent(e),
              e.contract_id &&
                !this.recovered_transactions.includes(e.contract_id) &&
                this.recovered_transactions.push(e.contract_id),
              e.contract_id &&
                !this.recovered_completed_transactions.includes(
                  e.contract_id
                ) &&
                (0, d.UTW)(e) &&
                (this.recovered_completed_transactions.push(e.contract_id),
                t.onLogSuccess({
                  log_type: o && o > 0 ? c.LogTypes.PROFIT : c.LogTypes.LOST,
                  extra: { currency: a, profit: o },
                })));
          }
          sortOutPositionsBeforeAction(e, t) {
            null == e ||
              e.forEach((e) => {
                if (!t || (t && e.id === t)) {
                  let t = e.contract_info;
                  this.updateResultsCompletedContract(t);
                }
              });
          }
          async recoverPendingContractsById(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null,
              n = [];
            if (
              (t &&
                ((this.is_called_proposal_open_contract = !0),
                t.contract_id === e && this.updateResultsCompletedContract(t)),
              !this.is_called_proposal_open_contract)
            ) {
              var i, a, o, s, r, l;
              if (
                null === (a = this.core) || void 0 === a
                  ? void 0
                  : null === (i = a.client) || void 0 === i
                  ? void 0
                  : i.loginid
              ) {
                let e =
                  null === (s = this.core) || void 0 === s
                    ? void 0
                    : null === (o = s.client) || void 0 === o
                    ? void 0
                    : o.loginid;
                !(null === (r = this.elements[e]) || void 0 === r
                  ? void 0
                  : r.length) && this.sortOutPositionsBeforeAction(n);
                let [t = null] = this.elements[e];
                if (
                  "object" == typeof (null == t ? void 0 : t.data) &&
                  !(null == t
                    ? void 0
                    : null === (l = t.data) || void 0 === l
                    ? void 0
                    : l.profit)
                ) {
                  let e = t.data.contract_id;
                  this.sortOutPositionsBeforeAction(n, e);
                }
              }
            }
          }
          constructor(e, t) {
            var n, i;
            (0, s._)(this, "root_store", void 0),
              (0, s._)(this, "core", void 0),
              (0, s._)(this, "disposeReactionsFn", void 0),
              (0, s._)(this, "TRANSACTION_CACHE", "transaction_cache"),
              (0, s._)(
                this,
                "elements",
                eJ(
                  this.TRANSACTION_CACHE,
                  null === (i = this.core) || void 0 === i
                    ? void 0
                    : null === (n = i.client) || void 0 === n
                    ? void 0
                    : n.loginid,
                  []
                )
              ),
              (0, s._)(this, "active_transaction_id", null),
              (0, s._)(this, "recovered_completed_transactions", []),
              (0, s._)(this, "recovered_transactions", []),
              (0, s._)(this, "is_called_proposal_open_contract", !1),
              (0, s._)(this, "is_transaction_details_modal_open", !1),
              (0, s._)(this, "toggleTransactionDetailsModal", (e) => {
                this.is_transaction_details_modal_open = e;
              }),
              (this.root_store = e),
              (this.core = t),
              (this.is_transaction_details_modal_open = !1),
              (this.disposeReactionsFn = this.registerReactions()),
              (0, r.rC)(this, {
                elements: r.LO,
                active_transaction_id: r.LO,
                recovered_completed_transactions: r.LO,
                recovered_transactions: r.LO,
                is_called_proposal_open_contract: r.LO,
                is_transaction_details_modal_open: r.LO,
                transactions: r.Fl,
                onBotContractEvent: r.aD.bound,
                pushTransaction: r.aD.bound,
                clear: r.aD.bound,
                registerReactions: r.aD.bound,
                recoverPendingContracts: r.aD.bound,
                updateResultsCompletedContract: r.aD.bound,
                sortOutPositionsBeforeAction: r.aD.bound,
                recoverPendingContractsById: r.aD.bound,
              });
          }
        }
        var tf = n("77149");
        class tb {
          setIsTradingAssessmentForNewUserEnabled(e) {
            this.is_trading_assessment_for_new_user_enabled = e;
          }
          toggleAccountsDialog() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : !this.is_accounts_switcher_on;
            this.is_accounts_switcher_on = e;
          }
          toggleOnScreenKeyboard() {
            this.is_onscreen_keyboard_active =
              null !== this.current_focus && this.is_mobile && (0, tf.b1)();
          }
          setCurrentFocus(e) {
            (this.current_focus = e), this.toggleOnScreenKeyboard();
          }
          setDontShowAgainDisclaimer() {
            (this.shouldShowDisclaimer = "false"),
              localStorage.setItem("dont_show_again", "false");
          }
          constructor() {
            (0, s._)(this, "is_mobile", !0),
              (0, s._)(this, "is_desktop", !0),
              (0, s._)(this, "is_tablet", !1),
              (0, s._)(this, "is_chart_layout_default", !0),
              (0, s._)(
                this,
                "is_dark_mode_on",
                "dark" === localStorage.getItem("theme")
              ),
              (0, s._)(this, "account_switcher_disabled_message", ""),
              (0, s._)(this, "current_focus", null),
              (0, s._)(this, "show_prompt", !1),
              (0, s._)(
                this,
                "shouldShowDisclaimer",
                localStorage.getItem("dont_show_again")
              ),
              (0, s._)(this, "is_trading_assessment_for_new_user_enabled", !1),
              (0, s._)(this, "is_accounts_switcher_on", !1),
              (0, s._)(this, "is_onscreen_keyboard_active", !1),
              (0, s._)(this, "setPromptHandler", (e) => {
                this.show_prompt = e;
              }),
              (0, s._)(this, "setAccountSwitcherDisabledMessage", (e) => {
                e
                  ? (this.account_switcher_disabled_message = e)
                  : (this.account_switcher_disabled_message = "");
              }),
              (0, s._)(this, "setDarkMode", (e) => {
                this.is_dark_mode_on = e;
              }),
              (0, s._)(this, "setDevice", (e) => {
                (this.is_mobile = "mobile" === e),
                  (this.is_desktop = "desktop" === e),
                  (this.is_tablet = "tablet" === e);
              }),
              (0, r.rC)(this, {
                account_switcher_disabled_message: r.LO,
                current_focus: r.LO,
                is_accounts_switcher_on: r.LO,
                is_dark_mode_on: r.LO,
                is_desktop: r.LO,
                is_mobile: r.LO,
                shouldShowDisclaimer: r.LO,
                is_tablet: r.LO,
                is_trading_assessment_for_new_user_enabled: r.LO,
                show_prompt: r.LO,
                setAccountSwitcherDisabledMessage: r.aD.bound,
                setCurrentFocus: r.aD.bound,
                setDarkMode: r.aD.bound,
                setDevice: r.aD.bound,
                setPromptHandler: r.aD.bound,
                setDontShowAgainDisclaimer: r.aD.bound,
                setIsTradingAssessmentForNewUserEnabled: r.aD.bound,
                toggleAccountsDialog: r.aD.bound,
                toggleOnScreenKeyboard: r.aD.bound,
              });
          }
        }
        class ty {
          constructor(e) {
            (0, s._)(this, "dbot", void 0),
              (0, s._)(this, "app", void 0),
              (0, s._)(this, "summary_card", void 0),
              (0, s._)(this, "flyout", void 0),
              (0, s._)(this, "flyout_help", void 0),
              (0, s._)(this, "google_drive", void 0),
              (0, s._)(this, "journal", void 0),
              (0, s._)(this, "load_modal", void 0),
              (0, s._)(this, "run_panel", void 0),
              (0, s._)(this, "save_modal", void 0),
              (0, s._)(this, "transactions", void 0),
              (0, s._)(this, "toolbar", void 0),
              (0, s._)(this, "toolbox", void 0),
              (0, s._)(this, "quick_strategy", void 0),
              (0, s._)(this, "self_exclusion", void 0),
              (0, s._)(this, "dashboard", void 0),
              (0, s._)(this, "chart_store", void 0),
              (0, s._)(this, "blockly_store", void 0),
              (0, s._)(this, "data_collection_store", void 0),
              (0, s._)(this, "ui", void 0),
              (0, s._)(this, "client", void 0),
              (0, s._)(this, "common", void 0),
              (0, s._)(this, "core", { ui: {}, client: {}, common: {} }),
              (this.dbot = e),
              (this.ui = new tb()),
              (this.client = new w()),
              (this.common = new N()),
              (this.core.ui = this.ui),
              (this.core.client = this.client),
              (this.core.common = this.common),
              (this.app = new p(this, this.core)),
              (this.summary_card = new tu(this, this.core)),
              (this.flyout = new eS(this)),
              (this.flyout_help = new ex(this)),
              (this.google_drive = new eR(this)),
              (this.journal = new e0(this, this.core)),
              (this.load_modal = new e3(this, this.core)),
              (this.run_panel = new tn(this, this.core)),
              (this.save_modal = new ts(this)),
              (this.transactions = new t_(this, this.core)),
              (this.toolbar = new th(this)),
              (this.toolbox = new tp(this, this.core)),
              (this.quick_strategy = new e4(this)),
              (this.self_exclusion = new tl(this, this.core)),
              (this.dashboard = new L(this, this.core)),
              (this.chart_store = new b(this)),
              (this.blockly_store = new f(this)),
              (this.data_collection_store = new U(this, this.core));
          }
        }
        var tv = n("78514");
        let tg = (0, o.createContext)(null),
          tk = (e) => {
            let { children: t, mockStore: n } = e,
              [i, s] = (0, o.useState)(null),
              r = (0, o.useRef)(!1);
            return ((0, o.useEffect)(() => {
              let e = async () => {
                s(new ty(tv.Z));
              };
              !i && !r.current && ((r.current = !0), n ? s(n) : e());
            }, [i, n]),
            !i && n)
              ? null
              : (0, a.jsx)(tg.Provider, { value: i, children: t });
          },
          tw = () => (0, o.useContext)(tg);
      },
      22187: function (e, t, n) {
        "use strict";
        let i;
        var a = n("85893"),
          o = n("20745"),
          s = n("67294"),
          r = n("92198"),
          l = n("97613"),
          d = n("87383"),
          c = n("48059"),
          u = n("12838"),
          h = n("21995"),
          p = n("79655"),
          m = n("89250"),
          _ = n("96877"),
          f = n("83274"),
          b = n("10434");
        let y = (0, _.Pi)(() => {
          let { ui: e } = (0, f.oR)() ?? { ui: { show_prompt: !1 } },
            { show_prompt: t } = e,
            n = (0, m._Z)((e) => {
              let { currentLocation: n, nextLocation: i } = e;
              return t && n.pathname !== i.pathname;
            });
          return (
            s.useEffect(() => {
              let e = (e) => {
                t ? e.preventDefault() : delete e.returnValue;
              };
              return (
                window.addEventListener("beforeunload", e),
                () => {
                  window.removeEventListener("beforeunload", e);
                }
              );
            }, [t]),
            (0, a.jsx)(b.Z, {
              title: (0, c.NC)("Leaving already?"),
              confirm_button_text: (0, c.NC)("Yes, I'll come back later"),
              cancel_button_text: (0, c.NC)("No, I'll stay"),
              onConfirm: () => {
                var e;
                null == n ||
                  null === (e = n.proceed) ||
                  void 0 === e ||
                  e.call(n);
              },
              onCancel: () => {
                var e;
                null == n ||
                  null === (e = n.reset) ||
                  void 0 === e ||
                  e.call(n);
              },
              is_visible: "blocked" === n.state,
              has_close_icon: !1,
              children: (0, a.jsx)(c.Xx, {
                i18n_default_text:
                  "If you leave, your current contract will be completed, but your bot will stop running immediately.",
              }),
            })
          );
        });
        var v = n("37979"),
          g = n("11527"),
          k = n("29747"),
          w = n("66175"),
          T = n("83606"),
          C = n("98831"),
          E = n("419");
        let N = () => ({
          empty_address: () => (0, c.NC)("This field is required"),
          empty_barrier: () => (0, c.NC)("Barrier is a required field."),
          address: () =>
            (0, c.NC)(
              "Use only the following special characters: {{permitted_characters}}",
              { permitted_characters: E.JL, interpolation: { escapeValue: !1 } }
            ),
          barrier: () =>
            (0, c.NC)(
              "Only numbers and these special characters are allowed: {{permitted_characters}}",
              { permitted_characters: "+ - ." }
            ),
          email: () => (0, c.NC)("Invalid email address."),
          general: () =>
            (0, c.NC)(
              "Only letters, numbers, space, hyphen, period, and apostrophe are allowed."
            ),
          name: () =>
            (0, c.NC)("Letters, spaces, periods, hyphens, apostrophes only."),
          password: () =>
            (0, c.NC)(
              "Password should have lower and uppercase English letters with numbers."
            ),
          po_box: () => (0, c.NC)("P.O. Box is not accepted in address"),
          phone: () =>
            (0, c.NC)("Please enter a valid phone number (e.g. +15417541234)."),
          postcode: () =>
            (0, c.NC)("Only letters, numbers, space and hyphen are allowed."),
          signup_token: () => (0, c.NC)("The length of token should be 8."),
          tax_id: () =>
            (0, c.NC)(
              "Should start with letter or number, and may contain hyphen and underscore."
            ),
          number: () => (0, c.NC)("Should be a valid number."),
          decimalPlaces: (e) =>
            (0, c.NC)("Up to {{decimal_count}} decimal places are allowed.", {
              decimal_count: e,
            }),
          value: (e) => (0, c.NC)("Should be {{value}}", { value: e }),
          betweenMinMax: (e, t) =>
            (0, c.NC)("Should be between {{min_value}} and {{max_value}}", {
              min_value: e,
              max_value: t,
            }),
          minNumber: (e) =>
            (0, c.NC)("Should be more than {{min_value}}", { min_value: e }),
          maxNumber: (e) =>
            (0, c.NC)("Should be less than {{max_value}}", { max_value: e }),
          password_warnings: {
            use_a_few_words: () =>
              (0, c.NC)("Use a few words, avoid common phrases"),
            no_need_for_mixed_chars: () =>
              (0, c.NC)("No need for symbols, digits, or uppercase letters"),
            uncommon_words_are_better: () =>
              (0, c.NC)("Add another word or two. Uncommon words are better."),
            straight_rows_of_keys_are_easy: () =>
              (0, c.NC)("Straight rows of keys are easy to guess"),
            short_keyboard_patterns_are_easy: () =>
              (0, c.NC)("Short keyboard patterns are easy to guess"),
            use_longer_keyboard_patterns: () =>
              (0, c.NC)("Use a longer keyboard pattern with more turns"),
            repeated_chars_are_easy: () =>
              (0, c.NC)('Repeats like "aaa" are easy to guess'),
            repeated_patterns_are_easy: () =>
              (0, c.NC)(
                'Repeats like "abcabcabc" are only slightly harder to guess than "abc"'
              ),
            avoid_repeated_chars: () =>
              (0, c.NC)("Avoid repeated words and characters"),
            sequences_are_easy: () =>
              (0, c.NC)("Sequences like abc or 6543 are easy to guess"),
            avoid_sequences: () => (0, c.NC)("Avoid sequences"),
            recent_years_are_easy: () =>
              (0, c.NC)("Recent years are easy to guess"),
            avoid_recent_years: () => (0, c.NC)("Avoid recent years"),
            avoid_associated_years: () =>
              (0, c.NC)("Avoid years that are associated with you"),
            dates_are_easy: () => (0, c.NC)("Dates are often easy to guess"),
            avoid_associated_dates_and_years: () =>
              (0, c.NC)("Avoid dates and years that are associated with you"),
            top10_common_password: () =>
              (0, c.NC)("This is a top-10 common password"),
            top100_common_password: () =>
              (0, c.NC)("This is a top-100 common password"),
            very_common_password: () =>
              (0, c.NC)("This is a very common password"),
            similar_to_common_password: () =>
              (0, c.NC)("This is similar to a commonly used password"),
            a_word_is_easy: () =>
              (0, c.NC)("A word by itself is easy to guess"),
            names_are_easy: () =>
              (0, c.NC)("Names and surnames by themselves are easy to guess"),
            common_names_are_easy: () =>
              (0, c.NC)("Common names and surnames are easy to guess"),
            capitalization_doesnt_help: () =>
              (0, c.NC)("Capitalization doesn't help very much"),
            all_uppercase_doesnt_help: () =>
              (0, c.NC)(
                "All-uppercase is almost as easy to guess as all-lowercase"
              ),
            reverse_doesnt_help: () =>
              (0, c.NC)("Reversed words aren't much harder to guess"),
            substitution_doesnt_help: () =>
              (0, c.NC)(
                "Predictable substitutions like '@' instead of 'a' don't help very much"
              ),
            user_dictionary: () =>
              (0, c.NC)("This password is on the blacklist"),
          },
        });
        var x = n("40968"),
          A = n("88199"),
          S = n("30453"),
          O = n("79649");
        let I = (0, _.Pi)((e) => {
          let { children: t } = e,
            {
              isAuthorizing: n,
              isAuthorized: i,
              connectionStatus: o,
              accountList: l,
              activeLoginid: d,
            } = (0, O.T)(),
            u = (0, s.useRef)(!1),
            h = (0, s.useRef)(!1),
            p = (0, s.useRef)(null),
            m = (0, s.useRef)(null),
            { client: _, common: b } = (0, f.oR)() ?? {},
            { currentLang: y } = (0, c.T_)(),
            { oAuthLogout: v, isOAuth2Enabled: g } = (0, S.q)({
              handleLogout: async () => _.logout(),
              client: _,
            }),
            k = "false" === r.Z.get("logged_state");
          (0, s.useEffect)(() => {
            k && g && (null == _ ? void 0 : _.is_logged_in) && v();
          }, [k, v, g, null == _ ? void 0 : _.is_logged_in]);
          let T = (0, s.useMemo)(
            () => (null == l ? void 0 : l.find((e) => e.loginid === d)),
            [d, l]
          );
          (0, s.useEffect)(() => {
            var e, t;
            let n =
              null == _
                ? void 0
                : null === (t = _.all_accounts_balance) || void 0 === t
                ? void 0
                : null === (e = t.accounts) || void 0 === e
                ? void 0
                : e[(null == T ? void 0 : T.loginid) ?? ""];
            n &&
              (null == _ ||
                _.setBalance(n.balance.toFixed((0, w.i4S)(n.currency))),
              null == _ || _.setCurrency(n.currency));
          }, [
            null == T ? void 0 : T.loginid,
            null == _ ? void 0 : _.all_accounts_balance,
          ]),
            (0, s.useEffect)(() => {
              _ &&
                T &&
                (null == _ || _.setLoginId(d),
                null == _ || _.setAccountList(l),
                null == _ || _.setIsLoggedIn(!0));
            }, [l, T, d, _]),
            (0, s.useEffect)(
              () => (
                (0, x.bf)(N()),
                () => {
                  p.current && clearInterval(p.current);
                }
              ),
              []
            ),
            (0, s.useEffect)(() => {
              b && y && b.setCurrentLanguage(y);
            }, [y, b]),
            (0, s.useEffect)(() => {
              if (_ && !n && !u.current) {
                var e;
                (u.current = !0),
                  null === (e = A.api_base.api) ||
                    void 0 === e ||
                    e.websiteStatus().then((e) => {
                      _.setWebsiteStatus(e.website_status);
                    }),
                  (p.current = setInterval(() => {
                    var e;
                    null === (e = A.api_base.api) ||
                      void 0 === e ||
                      e
                        .time()
                        .then((e) => {
                          b.setServerTime((0, w.gbT)(e.time), !1);
                        })
                        .catch(() => {
                          b.setServerTime((0, w.gbT)(Date.now()), !0);
                        });
                  }, 1e4));
              }
            }, [_, b, n]);
          let C = (0, s.useCallback)(
            async (e) => {
              if (!e) return;
              let t = e.data,
                { msg_type: n, error: i } = t;
              if (
                (((null == i ? void 0 : i.code) === "AuthorizationRequired" ||
                  (null == i ? void 0 : i.code) === "DisabledClient" ||
                  (null == i ? void 0 : i.code) === "InvalidToken") &&
                  (await v()),
                "balance" === n && t && !i)
              ) {
                let e = t.balance;
                if (null == e ? void 0 : e.accounts) _.setAllAccountsBalance(e);
                else if (null == e ? void 0 : e.loginid) {
                  var a;
                  if (
                    !(null == _
                      ? void 0
                      : null === (a = _.all_accounts_balance) || void 0 === a
                      ? void 0
                      : a.accounts) ||
                    !(null == e ? void 0 : e.loginid)
                  )
                    return;
                  let t = {
                    ...{ ..._.all_accounts_balance.accounts }[e.loginid],
                  };
                  t.balance = e.balance;
                  let n = {
                    ..._.all_accounts_balance,
                    accounts: {
                      ..._.all_accounts_balance.accounts,
                      [e.loginid]: t,
                    },
                  };
                  _.setAllAccountsBalance(n);
                }
              }
            },
            [_, v]
          );
          return (
            (0, s.useEffect)(() => {
              if (!n && _) {
                var e;
                let t =
                  null === A.api_base || void 0 === A.api_base
                    ? void 0
                    : null === (e = A.api_base.api) || void 0 === e
                    ? void 0
                    : e.onMessage().subscribe(C);
                m.current = { unsubscribe: null == t ? void 0 : t.unsubscribe };
              }
              return () => {
                if (m.current) {
                  var e, t;
                  null === (e = (t = m.current).unsubscribe) ||
                    void 0 === e ||
                    e.call(t);
                }
              };
            }, [o, C, n, i, _]),
            (0, s.useEffect)(() => {
              !n &&
                i &&
                !h.current &&
                _ &&
                ((h.current = !0),
                A.api_base.api.getSettings().then((e) => {
                  var t;
                  null == _ || _.setAccountSettings(e.get_settings),
                    A.api_base.api
                      .landingCompany({
                        landing_company:
                          null === (t = e.get_settings) || void 0 === t
                            ? void 0
                            : t.country_code,
                      })
                      .then((e) => {
                        null == _ || _.setLandingCompany(e.landing_company);
                      });
                }),
                A.api_base.api.getAccountStatus().then((e) => {
                  null == _ || _.setAccountStatus(e.get_account_status);
                }));
            }, [n, i, _]),
            (0, a.jsx)(a.Fragment, { children: t })
          );
        });
        n("674");
        let D = (0, s.lazy)(() =>
            Promise.all([n.e("889"), n.e("258"), n.e("394")]).then(
              n.bind(n, 71035)
            )
          ),
          R = (0, s.lazy)(() =>
            Promise.all([n.e("892"), n.e("987")]).then(n.bind(n, 23085))
          ),
          {
            TRANSLATIONS_CDN_URL: L,
            R2_PROJECT_NAME: P,
            CROWDIN_BRANCH_NAME: B,
          } = {
            TRANSLATIONS_CDN_URL: void 0,
            R2_PROJECT_NAME: void 0,
            CROWDIN_BRANCH_NAME: void 0,
            TRACKJS_TOKEN: void 0,
            APP_ENV: void 0,
            REF_NAME: void 0,
            REMOTE_CONFIG_URL: void 0,
            GD_CLIENT_ID: void 0,
            GD_APP_ID: void 0,
            GD_API_KEY: void 0,
            DATADOG_SESSION_REPLAY_SAMPLE_RATE: void 0,
            DATADOG_SESSION_SAMPLE_RATE: void 0,
            DATADOG_APPLICATION_ID: void 0,
            DATADOG_CLIENT_TOKEN: void 0,
            RUDDERSTACK_KEY: void 0,
            GROWTHBOOK_CLIENT_KEY: void 0,
            GROWTHBOOK_DECRYPTION_KEY: void 0,
          },
          U = (0, c.uC)({ cdnUrl: `${L}/${P}/${B}` }),
          M = (0, p.aj)(
            (0, m.i7)(
              (0, a.jsxs)(m.AW, {
                path: "/",
                element: (0, a.jsx)(s.Suspense, {
                  fallback: (0, a.jsx)(l.Z, {
                    message: (0, c.NC)(
                      "Please wait while we connect to the server..."
                    ),
                  }),
                  children: (0, a.jsx)(c.$j, {
                    defaultLang: "EN",
                    i18nInstance: U,
                    children: (0, a.jsxs)(f.g3, {
                      children: [
                        (0, a.jsx)(y, {}),
                        (0, a.jsx)(I, { children: (0, a.jsx)(D, {}) }),
                      ],
                    }),
                  }),
                }),
                children: [
                  (0, a.jsx)(m.AW, { index: !0, element: (0, a.jsx)(R, {}) }),
                  (0, a.jsx)(m.AW, {
                    path: "endpoint",
                    element: (0, a.jsx)(() => {
                      let e = (0, k.TA)({
                        initialValues: {
                          appId:
                            localStorage.getItem(u.sE.configAppId) ??
                            (0, w.rhL)(),
                          serverUrl:
                            localStorage.getItem(u.sE.configServerURL) ??
                            (0, w.wmM)(),
                        },
                        onSubmit: (t) => {
                          localStorage.setItem(
                            u.sE.configServerURL,
                            t.serverUrl
                          ),
                            localStorage.setItem(
                              u.sE.configAppId,
                              t.appId.toString()
                            ),
                            e.resetForm({ values: t });
                        },
                        validate: (e) => {
                          let t = {};
                          return (
                            !e.serverUrl &&
                              (t.serverUrl = "This field is required"),
                            e.appId
                              ? !/^(0|[1-9]\d*)(\.\d+)?$/.test(
                                  e.appId.toString()
                                ) && (t.appId = "Please enter a valid app ID")
                              : (t.appId = "This field is required"),
                            t
                          );
                        },
                      });
                      return (0, a.jsxs)("div", {
                        className: "endpoint",
                        children: [
                          (0, a.jsx)(T.x, {
                            weight: "bold",
                            className: "endpoint__title",
                            children: "Change API endpoint",
                          }),
                          (0, a.jsxs)("form", {
                            onSubmit: e.handleSubmit,
                            className: "endpoint__form",
                            children: [
                              (0, a.jsx)(C.I, {
                                "data-testid": "dt_endpoint_server_url_input",
                                label: "Server",
                                name: "serverUrl",
                                message: e.errors.serverUrl,
                                onBlur: e.handleBlur,
                                onChange: e.handleChange,
                                value: e.values.serverUrl,
                              }),
                              (0, a.jsx)(C.I, {
                                "data-testid": "dt_endpoint_app_id_input",
                                label: "OAuth App ID",
                                name: "appId",
                                message: e.errors.appId,
                                onBlur: e.handleBlur,
                                onChange: e.handleChange,
                                value: e.values.appId,
                              }),
                              (0, a.jsxs)("div", {
                                children: [
                                  (0, a.jsx)(g.z, {
                                    className: "endpoint__button",
                                    disabled: !e.dirty || !e.isValid,
                                    type: "submit",
                                    children: "Submit",
                                  }),
                                  (0, a.jsx)(g.z, {
                                    className: "endpoint__button",
                                    color: "black",
                                    onClick: () => {
                                      let { server_url: t, app_id: n } = (0,
                                      w.e_e)();
                                      localStorage.setItem(
                                        u.sE.configServerURL,
                                        t
                                      ),
                                        localStorage.setItem(
                                          u.sE.configAppId,
                                          n.toString()
                                        ),
                                        e.resetForm({
                                          values: { appId: n, serverUrl: t },
                                        }),
                                        window.location.reload();
                                    },
                                    variant: "outlined",
                                    type: "button",
                                    children: "Reset to original settings",
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      });
                    }, {}),
                  }),
                  (0, a.jsx)(m.AW, {
                    path: "callback",
                    element: (0, a.jsx)(
                      () =>
                        (0, a.jsx)(v.AQ, {
                          onSignInSuccess: async (e) => {
                            let t = {},
                              n = {};
                            for (let [i, a] of Object.entries(e))
                              if (i.startsWith("acct")) {
                                let o = i.replace("acct", "token");
                                e[o] &&
                                  ((t[a] = e[o]),
                                  (n[a] = {
                                    loginid: a,
                                    token: e[o],
                                    currency: "",
                                  }));
                              } else if (i.startsWith("cur")) {
                                let t = i.replace("cur", "acct");
                                e[t] && (n[e[t]].currency = a);
                              }
                            localStorage.setItem(
                              "accountsList",
                              JSON.stringify(t)
                            ),
                              console.log("callback", n),
                              localStorage.setItem(
                                "clientAccounts",
                                JSON.stringify(n)
                              );
                            let i = !1,
                              a = await (0, d.wL)();
                            if (a) {
                              let { authorize: t, error: s } =
                                await a.authorize(e.token1);
                              if (
                                (localStorage.setItem(
                                  "callback_token",
                                  t.toString()
                                ),
                                a.disconnect(),
                                !s)
                              ) {
                                var o;
                                let e = Object.values(n),
                                  a =
                                    null == t
                                      ? void 0
                                      : null === (o = t.account_list[0]) ||
                                        void 0 === o
                                      ? void 0
                                      : o.loginid,
                                  s = e.filter((e) => e.loginid === a);
                                s.length &&
                                  (localStorage.setItem(
                                    "authToken",
                                    s[0].token
                                  ),
                                  localStorage.setItem(
                                    "active_loginid",
                                    s[0].loginid
                                  ),
                                  (i = !0));
                              }
                            }
                            !i &&
                              (console.log("test from callback", {
                                tokens: e,
                                active_loginid:
                                  r.Z.get("active_loginid") || "{}",
                              }),
                              localStorage.setItem("authToken", e.token1),
                              localStorage.setItem("active_loginid", e.acct1)),
                              window.location.assign("/");
                          },
                          renderReturnButton: () =>
                            (0, a.jsx)(g.z, {
                              className: "callback-return-button",
                              onClick: () => {
                                window.location.href = "/";
                              },
                              children: "Return to Bot",
                            }),
                        }),
                      {}
                    ),
                  }),
                ],
              })
            )
          ),
          j = function () {
            s.useEffect(() => {
              var e, t;
              return (
                (0, h.UR)(),
                null === (t = window) ||
                  void 0 === t ||
                  null === (e = t.dataLayer) ||
                  void 0 === e ||
                  e.push({ event: "page_load" }),
                () => {
                  let e = document.getElementById("survicate-box");
                  e && (e.style.display = "none");
                }
              );
            }, []);
            let e = function (e) {
              let t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "",
                n = new URLSearchParams(window.location.search),
                i = e.loginid.startsWith("VR") ? "demo" : e.currency || t;
              n.set("account", i),
                window.history.pushState(
                  {},
                  "",
                  `${window.location.pathname}?${n.toString()}`
                );
            };
            return (
              s.useEffect(() => {
                let t = localStorage.getItem("accountsList"),
                  n = localStorage.getItem("clientAccounts"),
                  i = localStorage.getItem("active_loginid"),
                  a = new URLSearchParams(window.location.search).get(
                    "account"
                  );
                if (!a)
                  try {
                    if (!n) return;
                    let t = JSON.parse(n),
                      a = Object.entries(t).find((e) => {
                        let [t, n] = e;
                        return n.loginid === i;
                      });
                    if (!a) return;
                    let [o, s] = a;
                    e(s);
                  } catch (e) {
                    console.warn("Error", e);
                  }
                if (t && n)
                  try {
                    let o = JSON.parse(t),
                      s = JSON.parse(n),
                      r =
                        !!a &&
                        Object.values(s).some(
                          (e) => e.currency.toUpperCase() === a.toUpperCase()
                        ),
                      l = (e, t) => {
                        localStorage.setItem("authToken", e),
                          localStorage.setItem("active_loginid", t);
                      };
                    if ((null == a ? void 0 : a.toUpperCase()) === "DEMO") {
                      let e = Object.entries(o).find((e) => {
                        let [t] = e;
                        return t.startsWith("VR");
                      });
                      if (e) {
                        let [t, n] = e;
                        l(String(n), t);
                        return;
                      }
                    }
                    if (
                      (null == a ? void 0 : a.toUpperCase()) !== "DEMO" &&
                      r
                    ) {
                      let e = Object.entries(s).find((e) => {
                        let [t, n] = e;
                        return (
                          !t.startsWith("VR") &&
                          n.currency.toUpperCase() ===
                            (null == a ? void 0 : a.toUpperCase())
                        );
                      });
                      if (e) {
                        let [t, n] = e;
                        "token" in n &&
                          l(String(null == n ? void 0 : n.token), t);
                        return;
                      }
                    }
                    if (!r) {
                      let t = Object.entries(s).find((e) => {
                        let [t, n] = e;
                        return n.loginid === i;
                      });
                      if (!t) return;
                      let [n, a] = t;
                      e(a, "USD");
                    }
                  } catch (e) {
                    console.warn("Error", e);
                  }
              }, []),
              (0, a.jsx)(p.pG, { router: M })
            );
          };
        n("83571");
        let F = async () => {
          var e, t;
          null === w.j73 ||
            void 0 === w.j73 ||
            null === (t = w.j73.get("active_loginid")) ||
            void 0 === t ||
            null === (e = t.match(/[a-zA-Z]+/g)) ||
            void 0 === e ||
            e.join("");
        };
        function V() {
          return (e) => {
            e.onupdatefound = () => {
              let t = e.installing;
              t.onstatechange = () => {
                "installed" === t.state &&
                  navigator.serviceWorker.controller &&
                  (console.log("New version is found, refreshing the page..."),
                  clearInterval(i));
              };
            };
          };
        }
        F(),
          "serviceWorker" in navigator &&
            window.addEventListener("load", () => {
              let e = `${window.location.origin}/service-worker.js`;
              navigator.serviceWorker
                .register(e)
                .then((e) => {
                  (i = setInterval(() => {
                    e.update()
                      .then(V)
                      .catch((e) => {
                        console.error("Error during service worker update:", e);
                      });
                  }, 36e5)),
                    (e.onupdatefound = () => {
                      let t = e.installing;
                      t.onstatechange = () => {
                        if (
                          "installed" === t.state &&
                          navigator.serviceWorker.controller &&
                          performance.now() > 36e5
                        ) {
                          let e = new Event("UpdateAvailable");
                          document.dispatchEvent(e);
                        }
                      };
                    });
                })
                .catch((t) => {
                  console.error(
                    "Error during service worker registration:",
                    t,
                    e
                  );
                });
            }),
          o.createRoot(document.getElementById("root")).render(
            (0, a.jsx)(() => {
              let [e, t] = s.useState(!1),
                { loginInfo: n, paramsToDelete: i } =
                  u.fr.getLoginInfoFromURL();
              return (s.useEffect(() => {
                (async () => {
                  if (n.length)
                    try {
                      if (!u.fr.getDefaultActiveAccount(n)) return;
                      let e = {};
                      n.forEach((t) => {
                        e[t.loginid] = t.token;
                      });
                      localStorage.setItem("accountsList", JSON.stringify(e)),
                        u.fr.filterSearchParams(i),
                        localStorage.setItem("authToken", n[0].token),
                        localStorage.setItem("active_loginid", n[0].loginid);
                    } catch (e) {
                      console.error("Error setting up login info:", e);
                    }
                  u.fr.filterSearchParams(["lang"]), t(!0);
                })();
              }, [n, i]),
              e)
                ? (0, a.jsx)(j, {})
                : (0, a.jsx)(l.Z, { message: (0, c.NC)("Initializing...") });
            }, {})
          );
      },
      85414: function (e, t, n) {
        "use strict";
        n.d(t, { j: () => G });
        var i = n("88199"),
          a = n("48059"),
          o = n("68853"),
          s = n("85893");
        n("67294");
        let r = (e) => {
            let { max_payout: t, max_ticks: n } = e ?? {
              max_payout: 0,
              max_ticks: 0,
            };
            return (0, s.jsxs)("div", {
              className: "sell_conditions",
              children: [
                (0, s.jsxs)("div", {
                  className: "sell_conditions__take_profit",
                  children: [
                    (0, s.jsx)("span", {
                      children: (0, s.jsx)("strong", {
                        children: (0, a.NC)("Take Profit: "),
                      }),
                    }),
                    (0, s.jsx)("span", {
                      children: (0, a.NC)(
                        "The position closes once its profit exceeds the take-profit amount"
                      ),
                    }),
                  ],
                }),
                (0, s.jsxs)("div", {
                  className: "sell_conditions__tick_count",
                  children: [
                    (0, s.jsx)("span", {
                      children: (0, s.jsx)("strong", {
                        children: (0, a.NC)("Tick Count: "),
                      }),
                    }),
                    (0, s.jsx)("span", {
                      children: (0, a.NC)(
                        "The holding period measured in ticks before the position is sold"
                      ),
                    }),
                  ],
                }),
                (0, s.jsx)("div", {
                  children: (0, s.jsx)(a.Xx, {
                    i18n_default_text:
                      "The position closes when the input condition is met or upon reaching the maximum payout of {{ max_payout }} or maximum tick of {{ max_ticks }}, whichever occurs first.",
                    values: { max_payout: t, max_ticks: n },
                  }),
                }),
              ],
            });
          },
          l = () => ({
            type: "label",
            label: (0, a.NC)("Sell conditions"),
            description: r,
          }),
          d = () => ({
            type: "label",
            label: (0, a.NC)("Size"),
            description: (0, a.NC)(
              "The size used to multiply the stake after a successful trade for the next trade."
            ),
          }),
          c = () => ({ type: "sell_conditions", name: "sell_conditions" }),
          u = () => ({
            type: "label",
            label: (0, a.NC)("Growth rate"),
            description: (0, a.NC)(
              "Your stake will grow at the specified growth rate per tick as long as the current spot price remains within the range of the previous spot price."
            ),
          }),
          h = () => ({
            type: "growth_rate",
            name: "growth_rate",
            attached: !0,
            validation: ["number", "required", "ceil"],
          }),
          p = () => ({
            type: "label",
            label: (0, a.NC)("Unit"),
            description: (0, a.NC)(
              "The unit used to multiply the stake after a losing trade for the next trade."
            ),
          }),
          m = () => ({
            type: "number",
            name: "take_profit",
            should_have: [{ key: "boolean_tick_count", value: !1 }],
            hide_without_should_have: !0,
            attached: !0,
            has_currency_unit: !0,
          }),
          _ = () => ({
            type: "number",
            name: "tick_count",
            should_have: [{ key: "boolean_tick_count", value: !0 }],
            hide_without_should_have: !0,
            attached: !0,
            has_currency_unit: !1,
          }),
          f = () => ({
            type: "min",
            value: 1,
            getMessage: (e) =>
              (0, a.NC)("Must be a number higher than {{ min }}", {
                min: Number(e) - 1,
              }),
          }),
          b = () => ({
            type: "label",
            label: (0, a.NC)("Asset"),
            description: (0, a.NC)(
              "The underlying market your bot will trade with this strategy."
            ),
          }),
          y = () => ({ type: "symbol", name: "symbol" }),
          v = () => ({
            type: "label",
            label: (0, a.NC)("Contract type"),
            description: (0, a.NC)(
              "Your bot will use this contract type for every run"
            ),
          }),
          g = () => ({
            type: "tradetype",
            name: "tradetype",
            dependencies: ["symbol"],
          }),
          k = () => ({
            type: "label",
            label: (0, a.NC)("Purchase condition"),
            description: (0, a.NC)(
              "Your bot uses a single trade type for each run."
            ),
          }),
          w = () => ({
            type: "contract_type",
            name: "type",
            dependencies: ["symbol", "tradetype"],
          }),
          T = () => ({
            type: "label",
            label: (0, a.NC)("Initial stake"),
            description: (0, a.NC)(
              "The amount that you stake for the first trade. Note that this is the minimum stake amount."
            ),
          }),
          C = () => ({
            type: "number",
            name: "stake",
            validation: ["number", "required", "ceil", f()],
            has_currency_unit: !0,
          }),
          E = () => ({
            type: "label",
            label: (0, a.NC)("Duration"),
            description: (0, a.NC)("How long each trade takes to expire."),
          }),
          N = () => ({
            type: "durationtype",
            name: "durationtype",
            dependencies: ["symbol", "tradetype"],
            attached: !0,
          }),
          x = () => ({
            type: "number",
            name: "duration",
            attached: !0,
            validation: ["number", "required", "min", "max"],
          }),
          A = () => ({
            type: "label",
            label: (0, a.NC)("Profit threshold"),
            description: (0, a.NC)(
              "The bot will stop trading if your total profit exceeds this amount."
            ),
          }),
          S = () => ({
            type: "number",
            name: "profit",
            validation: ["number", "required", "ceil", f()],
            has_currency_unit: !0,
          }),
          O = () => ({
            type: "label",
            label: (0, a.NC)("Loss threshold"),
            description: (0, a.NC)(
              "The bot will stop trading if your total loss exceeds this amount."
            ),
          }),
          I = () => ({
            type: "number",
            name: "loss",
            validation: ["number", "required", "ceil", f()],
            has_currency_unit: !0,
          }),
          D = () => ({
            type: "label",
            label: (0, a.NC)("Size"),
            description: (0, a.NC)(
              "The size used to multiply the stake after a losing trade for the next trade."
            ),
          }),
          R = () => ({
            type: "label",
            label: (0, a.NC)("Size"),
            description: (0, a.NC)(
              "The size used to multiply the stake after a successful trade for the next trade."
            ),
          }),
          L = () => ({
            type: "number",
            name: "size",
            validation: [
              "number",
              "required",
              "floor",
              {
                type: "min",
                value: String((0, i.config)().QUICK_STRATEGY.DEFAULT.size),
                getMessage: (e) =>
                  (0, a.NC)(
                    "The value must be equal or greater than {{ min }}",
                    { min: e }
                  ),
              },
            ],
          }),
          P = () => ({
            type: "label",
            label: (0, a.NC)("Unit"),
            description: (0, a.NC)(
              "Number of unit(s) to be added to the next trade after a losing trade. One unit is equivalent to the amount of initial stake."
            ),
          }),
          B = () => ({
            type: "label",
            label: (0, a.NC)("Unit"),
            description: (0, a.NC)(
              "Number of unit(s) to be added to the next trade after a successful trade. One unit is equivalent to the amount of initial stake."
            ),
          }),
          U = () => ({
            type: "number",
            name: "unit",
            validation: ["number", "required", "ceil", f()],
          }),
          M = () => ({
            type: "checkbox",
            name: "boolean_max_stake",
            label: (0, a.NC)("Max stake"),
            description: (0, a.NC)(
              "The stake for your next trade will reset to the initial stake if it exceeds this value."
            ),
            attached: !0,
          }),
          j = () => ({
            type: "number",
            name: "max_stake",
            validation: ["number", "required", "ceil", "min"],
            should_have: [{ key: "boolean_max_stake", value: !0 }],
            hide_without_should_have: !0,
            attached: !0,
            has_currency_unit: !0,
          }),
          F = () => ({
            type: "label",
            name: "label_last_digit_prediction",
            label: (0, a.NC)("Last Digit Prediction"),
            description: (0, a.NC)(
              "Your prediction of the last digit of the asset price."
            ),
            should_have: [
              {
                key: "tradetype",
                value: "",
                multiple: ["matchesdiffers", "overunder"],
              },
            ],
            hide_without_should_have: !0,
          }),
          V = () => ({
            type: "number",
            name: "last_digit_prediction",
            validation: ["number", "required", "min", "max", "integer"],
            should_have: [
              {
                key: "tradetype",
                value: "",
                multiple: ["matchesdiffers", "overunder"],
              },
            ],
            hide_without_should_have: !0,
          }),
          G = () => ({
            MARTINGALE: {
              name: "martingale_max-stake",
              label: (0, a.NC)("Martingale"),
              rs_strategy_name: "martingale",
              description: (0, o.MARTINGALE)(),
              fields: [
                [
                  b(),
                  y(),
                  v(),
                  g(),
                  k(),
                  w(),
                  F(),
                  V(),
                  T(),
                  C(),
                  E(),
                  N(),
                  x(),
                ],
                [A(), S(), O(), I(), D(), L(), M(), j()],
              ],
            },
            D_ALEMBERT: {
              name: "dalembert_max-stake",
              label: (0, a.NC)("D’Alembert"),
              rs_strategy_name: "d'alembert",
              description: (0, o.D_ALEMBERT)(),
              fields: [
                [
                  b(),
                  y(),
                  v(),
                  g(),
                  k(),
                  w(),
                  F(),
                  V(),
                  T(),
                  C(),
                  E(),
                  N(),
                  x(),
                ],
                [A(), S(), O(), I(), P(), U(), M(), j()],
              ],
            },
            OSCARS_GRIND: {
              name: "oscars_grind_max-stake",
              label: (0, a.NC)("Oscar’s Grind"),
              rs_strategy_name: "oscar's-grind",
              description: (0, o.OSCARS_GRIND)(),
              fields: [
                [
                  b(),
                  y(),
                  v(),
                  g(),
                  k(),
                  w(),
                  F(),
                  V(),
                  T(),
                  C(),
                  E(),
                  N(),
                  x(),
                ],
                [A(), S(), O(), I(), M(), j()],
              ],
            },
            REVERSE_MARTINGALE: {
              name: "reverse_martingale",
              label: (0, a.NC)("Reverse Martingale"),
              rs_strategy_name: "reverse martingale",
              description: (0, o.REVERSE_MARTINGALE)(),
              fields: [
                [
                  b(),
                  y(),
                  v(),
                  g(),
                  k(),
                  w(),
                  F(),
                  V(),
                  T(),
                  C(),
                  E(),
                  N(),
                  x(),
                ],
                [A(), S(), O(), I(), R(), L(), M(), j()],
              ],
            },
            REVERSE_D_ALEMBERT: {
              name: "reverse_dalembert",
              label: (0, a.NC)("Reverse D’Alembert"),
              rs_strategy_name: "reverse d'alembert",
              description: (0, o.REVERSE_D_ALEMBERT)(),
              fields: [
                [
                  b(),
                  y(),
                  v(),
                  g(),
                  k(),
                  w(),
                  F(),
                  V(),
                  T(),
                  C(),
                  E(),
                  N(),
                  x(),
                ],
                [A(), S(), O(), I(), B(), U(), M(), j()],
              ],
            },
            STRATEGY_1_3_2_6: {
              name: "1_3_2_6",
              label: (0, a.NC)("1-3-2-6"),
              rs_strategy_name: "1-3-2-6",
              description: (0, o.STRATEGY_1_3_2_6)(),
              fields: [
                [
                  b(),
                  y(),
                  v(),
                  g(),
                  k(),
                  w(),
                  F(),
                  V(),
                  T(),
                  C(),
                  E(),
                  N(),
                  x(),
                ],
                [A(), S(), O(), I()],
              ],
            },
            ACCUMULATORS_MARTINGALE: {
              name: "accumulators_martingale",
              label: (0, a.NC)("Martingale"),
              rs_strategy_name: "accumulators_martingale",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), d(), L(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_DALEMBERT: {
              name: "accumulators_dalembert",
              label: (0, a.NC)("D’Alembert"),
              rs_strategy_name: "accumulators_dalembert",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), p(), U(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_MARTINGALE_ON_STAT_RESET: {
              name: "accumulators_martingale_on_stat_reset",
              label: (0, a.NC)("Martingale on Stat Reset"),
              rs_strategy_name: "accumulators_martingale_on_stat_reset",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), d(), L(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_DALEMBERT_ON_STAT_RESET: {
              name: "accumulators_dalembert_on_stat_reset",
              label: (0, a.NC)("D'Alembert on Stat Reset"),
              rs_strategy_name: "accumulators_dalembert_on_stat_reset",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), p(), U(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_REVERSE_MARTINGALE: {
              name: "accumulators_reverse_martingale",
              label: (0, a.NC)("Reverse Martingale"),
              rs_strategy_name: "accumulators_reverse_martingale",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), d(), L(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_REVERSE_MARTINGALE_ON_STAT_RESET: {
              name: "accumulators_reverse_martingale_on_stat_reset",
              label: (0, a.NC)("Reverse Martingale on Stat Reset"),
              rs_strategy_name: "accumulators_reverse_martingale_on_stat_reset",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), d(), L(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_REVERSE_DALEMBERT: {
              name: "accumulators_reverse_dalembert",
              label: (0, a.NC)("Reverse D'Alembert"),
              rs_strategy_name: "accumulators_reverse_dalembert",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), p(), U(), l(), c(), m(), _(), M(), j()],
              ],
            },
            ACCUMULATORS_REVERSE_DALEMBERT_ON_STAT_RESET: {
              name: "accumulators_reverse_dalembert_on_stat_reset",
              label: (0, a.NC)("Reverse D'Alembert on Stat Reset"),
              rs_strategy_name: "accumulators_reverse_dalembert_on_stat_reset",
              description: [],
              fields: [
                [b(), y(), T(), C(), u(), h()],
                [A(), S(), O(), I(), p(), U(), l(), c(), m(), _(), M(), j()],
              ],
            },
          });
      },
      64376: function (e, t, n) {
        "use strict";
        n.d(t, {
          FM: function () {
            return s;
          },
          Mq: function () {
            return c;
          },
          Qb: function () {
            return o;
          },
          Yk: function () {
            return u;
          },
          xH: function () {
            return l;
          },
          zw: function () {
            return d;
          },
        });
        var i = n(21995),
          a = n(48059);
        let o = "user guide",
          s = "videos on deriv bot",
          r = "quick strategy guides",
          l = () => [
            {
              id: 1,
              type: "Tour",
              subtype: "OnBoard",
              content: (0, a.NC)("Get started on Oruchotrader"),
              src: (0, i.oY)("dbot-onboard-tour.png"),
              search_id: `${o}-0`,
            },
            {
              id: 2,
              type: "Tour",
              subtype: "BotBuilder",
              content: (0, a.NC)("Let’s build a bot!"),
              src: (0, i.oY)("bot-builder-tour.png"),
              search_id: `${o}-1`,
            },
          ],
          d = () => [
            {
              id: 1,
              type: "DBotVideo",
              content: (0, a.NC)("An introduction to Oruchotrader"),
              url: "https://www.youtube.com/embed/lthEgaIY1uw",
              src: (0, i.oY)("intro_to_deriv_bot.png"),
              search_id: `${s}-0`,
            },
            {
              id: 2,
              type: "DBotVideo",
              content: (0, a.NC)(
                "How to build a basic trading bot with Oruchotrader"
              ),
              url: "https://www.youtube.com/embed/mnpi2g7YakU",
              src: (0, i.oY)("build_a_bot.png"),
              search_id: `${s}-1`,
            },
            {
              id: 3,
              type: "DBotVideo",
              content: (0, a.NC)(
                "How to use Martingale strategy on Oruchotrader"
              ),
              url: "https://www.youtube.com/embed/FSslvF7P00I",
              src: (0, i.oY)("how_to_use_martingale.jpg"),
              search_id: `${s}-2`,
            },
            {
              id: 4,
              type: "DBotVideo",
              content: (0, a.NC)(
                "Introducing Accumulator Options on Oruchotrader: Available for automated trading"
              ),
              url: "https://www.youtube.com/embed/uMBBmdNaadU",
              src: (0, i.oY)("introducing_accumulators_on_deriv_bot.png"),
              search_id: `${s}-3`,
            },
          ],
          c = () => [
            {
              title: (0, a.NC)("What is Oruchotrader?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "Oruchotrader is a web-based strategy builder for trading digital options. It’s a platform where you can build your own automated trading bot using drag-and-drop 'blocks'."
                  ),
                },
              ],
              search_id: "faq-0",
            },
            {
              title: (0, a.NC)("Where do I find the blocks I need?"),
              description: [
                { type: "text", content: (0, a.NC)("Follow these steps:") },
                {
                  type: "text",
                  content: (0, a.NC)("1. Go to <strong>Bot Builder</strong>."),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "2. Under the <strong>Blocks menu</strong>, you'll see a list of categories. Blocks are grouped within these categories. Choose the block you want and drag them to the workspace."
                  ),
                },
                { type: "image", src: (0, i.oY)("blocks_menu.png") },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "3. You can also search for the blocks you want using the search bar above the categories."
                  ),
                },
                { type: "image", src: (0, i.oY)("blocks_menu_search.png") },
                {
                  type: "text",
                  content: (0, a.NC)(
                    'For more info, <a href="https://deriv.com/academy/blog/posts/how-to-build-a-basic-trading-bot-with-dbot/" target="_blank">check out this blog post</a> on the basics of building a trading bot.'
                  ),
                },
              ],
              search_id: "faq-1",
            },
            {
              title: (0, a.NC)("How do I remove blocks from the workspace?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "Click on the block you want to remove and press <strong>Delete</strong> on your keyboard."
                  ),
                },
              ],
              search_id: "faq-2",
            },
            {
              title: (0, a.NC)("How do I create variables?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "1. Under the <strong>Blocks</strong> menu, go to <strong>Utility > Variables</strong>."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "2. Enter a name for your variable, and hit <strong>Create</strong>. New blocks containing your new variable will appear below."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "3. Choose the block you want and drag it to the workspace."
                  ),
                },
              ],
              search_id: "faq-3",
            },
            {
              title: (0, a.NC)(
                "Do you offer pre-built trading bots on Oruchotrader?"
              ),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "Yes, you can get started with a pre-built bot using the <strong>Quick strategy</strong> feature. You’ll find some of the most popular trading strategies here: Martingale, D'Alembert, and Oscar's Grind. Just select the strategy, enter your trade parameters, and your bot will be created for you. You can always tweak the parameters later."
                  ),
                },
              ],
              search_id: "faq-4",
            },
            {
              title: (0, a.NC)("What is a quick strategy?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "A quick strategy is a ready-made strategy that you can use in Oruchotrader. There are 3 quick strategies you can choose from: Martingale, D'Alembert, and Oscar's Grind."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)("<strong>Using a quick strategy</strong>"),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "1. Go to <strong>Quick strategy</strong> and select the strategy you want."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)("2. Select the asset and trade type."),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "3. Set your trade parameters and hit <strong>Run</strong>."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "4. Once the blocks are loaded onto the workspace, tweak the parameters if you want, or hit <strong>Run</strong> to start trading."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "5. Hit <strong>Save</strong> to download your bot. You can choose to download your bot to your device or your Google Drive."
                  ),
                },
              ],
              search_id: "faq-5",
            },
            {
              title: (0, a.NC)("How do I save my strategy?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "In <strong>Bot Builder</strong>, hit <strong>Save</strong> on the toolbar at the top to download your bot. Give your bot a name, and choose to download your bot to your device or Google Drive. Your bot will be downloaded as an XML file."
                  ),
                },
              ],
              search_id: "faq-6",
            },
            {
              title: (0, a.NC)(
                "How do I import my own trading bot into Oruchotrader?"
              ),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "Just drag the XML file from your computer onto the workspace, and your bot will be loaded accordingly. Alternatively, you can hit <strong>Import</strong> in <strong>Bot Builder</strong>, and choose to import your bot from your computer or from your Google Drive."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "<strong>Import from your computer</strong>"
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "1. After hitting <strong>Import</strong>, select <strong>Local</strong> and click <strong>Continue</strong>."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "2. Select your XML file and hit <strong>Open</strong>."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)("3. Your bot will be loaded accordingly."),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "<strong>Import from your Google Drive</strong>"
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "1. After hitting <strong>Import</strong>, select <strong>Google Drive</strong> and click <strong>Continue</strong>."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "2. Select your XML file and hit <strong>Select</strong>."
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)("3. Your bot will be loaded accordingly."),
                },
              ],
              search_id: "faq-7",
            },
            {
              title: (0, a.NC)("How do I reset the workspace?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "In <strong>Bot Builder</strong>, hit <strong>Reset</strong> on the toolbar at the top. This will clear the workspace. Please note that any unsaved changes will be lost."
                  ),
                },
              ],
              search_id: "faq-8",
            },
            {
              title: (0, a.NC)("How do I clear my transaction log?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "1. Hit <strong>Reset</strong> at the bottom of stats panel."
                  ),
                },
                { type: "image", src: (0, i.oY)("reset_transaction_log.png") },
                {
                  type: "text",
                  content: (0, a.NC)("2. Hit <strong>Ok</strong> to confirm."),
                },
                {
                  type: "image",
                  src: (0, i.oY)("reset_transaction_log_message.png"),
                },
              ],
              search_id: "faq-9",
            },
            {
              title: (0, a.NC)("How do I control my losses with Oruchotrader?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "There are several ways to control your losses with Oruchotrader. Here’s a simple example of how you can implement loss control in your strategy:"
                  ),
                },
                {
                  type: "image",
                  src: (0, i.oY)("loss_control_all_block.png"),
                  imageclass: "loss-control",
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "<strong>1.</strong> Create the following variables and place them under <strong>Run once at start</strong>:"
                  ),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "• <strong>Stop loss threshold</strong>: Use this variable to store your loss limit. You can assign any amount you want. Your bot will stop when your losses hits or exceeds this amount."
                  ),
                },
                { type: "text", content: (0, a.NC)("Example:") },
                {
                  type: "image",
                  src: (0, i.oY)("loss_control_set_stop_loss.png"),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "• <strong>Current stake</strong>: Use this variable to store the stake amount. You can assign any amount you want, but it must be a positive number."
                  ),
                },
                { type: "text", content: (0, a.NC)("Example:") },
                {
                  type: "image",
                  src: (0, i.oY)("loss_control_set_current_stake.png"),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "This is how your trade parameters, variables, and trade options should look like:"
                  ),
                },
                {
                  type: "image",
                  src: (0, i.oY)("loss_control_trade_parameters.png"),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "<strong>2.</strong> Set the <strong>Purchase conditions</strong>. In this example, your bot will purchase a <strong>Rise</strong> contract when it starts and after a contract closes."
                  ),
                },
                {
                  type: "image",
                  src: (0, i.oY)("loss_control_purchase_conditions.png"),
                },
                {
                  type: "text",
                  content: (0, a.NC)(
                    "<strong>3.</strong> Use a logic block to check if <strong>Total profit/loss</strong> is more than the <strong>Stop loss threshold</strong> amount. You can find the <strong>Total profit/loss</strong> variable under <strong>Analysis > Stats</strong> on the <strong>Blocks menu</strong> on the left. Your bot will continue to purchase new contracts until the <strong>Total profit/loss</strong> amount exceeds the <strong>Stop loss threshold</strong> amount."
                  ),
                },
                {
                  type: "image",
                  src: (0, i.oY)("loss_control_restart_trade_conditions.png"),
                },
              ],
              search_id: "faq-10",
            },
            {
              title: (0, a.NC)(
                "Can I run Oruchotrader on multiple tabs in my web browser?"
              ),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    'Yes, you can. However, there are limits on your account, such as maximum number of open positions and maximum aggregate payouts on open positions. So, just keep these limits in mind when opening multiple positions. You can find more info about these limits at <a href="https://app.deriv.com/account/account-limits" target="_blank">Settings > Account limits</a>.'
                  ),
                },
              ],
              search_id: "faq-11",
            },
            {
              title: (0, a.NC)("Can I trade cryptocurrencies on Oruchotrader?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "No, we don't offer cryptocurrencies on Oruchotrader."
                  ),
                },
              ],
              search_id: "faq-12",
            },
            {
              title: (0, a.NC)("Do you sell trading bots?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "No, we don't. However, you'll find quick strategies on Oruchotrader that'll help you build your own trading bot for free."
                  ),
                },
              ],
              search_id: "faq-13",
            },
            {
              title: (0, a.NC)("In which countries is Oruchotrader available?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    'We offer our services in all countries, except for the ones <a href="https://deriv.com/tnc/general-terms.pdf" target="_blank">mentioned in our terms and conditions.</a>'
                  ),
                },
              ],
              search_id: "faq-14",
            },
            {
              title: (0, a.NC)(
                "If I close my web browser, will Oruchotrader continue to run?"
              ),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "No, Oruchotrader will stop running when your web browser is closed."
                  ),
                },
              ],
              search_id: "faq-15",
            },
            {
              title: (0, a.NC)(
                "What are the most popular strategies for automated trading?"
              ),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    "Three of the most commonly used strategies in automated trading are Martingale, D'Alembert, and Oscar's Grind — you can find them all ready-made and waiting for you in Oruchotrader."
                  ),
                },
              ],
              search_id: "faq-16",
            },
            {
              title: (0, a.NC)("How do I build a trading bot?"),
              description: [
                {
                  type: "text",
                  content: (0, a.NC)(
                    '<a href="https://www.youtube.com/watch?v=QdI5zCkO4Gk&t=203s" target="_blank">Watch this video</a> to learn how to build a trading bot on Oruchotrader. Also, <a href="https://deriv.com/academy/blog/posts/how-to-build-a-basic-trading-bot-with-dbot/" target="_blank">check out this blog post</a> on building a trading bot.'
                  ),
                },
              ],
              search_id: "faq-17",
            },
          ],
          u = () => [
            {
              qs_name: "MARTINGALE",
              type: (0, a.NC)("About Martingale"),
              content: [
                (0, a.NC)("Exploring the Martingale strategy in Oruchotrader"),
                (0, a.NC)("An example of Martingale strategy"),
              ],
              search_id: `${r}-0`,
            },
            {
              qs_name: "D_ALEMBERT",
              type: (0, a.NC)("About D'Alembert"),
              content: [
                (0, a.NC)("Exploring the D’Alembert strategy in Oruchotrader"),
                (0, a.NC)("An example of D’Alembert strategy"),
              ],
              search_id: `${r}-1`,
            },
            {
              qs_name: "OSCARS_GRIND",
              type: (0, a.NC)("About Oscar's Grind"),
              content: [
                (0, a.NC)(
                  "Exploring the Oscar’s Grind strategy in Oruchotrader"
                ),
                (0, a.NC)("An example of Oscar’s Grind strategy"),
              ],
              search_id: `${r}-2`,
            },
            {
              qs_name: "REVERSE_MARTINGALE",
              type: (0, a.NC)("About Reverse Martingale"),
              content: [
                (0, a.NC)(
                  "Exploring the Reverse Martingale strategy in Oruchotrader"
                ),
                (0, a.NC)("An example of Reverse Martingale strategy"),
              ],
              search_id: `${r}-3`,
            },
            {
              qs_name: "REVERSE_D_ALEMBERT",
              type: (0, a.NC)("About Reverse D’Alembert"),
              content: [
                (0, a.NC)(
                  "Exploring the Reverse D’Alembert strategy in Oruchotrader"
                ),
                (0, a.NC)("An example of Reverse D’Alembert strategy"),
              ],
              search_id: `${r}-4`,
            },
            {
              qs_name: "STRATEGY_1_3_2_6",
              type: (0, a.NC)("About 1-3-2-6"),
              content: [
                (0, a.NC)("Exploring the 1-3-2-6 strategy in Oruchotrader"),
                (0, a.NC)("An example of 1-3-2-6 strategy"),
              ],
              search_id: `${r}-5`,
            },
          ];
      },
      84006: function (e, t, n) {
        "use strict";
        n.d(t, {
          TJ: function () {
            return r;
          },
          X7: function () {
            return s;
          },
          _y: function () {
            return o;
          },
          pw: function () {
            return a;
          },
        });
        var i = n(58902);
        let a = { key: "onboard_tour" };
        a.key;
        let o = (e, t) => {
            let n = document.querySelector("#db-toolbar__import-button");
            e && 1 === t
              ? null == n || n.classList.add("dbot-tour-blink")
              : null == n || n.classList.remove("dbot-tour-blink");
          },
          s = (e, t) => (0, i.Jp)(t, e),
          r = Object.freeze({ 0: "onboarding", 1: "bot_builder" });
      },
      21995: function (e, t, n) {
        "use strict";
        var i;
        n.d(t, {
          UR: function () {
            return d;
          },
          oY: function () {
            return a;
          },
        });
        let a = (e) => `assets/images/${e}`,
          o = (e, t, n) => {
            window.Survicate &&
              (e && window.Survicate.track("userCountry", e),
              t && window.Survicate.track("accountType", t),
              n && window.Survicate.track("accountCreationDate", n));
          },
          s = !1,
          r = (e) => {
            s = e;
          },
          l = (e) => {
            let t = document.createElement("script");
            (t.id = "dbot-survicate"),
              (t.async = !0),
              (t.src =
                "https://survey.survicate.com/workspaces/83b651f6b3eca1ab4551d95760fe5deb/web_surveys.js"),
              (t.onload = e);
            let n = document.getElementsByTagName("script")[0];
            (null == n ? void 0 : n.parentNode)
              ? n.parentNode.insertBefore(t, n)
              : document.body.appendChild(t);
          },
          d = () => {
            if (s) return;
            r(!0);
            let e = localStorage.getItem("active_loginid"),
              t = JSON.parse(localStorage.getItem("accountsList")) || void 0,
              n = () => {
                if (e && t) {
                  let {
                    residence: n,
                    account_type: i,
                    created_at: a,
                  } = t[e] || {};
                  o(n, i, a);
                }
              };
            if (document.getElementById("dbot-survicate")) {
              let e = document.getElementById("survicate-box");
              e && (e.style.display = "block"), n();
            } else l(n);
          };
        (i = (function () {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "",
            t = window.location;
          if (!/^\/(br_)/.test(t.pathname)) return e;
          let n = e.startsWith("/") ? e : `/${e}`;
          return `/${t.pathname.split("/")[1]}${n}`;
        })("/")),
          (window.__webpack_public_path__ = ""),
          (window.__webpack_public_path__ = i);
      },
      42457: function (e, t, n) {
        "use strict";
        n.d(t, {
          _: function () {
            return i;
          },
        });
        let i = (e, t) =>
          new Promise((n) => {
            if (document.querySelector(e)) {
              n(document.querySelector(e));
              return;
            }
            let i = new MutationObserver(() => {
              document.querySelector(e) &&
                (n(document.querySelector(e)), i.disconnect());
            });
            i.observe(t ?? document.body, { childList: !0, subtree: !0 });
          });
      },
      18908: function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            default: function () {
              return a;
            },
          });
        var i = n(68949);
        let a = (() => {
          let e;
          let t = !1,
            n = (e) => {
              var t;
              null === (t = window.dataLayer) || void 0 === t || t.push(e);
            },
            a = (e, t, i) => {
              try {
                let a = `${e}-${t}`,
                  o = {
                    counters: `tr:${i.number_of_runs},\
                ts:${i.total_stake},\
                py:${i.total_payout},\
                lc:${i.lost_contracts},\
                wc:${i.won_contracts},\
                pr:${i.total_profit}`.replace(/\s/g, ""),
                    event: "dbot_run",
                    run_id: a,
                  };
                n(o);
              } catch (e) {
                console.warn("Error pushing run data to datalayer ", e);
              }
            };
          return {
            init: (n) => {
              if (!t) {
                (t = !0),
                  setTimeout(() => {
                    (function () {
                      !(function (e, t, n, i, a) {
                        (e[i] = e[i] || []),
                          e[i].push({
                            "gtm.start": new Date().getTime(),
                            event: "gtm.js",
                          });
                        let o = t.getElementsByTagName(n)[0],
                          s = t.createElement(n);
                        (s.defer = !0),
                          (s.src =
                            "https://www.googletagmanager.com/gtm.js?id=" +
                            a +
                            ("dataLayer" != i ? "&l=" + i : "")),
                          o.parentNode.insertBefore(s, o);
                      })(
                        window,
                        document,
                        "script",
                        "dataLayer",
                        "GTM-NF7884S"
                      );
                    })();
                  }, 3e3);
                try {
                  let {
                    run_panel: t,
                    transactions: o,
                    client: s,
                    common: r,
                  } = n;
                  (0, i.U5)(
                    () => t.is_running,
                    () => {
                      t.is_running &&
                        (clearTimeout(e),
                        (e = setTimeout(() => {
                          var e;
                          a(
                            null == s ? void 0 : s.loginid,
                            null == r
                              ? void 0
                              : null === (e = r.server_time) || void 0 === e
                              ? void 0
                              : e.unix(),
                            null == o ? void 0 : o.statistics
                          );
                        }, 500)));
                    }
                  );
                } catch (e) {
                  console.warn("Error initializing GTM reactions ", e);
                }
              }
            },
            pushDataLayer: n,
            onTransactionClosed: (e) => {
              n({
                event: "dbot_run_transaction",
                reference_id: (null == e ? void 0 : e.contract_id) ?? "",
              });
            },
            onRunBot: a,
          };
        })();
      },
      69103: function (e, t, n) {
        "use strict";
        n.d(t, {
          I: function () {
            return i;
          },
          S: function () {
            return l;
          },
        });
        let i = {
            TEXT: "text",
            VIDEO: "video",
            IMAGE: "image",
            BLOCK: "block",
            EXAMPLE: "example",
          },
          { TEXT: a, IMAGE: o, BLOCK: s, EXAMPLE: r } = i,
          l = (e) => (
            (window.__webpack_public_path__ = e),
            {
              procedures_ifreturn: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "if-return" },
              ],
              math_arithmetic: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              math_single: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              math_constrain: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: r, example_id: "constrain" },
              ],
              text_print: [{ type: a }, { type: s }, { type: a }],
              text_prompt_ext: [{ type: a }, { type: s }, { type: a }],
              tick_analysis: [{ type: a }, { type: s }],
              read_details: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              last_digit: [{ type: a }, { type: s }],
              read_ohlc: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: r, example_id: "in_candle_list_read" },
              ],
              read_ohlc_obj: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: r, example_id: "read_candle_value" },
              ],
              check_direction: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
              ],
              get_ohlc: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "get_candle" },
                { type: a },
              ],
              ohlc: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "candle_list_1" },
              ],
              ohlc_values: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "candle_list" },
              ],
              is_candle_black: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/is_candle_black.jpeg`,
                },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/is_candle_black_1.jpeg`,
                },
                { type: a },
              ],
              ohlc_values_in_list: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: r, example_id: "candle_list_1" },
              ],
              variables_gets: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              variables_set: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/create_variable.jpg`,
                },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/set_variable.png`,
                },
              ],
              epoch: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: r, example_id: "epoch" },
              ],
              todatetime: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "todatetime" },
                { type: a },
              ],
              totimestamp: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "totimestamp" },
                { type: a },
              ],
              notify_telegram: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: r, example_id: "notify_telegram" },
              ],
              console: [
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              balance: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              sma_statement: [
                { type: a },
                { type: s },
                { type: a },
                {
                  type: o,
                  width: "60%",
                  url: `${window.__webpack_public_path__}assets/media/sma_formula.png`,
                },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/sma_chart_1.png`,
                },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/sma_chart_2.png`,
                },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: r, example_id: "sma_block_example" },
                { type: a },
                { type: a },
                { type: r, example_id: "sma_block_example_1" },
                { type: a },
                { type: a },
                { type: r, example_id: "sma_array" },
                { type: a },
                { type: a },
                { type: a },
                {
                  type: o,
                  width: "100%",
                  url: `${window.__webpack_public_path__}assets/media/sma_array_explanation.jpeg`,
                },
              ],
              trade_definition: [
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: a },
                { type: s },
              ],
              trade_definition_tradeoptions: [{ type: a }, { type: s }],
              trade_definition_multiplier: [
                { type: a },
                { type: a },
                { type: a },
                { type: a },
              ],
              before_purchase: [{ type: a }, { type: s }, { type: a }],
              during_purchase: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "sell_available" },
              ],
              sell_at_market: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "sell_available" },
              ],
              after_purchase: [{ type: a }, { type: s }, { type: a }],
              trade_again: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "trade_again" },
              ],
              contract_check_result: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: r, example_id: "check_result" },
              ],
              sell_price: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "sell_pl" },
              ],
              controls_if: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "controls_if" },
                { type: a },
                { type: r, example_id: "compare_logic" },
                { type: r, example_id: "compare_logic_1" },
              ],
              logic_operation: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                {
                  type: o,
                  width: "40%",
                  url: `${window.__webpack_public_path__}assets/media/logic.png`,
                },
              ],
              controls_whileUntil: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: r, example_id: "repeat_while" },
                { type: a },
                { type: r, example_id: "repeat_until" },
              ],
              controls_for: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "controls_for" },
                { type: a },
                { type: a },
              ],
              controls_forEach: [
                { type: a },
                { type: s },
                { type: a },
                { type: r, example_id: "controls_forEach" },
                { type: a },
                { type: a },
                { type: a },
              ],
              controls_flow_statements: [
                { type: a },
                { type: s },
                { type: a },
                { type: a },
                { type: r, example_id: "break_out" },
                { type: a },
                { type: r, example_id: "continue" },
              ],
            }
          );
      },
      58902: function (e, t, n) {
        "use strict";
        n.d(t, {
          $8: function () {
            return a;
          },
          Jp: function () {
            return o;
          },
          ev: function () {
            return s;
          },
        });
        let i = () => JSON.parse(localStorage.getItem("dbot_settings")),
          a = (e) => {
            let t = i();
            return t ? t[e] : null;
          },
          o = (e, t) => {
            let n = i() || {};
            (n[e] = t),
              localStorage.setItem("dbot_settings", JSON.stringify(n));
          },
          s = (e) => {
            let t = i() || {};
            delete t[e],
              localStorage.setItem("dbot_settings", JSON.stringify(t));
          };
      },
      33304: function (e, t, n) {
        "use strict";
        n.d(t, {
          F0: function () {
            return i;
          },
        });
        let i = "Deriv";
      },
      27179: function (e, t, n) {
        "use strict";
        n.d(t, {
          Yp: function () {
            return r;
          },
          gb: function () {
            return s;
          },
          kT: function () {
            return l;
          },
        });
        var i = n(30381),
          a = n.n(i);
        let o = (e) => a().unix(e).utc(),
          s = (e) =>
            e && a()(e).isValid()
              ? a().isMoment(e) && e.isValid() && e.isUTC()
                ? e
                : "number" == typeof e
                ? o(e)
                : a().utc(e)
              : a()().utc(),
          r = "YYYY-MM-DD HH:mm:ss [GMT]",
          l = "YYYY-MM-DD HH:mm:ss Z";
      },
      89606: function (e, t, n) {
        "use strict";
        n.d(t, {
          J: function () {
            return o;
          },
        });
        var i = n(85893),
          a = n(67294);
        let o = (0, a.memo)((e) => {
          let { icon: t, ...n } = e;
          return (0, i.jsx)("div", {
            className: "dummy-icon",
            ...n,
            children: (0, i.jsx)("img", {
              src: `assets/icons/${t}.svg`,
              alt: t,
              onError: (e) => {
                e.target.src = "assets/icons/IcDashboard.svg";
              },
            }),
          });
        });
      },
      18925: function () {},
    },
    t = {};
  function n(i) {
    var a = t[i];
    if (void 0 !== a) return a.exports;
    var o = (t[i] = { id: i, loaded: !1, exports: {} });
    return e[i].call(o.exports, o, o.exports, n), (o.loaded = !0), o.exports;
  }
  (n.m = e),
    (n.n = function (e) {
      var t =
        e && e.__esModule
          ? function () {
              return e.default;
            }
          : function () {
              return e;
            };
      return n.d(t, { a: t }), t;
    }),
    (() => {
      var e,
        t = Object.getPrototypeOf
          ? function (e) {
              return Object.getPrototypeOf(e);
            }
          : function (e) {
              return e.__proto__;
            };
      n.t = function (i, a) {
        if (
          (1 & a && (i = this(i)),
          8 & a ||
            ("object" == typeof i &&
              i &&
              ((4 & a && i.__esModule) ||
                (16 & a && "function" == typeof i.then))))
        )
          return i;
        var o = Object.create(null);
        n.r(o);
        var s = {};
        e = e || [null, t({}), t([]), t(t)];
        for (
          var r = 2 & a && i;
          "object" == typeof r && !~e.indexOf(r);
          r = t(r)
        )
          Object.getOwnPropertyNames(r).forEach(function (e) {
            s[e] = function () {
              return i[e];
            };
          });
        return (
          (s.default = function () {
            return i;
          }),
          n.d(o, s),
          o
        );
      };
    })(),
    (n.d = function (e, t) {
      for (var i in t)
        n.o(t, i) &&
          !n.o(e, i) &&
          Object.defineProperty(e, i, { enumerable: !0, get: t[i] });
    }),
    (n.f = {}),
    (n.e = function (e) {
      return Promise.all(
        Object.keys(n.f).reduce(function (t, i) {
          return n.f[i](e, t), t;
        }, [])
      );
    }),
    (n.hmd = function (e) {
      return (
        !(e = Object.create(e)).children && (e.children = []),
        Object.defineProperty(e, "exports", {
          enumerable: !0,
          set: function () {
            throw Error(
              "ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: " +
                e.id
            );
          },
        }),
        e
      );
    }),
    (n.u = function (e) {
      return (
        "static/js/async/" +
        ({
          110: "accumulators_dalembert_on_stat_reset-xml",
          281: "1_3_2_6-xml",
          329: "accumulators_martingale_on_stat_reset-xml",
          369: "oscars_grind_max-stake-xml",
          451: "dalembert-xml",
          535: "accumulators_reverse_dalembert_on_stat_reset-xml",
          59: "martingale-xml",
          600: "dalembert_max-stake-xml",
          642: "oscars_grind-xml",
          723: "martingale_max-stake-xml",
          730: "accumulators_reverse_dalembert-xml",
          777: "accumulators_reverse_martingale-xml",
          809: "reverse_dalembert-xml",
          822: "reverse_martingale-xml",
          867: "dbot-collection",
          881: "accumulators_reverse_martingale_on_stat_reset-xml",
          917: "accumulators_martingale-xml",
          980: "accumulators_dalembert-xml",
        }[e] || e) +
        "." +
        {
          110: "f9070507",
          165: "c25945a3",
          258: "fd15e424",
          281: "bc09d0b8",
          31: "43fe8a85",
          327: "f644d307",
          329: "1e5c6fa6",
          369: "cfe4c853",
          378: "05b4d48e",
          394: "33223296",
          451: "a87b54b9",
          463: "10f157a5",
          535: "c96c7669",
          551: "07445070",
          59: "ef17bdde",
          600: "cd16a357",
          602: "deccc6e5",
          609: "1f4404e7",
          642: "92cb2a86",
          723: "61c0848d",
          730: "c6c62f9b",
          733: "198a3135",
          753: "a367dc50",
          759: "ad8802ec",
          777: "5de28a8c",
          780: "fe03a852",
          809: "faf6f5cc",
          822: "9b7a8cfe",
          867: "1d13cb2c",
          881: "cf5666b3",
          889: "add47a0f",
          892: "4be81b10",
          917: "12922288",
          932: "c097ba9c",
          980: "1f1ed9fd",
          987: "72fd6318",
        }[e] +
        ".js"
      );
    }),
    (n.miniCssF = function (e) {
      return (
        "static/css/async/" +
        e +
        "." +
        {
          258: "b6ca8bb3",
          31: "03198a42",
          394: "9cd64797",
          759: "81995dd0",
          780: "68e30ffe",
          889: "a1f0e185",
          932: "34672c4b",
          987: "de041337",
        }[e] +
        ".css"
      );
    }),
    (n.h = function () {
      return "a1bc587e9fdbd88f";
    }),
    (n.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || Function("return this")();
      } catch (e) {
        if ("object" == typeof window) return window;
      }
    })()),
    (n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }),
    (() => {
      var e = {},
        t = "bot:";
      n.l = function (i, a, o, s) {
        if (e[i]) {
          e[i].push(a);
          return;
        }
        if (void 0 !== o) {
          for (
            var r, l, d = document.getElementsByTagName("script"), c = 0;
            c < d.length;
            c++
          ) {
            var u = d[c];
            if (
              u.getAttribute("src") == i ||
              u.getAttribute("data-webpack") == t + o
            ) {
              r = u;
              break;
            }
          }
        }
        !r &&
          ((l = !0),
          ((r = document.createElement("script")).charset = "utf-8"),
          (r.timeout = 120),
          n.nc && r.setAttribute("nonce", n.nc),
          r.setAttribute("data-webpack", t + o),
          (r.src = i)),
          (e[i] = [a]);
        var h = function (t, n) {
            (r.onerror = r.onload = null), clearTimeout(p);
            var a = e[i];
            if (
              (delete e[i],
              r.parentNode && r.parentNode.removeChild(r),
              a &&
                a.forEach(function (e) {
                  return e(n);
                }),
              t)
            )
              return t(n);
          },
          p = setTimeout(
            h.bind(null, void 0, { type: "timeout", target: r }),
            12e4
          );
        (r.onerror = h.bind(null, r.onerror)),
          (r.onload = h.bind(null, r.onload)),
          l && document.head.appendChild(r);
      };
    })(),
    (n.r = function (e) {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    }),
    (n.nmd = function (e) {
      return (e.paths = []), !e.children && (e.children = []), e;
    }),
    (() => {
      var e = [];
      n.O = function (t, i, a, o) {
        if (i) {
          o = o || 0;
          for (var s = e.length; s > 0 && e[s - 1][2] > o; s--) e[s] = e[s - 1];
          e[s] = [i, a, o];
          return;
        }
        for (var r = 1 / 0, s = 0; s < e.length; s++) {
          for (
            var i = e[s][0], a = e[s][1], o = e[s][2], l = !0, d = 0;
            d < i.length;
            d++
          )
            (!1 & o || r >= o) &&
            Object.keys(n.O).every(function (e) {
              return n.O[e](i[d]);
            })
              ? i.splice(d--, 1)
              : ((l = !1), o < r && (r = o));
          if (l) {
            e.splice(s--, 1);
            var c = a();
            void 0 !== c && (t = c);
          }
        }
        return t;
      };
    })(),
    (n.p = "/"),
    (n.rv = function () {
      return "1.0.14";
    }),
    (() => {
      if ("undefined" != typeof document) {
        var e = function (e, t, i, a, o) {
            var s = document.createElement("link");
            return (
              (s.rel = "stylesheet"),
              (s.type = "text/css"),
              n.nc && (s.nonce = n.nc),
              (s.onerror = s.onload =
                function (n) {
                  if (((s.onerror = s.onload = null), "load" === n.type)) a();
                  else {
                    var i = n && ("load" === n.type ? "missing" : n.type),
                      r = (n && n.target && n.target.href) || t,
                      l = Error(
                        "Loading CSS chunk " + e + " failed.\\n(" + r + ")"
                      );
                    (l.code = "CSS_CHUNK_LOAD_FAILED"),
                      (l.type = i),
                      (l.request = r),
                      s.parentNode && s.parentNode.removeChild(s),
                      o(l);
                  }
                }),
              (s.href = t),
              i
                ? i.parentNode.insertBefore(s, i.nextSibling)
                : document.head.appendChild(s),
              s
            );
          },
          t = function (e, t) {
            for (
              var n = document.getElementsByTagName("link"), i = 0;
              i < n.length;
              i++
            ) {
              var a = n[i],
                o = a.getAttribute("data-href") || a.getAttribute("href");
              if ("stylesheet" === a.rel && (o === e || o === t)) return a;
            }
            for (
              var s = document.getElementsByTagName("style"), i = 0;
              i < s.length;
              i++
            ) {
              var a = s[i],
                o = a.getAttribute("data-href");
              if (o === e || o === t) return a;
            }
          },
          i = { 487: 0 };
        n.f.miniCss = function (a, o) {
          if (i[a]) o.push(i[a]);
          else if (
            0 !== i[a] &&
            { 889: 1, 987: 1, 759: 1, 258: 1, 932: 1, 780: 1, 31: 1, 394: 1 }[a]
          ) {
            var s;
            o.push(
              (i[a] = ((s = a),
              new Promise(function (i, a) {
                var o = n.miniCssF(s),
                  r = n.p + o;
                if (t(o, r)) return i();
                e(s, r, null, i, a);
              })).then(
                function () {
                  i[a] = 0;
                },
                function (e) {
                  throw (delete i[a], e);
                }
              ))
            );
          }
        };
      }
    })(),
    (() => {
      var e = { 487: 0 };
      (n.f.j = function (t, i) {
        var a = n.o(e, t) ? e[t] : void 0;
        if (0 !== a) {
          if (a) i.push(a[2]);
          else {
            var o = new Promise(function (n, i) {
              a = e[t] = [n, i];
            });
            i.push((a[2] = o));
            var s = n.p + n.u(t),
              r = Error();
            n.l(
              s,
              function (i) {
                if (n.o(e, t) && (0 !== (a = e[t]) && (e[t] = void 0), a)) {
                  var o = i && ("load" === i.type ? "missing" : i.type),
                    s = i && i.target && i.target.src;
                  (r.message =
                    "Loading chunk " + t + " failed.\n(" + o + ": " + s + ")"),
                    (r.name = "ChunkLoadError"),
                    (r.type = o),
                    (r.request = s),
                    a[1](r);
                }
              },
              "chunk-" + t,
              t
            );
          }
        }
      }),
        (n.O.j = function (t) {
          return 0 === e[t];
        });
      var t = function (t, i) {
          var a = i[0],
            o = i[1],
            s = i[2],
            r,
            l,
            d = 0;
          if (
            a.some(function (t) {
              return 0 !== e[t];
            })
          ) {
            for (r in o) n.o(o, r) && (n.m[r] = o[r]);
            if (s) var c = s(n);
          }
          for (t && t(i); d < a.length; d++)
            (l = a[d]), n.o(e, l) && e[l] && e[l][0](), (e[l] = 0);
          return n.O(c);
        },
        i = (self.webpackChunkbot = self.webpackChunkbot || []);
      i.forEach(t.bind(null, 0)), (i.push = t.bind(null, i.push.bind(i)));
    })(),
    (n.ruid = "bundler=rspack@1.0.14");
  var i = n.O(void 0, ["361", "118", "721"], function () {
    return n("22187");
  });
  i = n.O(i);
})();